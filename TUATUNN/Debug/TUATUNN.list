
TUATUNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005338  08005338  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005340  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000064  080053a4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080053a4  00007354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014967  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  0001b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0001e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e61  00000000  00000000  0001f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ce6  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a72  00000000  00000000  00046ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdec2  00000000  00000000  0005c949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a80b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  0015a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005294 	.word	0x08005294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08005294 	.word	0x08005294

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fbf5 	bl	8000db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f818 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f938 	bl	8000840 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f860 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d4:	f000 f8a8 	bl	8000728 <MX_SPI3_Init>
  MX_TIM2_Init();
 80005d8:	f000 f8e4 	bl	80007a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
  SPI_Setup();
 80005dc:	f000 f9c0 	bl	8000960 <SPI_Setup>
  HAL_TIM_Base_Start_IT(&htim2);
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <main+0x38>)
 80005e2:	f002 fd7f 	bl	80030e4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UARTPollingMethod();
 80005e6:	f000 fa19 	bl	8000a1c <UARTPollingMethod>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fc52 	bl	8000e94 <HAL_Delay>
	Tuatunn();
 80005f0:	f000 f9d6 	bl	80009a0 <Tuatunn>
	UARTPollingMethod();
 80005f4:	bf00      	nop
 80005f6:	e7f6      	b.n	80005e6 <main+0x26>
 80005f8:	20000178 	.word	0x20000178

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2238      	movs	r2, #56	@ 0x38
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f9c2 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 ffa6 	bl	8001570 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2340      	movs	r3, #64	@ 0x40
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800063a:	2304      	movs	r3, #4
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063e:	2355      	movs	r3, #85	@ 0x55
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f840 	bl	80016d8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065e:	f000 f9f9 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb3e 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000686:	f000 f9e5 	bl	8000a54 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <MX_LPUART1_UART_Init+0x90>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d6:	4812      	ldr	r0, [pc, #72]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f003 fa40 	bl	8003b5c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f9b7 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	f004 f869 	bl	80047c0 <HAL_UARTEx_SetTxFifoThreshold>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006f4:	f000 f9ae 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	f004 f89e 	bl	800483c <HAL_UARTEx_SetRxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000706:	f000 f9a5 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	f004 f81f 	bl	800474e <HAL_UARTEx_DisableFifoMode>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000716:	f000 f99d 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080
 8000724:	40008000 	.word	0x40008000

08000728 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_SPI3_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <MX_SPI3_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_SPI3_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_SPI3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_SPI3_Init+0x74>)
 8000742:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000746:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_SPI3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_SPI3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_SPI3_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_SPI3_Init+0x74>)
 800075e:	2238      	movs	r2, #56	@ 0x38
 8000760:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_SPI3_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_SPI3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_SPI3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_SPI3_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_SPI3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_SPI3_Init+0x74>)
 8000782:	2208      	movs	r2, #8
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_SPI3_Init+0x74>)
 8000788:	f001 ff22 	bl	80025d0 <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f95f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000114 	.word	0x20000114
 80007a0:	40003c00 	.word	0x40003c00

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_TIM2_Init+0x98>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_TIM2_Init+0x98>)
 80007cc:	f244 2267 	movw	r2, #16999	@ 0x4267
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_TIM2_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_TIM2_Init+0x98>)
 80007da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_TIM2_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_TIM2_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ec:	4813      	ldr	r0, [pc, #76]	@ (800083c <MX_TIM2_Init+0x98>)
 80007ee:	f002 fc21 	bl	8003034 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f92c 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_TIM2_Init+0x98>)
 800080a:	f002 fe33 	bl	8003474 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000814:	f000 f91e 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_TIM2_Init+0x98>)
 8000826:	f003 f8bd 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000830:	f000 f910 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000178 	.word	0x20000178

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b3f      	ldr	r3, [pc, #252]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	4a3e      	ldr	r2, [pc, #248]	@ (8000954 <MX_GPIO_Init+0x114>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000862:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a38      	ldr	r2, [pc, #224]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x114>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x114>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_GPIO_Init+0x114>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a26      	ldr	r2, [pc, #152]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 fe0f 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2104      	movs	r1, #4
 80008de:	481e      	ldr	r0, [pc, #120]	@ (8000958 <MX_GPIO_Init+0x118>)
 80008e0:	f000 fe0a 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <MX_GPIO_Init+0x11c>)
 80008fc:	f000 fc62 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f000 fc53 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800091e:	2304      	movs	r3, #4
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MX_GPIO_Init+0x118>)
 8000936:	f000 fc45 	bl	80011c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2028      	movs	r0, #40	@ 0x28
 8000940:	f000 fba5 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f000 fbbc 	bl	80010c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	@ 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	48000c00 	.word	0x48000c00
 800095c:	48000800 	.word	0x48000800

08000960 <SPI_Setup>:

/* USER CODE BEGIN 4 */
void SPI_Setup()//at BEGIN 2
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2104      	movs	r1, #4
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <SPI_Setup+0x30>)
 800096a:	f000 fdc5 	bl	80014f8 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <SPI_Setup+0x34>)
 8000970:	2240      	movs	r2, #64	@ 0x40
 8000972:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//spi
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <SPI_Setup+0x34>)
 8000976:	2201      	movs	r2, #1
 8000978:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SPI_Setup+0x34>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000980:	2303      	movs	r3, #3
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <SPI_Setup+0x38>)
 8000984:	4903      	ldr	r1, [pc, #12]	@ (8000994 <SPI_Setup+0x34>)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <SPI_Setup+0x3c>)
 8000988:	f001 fece 	bl	8002728 <HAL_SPI_TransmitReceive_IT>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	48000c00 	.word	0x48000c00
 8000994:	200001d0 	.word	0x200001d0
 8000998:	200001c4 	.word	0x200001c4
 800099c:	20000114 	.word	0x20000114

080009a0 <Tuatunn>:

void Tuatunn()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80009a4:	2104      	movs	r1, #4
 80009a6:	4818      	ldr	r0, [pc, #96]	@ (8000a08 <Tuatunn+0x68>)
 80009a8:	f000 fd8e 	bl	80014c8 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d028      	beq.n	8000a04 <Tuatunn+0x64>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009b2:	2200      	movs	r2, #0
 80009b4:	2104      	movs	r1, #4
 80009b6:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <Tuatunn+0x68>)
 80009b8:	f000 fd9e 	bl	80014f8 <HAL_GPIO_WritePin>
		if (Mode == 0)
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <Tuatunn+0x6c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10c      	bne.n	80009de <Tuatunn+0x3e>
		{
			SPITx[0] = 0b01000001;//read
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <Tuatunn+0x70>)
 80009c6:	2241      	movs	r2, #65	@ 0x41
 80009c8:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <Tuatunn+0x70>)
 80009cc:	2212      	movs	r2, #18
 80009ce:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <Tuatunn+0x70>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
			Mode = 1;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <Tuatunn+0x6c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e00c      	b.n	80009f8 <Tuatunn+0x58>
		}
		else if(Mode == 1)
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <Tuatunn+0x6c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d108      	bne.n	80009f8 <Tuatunn+0x58>
		{
			SPITx[0] = 0b01000000;//write
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <Tuatunn+0x70>)
 80009e8:	2240      	movs	r2, #64	@ 0x40
 80009ea:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <Tuatunn+0x70>)
 80009ee:	2215      	movs	r2, #21
 80009f0:	705a      	strb	r2, [r3, #1]
			//LED_From();
			Mode = 0;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <Tuatunn+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009f8:	2303      	movs	r3, #3
 80009fa:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <Tuatunn+0x74>)
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <Tuatunn+0x70>)
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <Tuatunn+0x78>)
 8000a00:	f001 fe92 	bl	8002728 <HAL_SPI_TransmitReceive_IT>

	}
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	48000c00 	.word	0x48000c00
 8000a0c:	200001da 	.word	0x200001da
 8000a10:	200001d0 	.word	0x200001d0
 8000a14:	200001c4 	.word	0x200001c4
 8000a18:	20000114 	.word	0x20000114

08000a1c <UARTPollingMethod>:

void UARTPollingMethod()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//return received char

	sprintf((char*)TxBuffer,"Received : %s\r\n",text);
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <UARTPollingMethod+0x28>)
 8000a22:	4909      	ldr	r1, [pc, #36]	@ (8000a48 <UARTPollingMethod+0x2c>)
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <UARTPollingMethod+0x30>)
 8000a26:	f003 ff95 	bl	8004954 <siprintf>
	HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
 8000a2a:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <UARTPollingMethod+0x30>)
 8000a2c:	f7ff fbf8 	bl	8000220 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	230a      	movs	r3, #10
 8000a36:	4905      	ldr	r1, [pc, #20]	@ (8000a4c <UARTPollingMethod+0x30>)
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <UARTPollingMethod+0x34>)
 8000a3a:	f003 f8df 	bl	8003bfc <HAL_UART_Transmit>

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	080052ac 	.word	0x080052ac
 8000a4c:	200001dc 	.word	0x200001dc
 8000a50:	20000080 	.word	0x20000080

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f000 fe0f 	bl	80016b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09e      	sub	sp, #120	@ 0x78
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2254      	movs	r2, #84	@ 0x54
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 ff63 	bl	8004994 <memset>
  if(huart->Instance==LPUART1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <HAL_UART_MspInit+0xa8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d136      	bne.n	8000b46 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fb25 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af0:	f7ff ffb0 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0xac>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b24:	230c      	movs	r3, #12
 8000b26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b34:	230c      	movs	r3, #12
 8000b36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fb3f 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3778      	adds	r7, #120	@ 0x78
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40008000 	.word	0x40008000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <HAL_SPI_MspInit+0x8c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d130      	bne.n	8000bdc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_SPI_MspInit+0x90>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000baa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4809      	ldr	r0, [pc, #36]	@ (8000bec <HAL_SPI_MspInit+0x94>)
 8000bc8:	f000 fafc 	bl	80011c4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2033      	movs	r0, #51	@ 0x33
 8000bd2:	f000 fa5c 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000bd6:	2033      	movs	r0, #51	@ 0x33
 8000bd8:	f000 fa73 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000800 	.word	0x48000800

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c00:	d113      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_TIM_Base_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f000 fa35 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c24:	201c      	movs	r0, #28
 8000c26:	f000 fa4c 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <NMI_Handler+0x4>

08000c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <MemManage_Handler+0x4>

08000c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8e:	f000 f8e3 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <TIM2_IRQHandler+0x10>)
 8000c9e:	f002 fa99 	bl	80031d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000178 	.word	0x20000178

08000cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cb4:	f000 fc38 	bl	8001528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <SPI3_IRQHandler+0x10>)
 8000cc2:	f001 fddf 	bl	8002884 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000114 	.word	0x20000114

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f003 fe50 	bl	80049a4 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000204 	.word	0x20000204
 8000d38:	20000358 	.word	0x20000358

08000d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f003 fe0f 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fc15 	bl	80005c0 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000da4:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 8000da8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dac:	20000354 	.word	0x20000354

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>

08000db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f95b 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f80e 	bl	8000de4 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd4:	f7ff fe44 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_InitTick+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d022      	beq.n	8000e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_InitTick+0x6c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_InitTick+0x68>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f966 	bl	80010de <HAL_SYSTICK_Config>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10f      	bne.n	8000e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d809      	bhi.n	8000e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f000 f932 	bl	800108e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_InitTick+0x70>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e004      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000000c 	.word	0x2000000c

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a03      	ldr	r2, [pc, #12]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000208 	.word	0x20000208
 8000e78:	20000010 	.word	0x20000010

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000208 	.word	0x20000208

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d004      	beq.n	8000eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_Delay+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb8:	bf00      	nop
 8000eba:	f7ff ffdf 	bl	8000e7c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d8f7      	bhi.n	8000eba <HAL_Delay+0x26>
  {
  }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff40 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa4 	bl	8001034 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d00d      	beq.n	800112a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e047      	b.n	80011ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 020e 	bic.w	r2, r2, #14
 8001138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f003 021f 	and.w	r2, r3, #31
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001176:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800118e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001198:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	4798      	blx	r3
    }
  }
  return status;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011d2:	e15a      	b.n	800148a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 814c 	beq.w	8001484 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f003 0201 	and.w	r2, r3, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b03      	cmp	r3, #3
 8001270:	d017      	beq.n	80012a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d123      	bne.n	80012f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	6939      	ldr	r1, [r7, #16]
 80012f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0203 	and.w	r2, r3, #3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a6 	beq.w	8001484 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <HAL_GPIO_Init+0x2e4>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133c:	4a5a      	ldr	r2, [pc, #360]	@ (80014a8 <HAL_GPIO_Init+0x2e4>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6613      	str	r3, [r2, #96]	@ 0x60
 8001344:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <HAL_GPIO_Init+0x2e4>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001350:	4a56      	ldr	r2, [pc, #344]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800137a:	d01f      	beq.n	80013bc <HAL_GPIO_Init+0x1f8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a4c      	ldr	r2, [pc, #304]	@ (80014b0 <HAL_GPIO_Init+0x2ec>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d019      	beq.n	80013b8 <HAL_GPIO_Init+0x1f4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4b      	ldr	r2, [pc, #300]	@ (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d013      	beq.n	80013b4 <HAL_GPIO_Init+0x1f0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a4a      	ldr	r2, [pc, #296]	@ (80014b8 <HAL_GPIO_Init+0x2f4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d00d      	beq.n	80013b0 <HAL_GPIO_Init+0x1ec>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a49      	ldr	r2, [pc, #292]	@ (80014bc <HAL_GPIO_Init+0x2f8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x1e8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a48      	ldr	r2, [pc, #288]	@ (80014c0 <HAL_GPIO_Init+0x2fc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_GPIO_Init+0x1e4>
 80013a4:	2305      	movs	r3, #5
 80013a6:	e00a      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013a8:	2306      	movs	r3, #6
 80013aa:	e008      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013ac:	2304      	movs	r3, #4
 80013ae:	e006      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e004      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x1fa>
 80013bc:	2300      	movs	r3, #0
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ce:	4937      	ldr	r1, [pc, #220]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001400:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800142a:	4a26      	ldr	r2, [pc, #152]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800147e:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f ae9d 	bne.w	80011d4 <HAL_GPIO_Init+0x10>
  }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000c00 	.word	0x48000c00
 80014bc:	48001000 	.word	0x48001000
 80014c0:	48001400 	.word	0x48001400
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001514:	e002      	b.n	800151c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f806 	bl	8001558 <HAL_GPIO_EXTI_Callback>
  }
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d141      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b4b      	ldr	r3, [pc, #300]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d131      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800158c:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001592:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015a4:	4a41      	ldr	r2, [pc, #260]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ac:	4b40      	ldr	r3, [pc, #256]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2232      	movs	r2, #50	@ 0x32
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a3f      	ldr	r2, [pc, #252]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c2:	e002      	b.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d6:	d102      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f2      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015de:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ea:	d158      	bne.n	800169e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e057      	b.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015f6:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001600:	e04d      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001608:	d141      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001616:	d131      	bne.n	800167c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001618:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800161e:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001630:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001636:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2232      	movs	r2, #50	@ 0x32
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	0c9b      	lsrs	r3, r3, #18
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800164e:	e002      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3b01      	subs	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001662:	d102      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f2      	bne.n	8001650 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001676:	d112      	bne.n	800169e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e011      	b.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800168c:	e007      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40007000 	.word	0x40007000
 80016b0:	20000008 	.word	0x20000008
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	6093      	str	r3, [r2, #8]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40007000 	.word	0x40007000

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e2fe      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d075      	beq.n	80017e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f6:	4b97      	ldr	r3, [pc, #604]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001700:	4b94      	ldr	r3, [pc, #592]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0x3e>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d002      	beq.n	800171c <HAL_RCC_OscConfig+0x44>
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b8d      	ldr	r3, [pc, #564]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d05b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x108>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d157      	bne.n	80017e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e2d9      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x74>
 800173e:	4b85      	ldr	r3, [pc, #532]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a84      	ldr	r2, [pc, #528]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b7f      	ldr	r3, [pc, #508]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7e      	ldr	r2, [pc, #504]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b7c      	ldr	r3, [pc, #496]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7b      	ldr	r2, [pc, #492]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 8001770:	4b78      	ldr	r3, [pc, #480]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a77      	ldr	r2, [pc, #476]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b75      	ldr	r3, [pc, #468]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a74      	ldr	r2, [pc, #464]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fb74 	bl	8000e7c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fb70 	bl	8000e7c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e29e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xc0>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb60 	bl	8000e7c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb5c 	bl	8000e7c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e28a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d2:	4b60      	ldr	r3, [pc, #384]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0xe8>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d075      	beq.n	80018da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ee:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f8:	4b56      	ldr	r3, [pc, #344]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d102      	bne.n	800180e <HAL_RCC_OscConfig+0x136>
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d002      	beq.n	8001814 <HAL_RCC_OscConfig+0x13c>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d11f      	bne.n	8001854 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_OscConfig+0x154>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e25d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b49      	ldr	r3, [pc, #292]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	4946      	ldr	r1, [pc, #280]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001840:	4b45      	ldr	r3, [pc, #276]	@ (8001958 <HAL_RCC_OscConfig+0x280>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff facd 	bl	8000de4 <HAL_InitTick>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d043      	beq.n	80018d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e249      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a3c      	ldr	r2, [pc, #240]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb08 	bl	8000e7c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fb04 	bl	8000e7c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e232      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	061b      	lsls	r3, r3, #24
 800189c:	492d      	ldr	r1, [pc, #180]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
 80018a2:	e01a      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fae4 	bl	8000e7c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff fae0 	bl	8000e7c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e20e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1e0>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d041      	beq.n	800196a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01c      	beq.n	8001928 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f4:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fabd 	bl	8000e7c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fab9 	bl	8000e7c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1e7      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0ef      	beq.n	8001906 <HAL_RCC_OscConfig+0x22e>
 8001926:	e020      	b.n	800196a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x27c>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff faa0 	bl	8000e7c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193e:	e00d      	b.n	800195c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fa9c 	bl	8000e7c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d906      	bls.n	800195c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1ca      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	4b8c      	ldr	r3, [pc, #560]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ea      	bne.n	8001940 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80a6 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800197c:	4b84      	ldr	r3, [pc, #528]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_OscConfig+0x2b4>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x2b6>
 800198c:	2300      	movs	r3, #0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	4a7e      	ldr	r2, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800199c:	6593      	str	r3, [r2, #88]	@ 0x58
 800199e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	4b79      	ldr	r3, [pc, #484]	@ (8001b94 <HAL_RCC_OscConfig+0x4bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ba:	4b76      	ldr	r3, [pc, #472]	@ (8001b94 <HAL_RCC_OscConfig+0x4bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a75      	ldr	r2, [pc, #468]	@ (8001b94 <HAL_RCC_OscConfig+0x4bc>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa59 	bl	8000e7c <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff fa55 	bl	8000e7c <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e183      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b94 <HAL_RCC_OscConfig+0x4bc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_RCC_OscConfig+0x32e>
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fa:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a04:	e024      	b.n	8001a50 <HAL_RCC_OscConfig+0x378>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d110      	bne.n	8001a30 <HAL_RCC_OscConfig+0x358>
 8001a0e:	4b60      	ldr	r3, [pc, #384]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a14:	4a5e      	ldr	r2, [pc, #376]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a24:	4a5a      	ldr	r2, [pc, #360]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_OscConfig+0x378>
 8001a30:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a36:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a40:	4b53      	ldr	r3, [pc, #332]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a46:	4a52      	ldr	r2, [pc, #328]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d016      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff fa10 	bl	8000e7c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff fa0c 	bl	8000e7c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e138      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a76:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ed      	beq.n	8001a60 <HAL_RCC_OscConfig+0x388>
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff f9f9 	bl	8000e7c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f9f5 	bl	8000e7c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e121      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ed      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	4a34      	ldr	r2, [pc, #208]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ade:	4a2c      	ldr	r2, [pc, #176]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae8:	f7ff f9c8 	bl	8000e7c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af0:	f7ff f9c4 	bl	8000e7c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0f2      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ef      	beq.n	8001af0 <HAL_RCC_OscConfig+0x418>
 8001b10:	e01b      	b.n	8001b4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b18:	4a1d      	ldr	r2, [pc, #116]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f9ab 	bl	8000e7c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2a:	f7ff f9a7 	bl	8000e7c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0d5      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ef      	bne.n	8001b2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80c9 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	f000 8083 	beq.w	8001c68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d15e      	bne.n	8001c28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_RCC_OscConfig+0x4b8>)
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f981 	bl	8000e7c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e00c      	b.n	8001b98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f97d 	bl	8000e7c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d905      	bls.n	8001b98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0ab      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	4b55      	ldr	r3, [pc, #340]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ec      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba4:	4b52      	ldr	r3, [pc, #328]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <HAL_RCC_OscConfig+0x61c>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6a11      	ldr	r1, [r2, #32]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001bbe:	0212      	lsls	r2, r2, #8
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0552      	lsls	r2, r2, #21
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bd2:	0852      	lsrs	r2, r2, #1
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0652      	lsls	r2, r2, #25
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bde:	06d2      	lsls	r2, r2, #27
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4943      	ldr	r1, [pc, #268]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b41      	ldr	r3, [pc, #260]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a40      	ldr	r2, [pc, #256]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f93c 	bl	8000e7c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f938 	bl	8000e7c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e066      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	4b35      	ldr	r3, [pc, #212]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x530>
 8001c26:	e05e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a30      	ldr	r2, [pc, #192]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f922 	bl	8000e7c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f91e 	bl	8000e7c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c5a:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4924      	ldr	r1, [pc, #144]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c60:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_RCC_OscConfig+0x620>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	60cb      	str	r3, [r1, #12]
 8001c66:	e03e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e039      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCC_OscConfig+0x618>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d12c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	3b01      	subs	r3, #1
 8001c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d123      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d11b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d113      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	019f800c 	.word	0x019f800c
 8001cf8:	feeefffc 	.word	0xfeeefffc

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e11e      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b91      	ldr	r3, [pc, #580]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b8e      	ldr	r3, [pc, #568]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	498c      	ldr	r1, [pc, #560]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b8a      	ldr	r3, [pc, #552]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e106      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d073      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d129      	bne.n	8001dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b81      	ldr	r3, [pc, #516]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0f4      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d68:	f000 f99e 	bl	80020a8 <RCC_GetSysClockFreqFromPLLSource>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a7c      	ldr	r2, [pc, #496]	@ (8001f64 <HAL_RCC_ClockConfig+0x268>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d93f      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d76:	4b7a      	ldr	r3, [pc, #488]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d033      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d12f      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d96:	4b72      	ldr	r3, [pc, #456]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d9e:	4a70      	ldr	r2, [pc, #448]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e024      	b.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0c6      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	4b66      	ldr	r3, [pc, #408]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0be      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dd4:	f000 f8ce 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a61      	ldr	r2, [pc, #388]	@ (8001f64 <HAL_RCC_ClockConfig+0x268>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d909      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001de2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dea:	4a5d      	ldr	r2, [pc, #372]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b5a      	ldr	r3, [pc, #360]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4957      	ldr	r1, [pc, #348]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7ff f838 	bl	8000e7c <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff f834 	bl	8000e7c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e095      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b4e      	ldr	r3, [pc, #312]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e50:	4b43      	ldr	r3, [pc, #268]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a42      	ldr	r2, [pc, #264]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e70:	4a3b      	ldr	r2, [pc, #236]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4936      	ldr	r1, [pc, #216]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b80      	cmp	r3, #128	@ 0x80
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e92:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d21d      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 020f 	bic.w	r2, r3, #15
 8001eb4:	4929      	ldr	r1, [pc, #164]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe ffde 	bl	8000e7c <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe ffda 	bl	8000e7c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e03b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCC_ClockConfig+0x260>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1ed      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4917      	ldr	r1, [pc, #92]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f12:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490f      	ldr	r1, [pc, #60]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f26:	f000 f825 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <HAL_RCC_ClockConfig+0x26c>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_RCC_ClockConfig+0x270>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_RCC_ClockConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ff4a 	bl	8000de4 <HAL_InitTick>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	04c4b400 	.word	0x04c4b400
 8001f68:	080052bc 	.word	0x080052bc
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	2000000c 	.word	0x2000000c

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e047      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f8c:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f98:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e03e      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f9e:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d136      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a16      	ldr	r2, [pc, #88]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	68d2      	ldr	r2, [r2, #12]
 8001fd4:	0a12      	lsrs	r2, r2, #8
 8001fd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
      break;
 8001fe0:	e00c      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fe2:	4a13      	ldr	r2, [pc, #76]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	0a12      	lsrs	r2, r2, #8
 8001ff0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0e5b      	lsrs	r3, r3, #25
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	e001      	b.n	800201c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800201c:	693b      	ldr	r3, [r7, #16]
}
 800201e:	4618      	mov	r0, r3
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	00f42400 	.word	0x00f42400
 8002034:	016e3600 	.word	0x016e3600

08002038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	@ (8002078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	080052cc 	.word	0x080052cc

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002080:	f7ff ffda 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0adb      	lsrs	r3, r3, #11
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4904      	ldr	r1, [pc, #16]	@ (80020a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	080052cc 	.word	0x080052cc

080020a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d10c      	bne.n	80020e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020cc:	4a17      	ldr	r2, [pc, #92]	@ (800212c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d6:	68d2      	ldr	r2, [r2, #12]
 80020d8:	0a12      	lsrs	r2, r2, #8
 80020da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
    break;
 80020e4:	e00c      	b.n	8002100 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020f0:	68d2      	ldr	r2, [r2, #12]
 80020f2:	0a12      	lsrs	r2, r2, #8
 80020f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
    break;
 80020fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0e5b      	lsrs	r3, r3, #25
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800211a:	687b      	ldr	r3, [r7, #4]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40021000 	.word	0x40021000
 800212c:	016e3600 	.word	0x016e3600
 8002130:	00f42400 	.word	0x00f42400

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800213c:	2300      	movs	r3, #0
 800213e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002140:	2300      	movs	r3, #0
 8002142:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8098 	beq.w	8002282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	4a3f      	ldr	r2, [pc, #252]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	@ 0x58
 800216e:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217e:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a39      	ldr	r2, [pc, #228]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218a:	f7fe fe77 	bl	8000e7c <HAL_GetTick>
 800218e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002190:	e009      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fe73 	bl	8000e7c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d902      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	74fb      	strb	r3, [r7, #19]
        break;
 80021a4:	e005      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a6:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ef      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d159      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01e      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d019      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d4:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e0:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002200:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe fe33 	bl	8000e7c <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002218:	e00b      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fe2f 	bl	8000e7c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d902      	bls.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	74fb      	strb	r3, [r7, #19]
            break;
 8002230:	e006      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ec      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	4903      	ldr	r1, [pc, #12]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800225c:	e008      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	74bb      	strb	r3, [r7, #18]
 8002262:	e005      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002270:	7c7b      	ldrb	r3, [r7, #17]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4ba7      	ldr	r3, [pc, #668]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	4aa6      	ldr	r2, [pc, #664]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228e:	4ba1      	ldr	r3, [pc, #644]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f023 0203 	bic.w	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	499d      	ldr	r1, [pc, #628]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b0:	4b98      	ldr	r3, [pc, #608]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 020c 	bic.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4995      	ldr	r1, [pc, #596]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022d2:	4b90      	ldr	r3, [pc, #576]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	498c      	ldr	r1, [pc, #560]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f4:	4b87      	ldr	r3, [pc, #540]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	4984      	ldr	r1, [pc, #528]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002316:	4b7f      	ldr	r3, [pc, #508]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	497b      	ldr	r1, [pc, #492]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002338:	4b76      	ldr	r3, [pc, #472]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4973      	ldr	r1, [pc, #460]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235a:	4b6e      	ldr	r3, [pc, #440]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	496a      	ldr	r1, [pc, #424]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800237c:	4b65      	ldr	r3, [pc, #404]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4962      	ldr	r1, [pc, #392]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	4959      	ldr	r1, [pc, #356]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023c0:	4b54      	ldr	r3, [pc, #336]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	4951      	ldr	r1, [pc, #324]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	4948      	ldr	r1, [pc, #288]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002404:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4940      	ldr	r1, [pc, #256]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002422:	d105      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3a      	ldr	r2, [pc, #232]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243c:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244a:	4932      	ldr	r1, [pc, #200]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245c:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a2c      	ldr	r2, [pc, #176]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002466:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d015      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002474:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002482:	4924      	ldr	r1, [pc, #144]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002492:	d105      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800249e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ba:	4916      	ldr	r1, [pc, #88]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ca:	d105      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002502:	d109      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	e002      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002524:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4926      	ldr	r1, [pc, #152]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002542:	d105      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a20      	ldr	r2, [pc, #128]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	4918      	ldr	r1, [pc, #96]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d105      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002586:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002594:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800259a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	490a      	ldr	r1, [pc, #40]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025b2:	d105      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e09d      	b.n	800271e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f2:	d009      	beq.n	8002608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	e005      	b.n	8002608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fa98 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002648:	d902      	bls.n	8002650 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e002      	b.n	8002656 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002654:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800265e:	d007      	beq.n	8002670 <HAL_SPI_Init+0xa0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002668:	d002      	beq.n	8002670 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	f003 0204 	and.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800270c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002740:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002748:	7dbb      	ldrb	r3, [r7, #22]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00d      	beq.n	800276a <HAL_SPI_TransmitReceive_IT+0x42>
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002754:	d106      	bne.n	8002764 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_SPI_TransmitReceive_IT+0x3c>
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d002      	beq.n	800276a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002764:	2302      	movs	r3, #2
 8002766:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002768:	e07d      	b.n	8002866 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_SPI_TransmitReceive_IT+0x54>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_SPI_TransmitReceive_IT+0x54>
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002780:	e071      	b.n	8002866 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_SPI_TransmitReceive_IT+0x68>
 800278c:	2302      	movs	r3, #2
 800278e:	e06b      	b.n	8002868 <HAL_SPI_TransmitReceive_IT+0x140>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d003      	beq.n	80027ac <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2205      	movs	r2, #5
 80027a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027e2:	d906      	bls.n	80027f2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80027e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_SPI_TransmitReceive_IT+0x150>)
 80027ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80027f0:	e005      	b.n	80027fe <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a21      	ldr	r2, [pc, #132]	@ (800287c <HAL_SPI_TransmitReceive_IT+0x154>)
 80027f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <HAL_SPI_TransmitReceive_IT+0x158>)
 80027fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002806:	d802      	bhi.n	800280e <HAL_SPI_TransmitReceive_IT+0xe6>
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d908      	bls.n	8002820 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e007      	b.n	8002830 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800282e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d007      	beq.n	800284e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002864:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	08002c23 	.word	0x08002c23
 8002878:	08002c89 	.word	0x08002c89
 800287c:	08002ad3 	.word	0x08002ad3
 8002880:	08002b91 	.word	0x08002b91

08002884 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
    return;
 80028c2:	e0ce      	b.n	8002a62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_SPI_IRQHandler+0x5e>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
    return;
 80028e0:	e0bf      	b.n	8002a62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_SPI_IRQHandler+0x7e>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b0 	beq.w	8002a62 <HAL_SPI_IRQHandler+0x1de>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80aa 	beq.w	8002a62 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d011      	beq.n	8002948 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	e00b      	b.n	8002960 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
        return;
 800295e:	e080      	b.n	8002a62 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a2:	f043 0208 	orr.w	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d04f      	beq.n	8002a60 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <HAL_SPI_IRQHandler+0x168>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d034      	beq.n	8002a56 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0203 	bic.w	r2, r2, #3
 80029fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <HAL_SPI_IRQHandler+0x1e4>)
 8002a0a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fb70 	bl	80010f6 <HAL_DMA_Abort_IT>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	4a0c      	ldr	r2, [pc, #48]	@ (8002a68 <HAL_SPI_IRQHandler+0x1e4>)
 8002a36:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fb5a 	bl	80010f6 <HAL_DMA_Abort_IT>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002a54:	e003      	b.n	8002a5e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f81c 	bl	8002a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a5c:	e000      	b.n	8002a60 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a5e:	bf00      	nop
    return;
 8002a60:	bf00      	nop
  }
}
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	08002aa9 	.word	0x08002aa9

08002a6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff ffe5 	bl	8002a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d923      	bls.n	8002b2e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	b292      	uxth	r2, r2
 8002af2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	1c9a      	adds	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b02      	subs	r3, #2
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d11f      	bne.n	8002b5c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	e016      	b.n	8002b5c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f103 020c 	add.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	7812      	ldrb	r2, [r2, #0]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b76:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa14 	bl	8002fb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d912      	bls.n	8002bc8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b02      	subs	r3, #2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bc6:	e012      	b.n	8002bee <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d110      	bne.n	8002c1a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c06:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9cb 	bl	8002fb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	b292      	uxth	r2, r2
 8002c36:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f998 	bl	8002fb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d110      	bne.n	8002ce0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ccc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f968 	bl	8002fb0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cf8:	f7fe f8c0 	bl	8000e7c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d08:	f7fe f8b8 	bl	8000e7c <HAL_GetTick>
 8002d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	0d1b      	lsrs	r3, r3, #20
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d1e:	e054      	b.n	8002dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d050      	beq.n	8002dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d28:	f7fe f8a8 	bl	8000e7c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d902      	bls.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d13d      	bne.n	8002dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d56:	d111      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d60:	d004      	beq.n	8002d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6a:	d107      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d84:	d10f      	bne.n	8002da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e017      	b.n	8002dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d19b      	bne.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000008 	.word	0x20000008

08002df8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e0a:	f7fe f837 	bl	8000e7c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e1a:	f7fe f82f 	bl	8000e7c <HAL_GetTick>
 8002e1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e28:	4b3d      	ldr	r3, [pc, #244]	@ (8002f20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00da      	lsls	r2, r3, #3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	0d1b      	lsrs	r3, r3, #20
 8002e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e40:	e060      	b.n	8002f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e48:	d107      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d050      	beq.n	8002f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e62:	f7fe f80b 	bl	8000e7c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d902      	bls.n	8002e78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d13d      	bne.n	8002ef4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e90:	d111      	bne.n	8002eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9a:	d004      	beq.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea4:	d107      	bne.n	8002eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ebe:	d10f      	bne.n	8002ee0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ede:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e010      	b.n	8002f16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d196      	bne.n	8002e42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3728      	adds	r7, #40	@ 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000008 	.word	0x20000008

08002f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff ff5b 	bl	8002df8 <SPI_WaitFifoStateUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e027      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2180      	movs	r1, #128	@ 0x80
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fec0 	bl	8002ce8 <SPI_WaitFlagStateUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e014      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ff34 	bl	8002df8 <SPI_WaitFifoStateUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e000      	b.n	8002fa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb8:	f7fd ff60 	bl	8000e7c <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0220 	bic.w	r2, r2, #32
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	2164      	movs	r1, #100	@ 0x64
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa6 	bl	8002f24 <SPI_EndRxTxTransaction>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d107      	bne.n	800300e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fd30 	bl	8002a6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800300c:	e00e      	b.n	800302c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fd32 	bl	8002a80 <HAL_SPI_TxRxCpltCallback>
}
 800301c:	e006      	b.n	800302c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fd34 	bl	8002a94 <HAL_SPI_ErrorCallback>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e049      	b.n	80030da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fdc8 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f000 fb46 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e054      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a26      	ldr	r2, [pc, #152]	@ (80031b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003126:	d01d      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	@ (80031bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x80>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	@ (80031cc <HAL_TIM_Base_Start_IT+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d115      	bne.n	8003190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_TIM_Base_Start_IT+0xec>)
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d015      	beq.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800317c:	d011      	beq.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	e008      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40015000 	.word	0x40015000
 80031d0:	00010007 	.word	0x00010007

080031d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d020      	beq.n	8003238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0202 	mvn.w	r2, #2
 8003208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa52 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fa44 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa55 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d020      	beq.n	8003284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0204 	mvn.w	r2, #4
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa2c 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa1e 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa2f 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d020      	beq.n	80032d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0208 	mvn.w	r2, #8
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa06 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9f8 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa09 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d020      	beq.n	800331c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01b      	beq.n	800331c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0210 	mvn.w	r2, #16
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2208      	movs	r2, #8
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9e0 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9d2 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9e3 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00c      	beq.n	8003340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0201 	mvn.w	r2, #1
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9b0 	bl	80036a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fbbb 	bl	8003ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00c      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800338a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fbb3 	bl	8003af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f99d 	bl	80036f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00c      	beq.n	80033da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d007      	beq.n	80033da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f06f 0220 	mvn.w	r2, #32
 80033d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb7b 	bl	8003ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fb87 	bl	8003b0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb7f 	bl	8003b20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fb77 	bl	8003b34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb6f 	bl	8003b48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_TIM_ConfigClockSource+0x1c>
 800348c:	2302      	movs	r3, #2
 800348e:	e0f6      	b.n	800367e <HAL_TIM_ConfigClockSource+0x20a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80034ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003688 <HAL_TIM_ConfigClockSource+0x214>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f000 80c1 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 80034d0:	4a6d      	ldr	r2, [pc, #436]	@ (8003688 <HAL_TIM_ConfigClockSource+0x214>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f200 80c6 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 80034d8:	4a6c      	ldr	r2, [pc, #432]	@ (800368c <HAL_TIM_ConfigClockSource+0x218>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f000 80b9 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 80034e0:	4a6a      	ldr	r2, [pc, #424]	@ (800368c <HAL_TIM_ConfigClockSource+0x218>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f200 80be 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 80034e8:	4a69      	ldr	r2, [pc, #420]	@ (8003690 <HAL_TIM_ConfigClockSource+0x21c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f000 80b1 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 80034f0:	4a67      	ldr	r2, [pc, #412]	@ (8003690 <HAL_TIM_ConfigClockSource+0x21c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	f200 80b6 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 80034f8:	4a66      	ldr	r2, [pc, #408]	@ (8003694 <HAL_TIM_ConfigClockSource+0x220>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f000 80a9 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003500:	4a64      	ldr	r2, [pc, #400]	@ (8003694 <HAL_TIM_ConfigClockSource+0x220>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f200 80ae 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003508:	4a63      	ldr	r2, [pc, #396]	@ (8003698 <HAL_TIM_ConfigClockSource+0x224>)
 800350a:	4293      	cmp	r3, r2
 800350c:	f000 80a1 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003510:	4a61      	ldr	r2, [pc, #388]	@ (8003698 <HAL_TIM_ConfigClockSource+0x224>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f200 80a6 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003518:	4a60      	ldr	r2, [pc, #384]	@ (800369c <HAL_TIM_ConfigClockSource+0x228>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f000 8099 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003520:	4a5e      	ldr	r2, [pc, #376]	@ (800369c <HAL_TIM_ConfigClockSource+0x228>)
 8003522:	4293      	cmp	r3, r2
 8003524:	f200 809e 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003528:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800352c:	f000 8091 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003530:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003534:	f200 8096 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003538:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353c:	f000 8089 	beq.w	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003544:	f200 808e 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354c:	d03e      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0x158>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003552:	f200 8087 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355a:	f000 8086 	beq.w	800366a <HAL_TIM_ConfigClockSource+0x1f6>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003562:	d87f      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003564:	2b70      	cmp	r3, #112	@ 0x70
 8003566:	d01a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x12a>
 8003568:	2b70      	cmp	r3, #112	@ 0x70
 800356a:	d87b      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 800356c:	2b60      	cmp	r3, #96	@ 0x60
 800356e:	d050      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x19e>
 8003570:	2b60      	cmp	r3, #96	@ 0x60
 8003572:	d877      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003574:	2b50      	cmp	r3, #80	@ 0x50
 8003576:	d03c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x17e>
 8003578:	2b50      	cmp	r3, #80	@ 0x50
 800357a:	d873      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d058      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x1be>
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d86f      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003584:	2b30      	cmp	r3, #48	@ 0x30
 8003586:	d064      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003588:	2b30      	cmp	r3, #48	@ 0x30
 800358a:	d86b      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 800358c:	2b20      	cmp	r3, #32
 800358e:	d060      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003590:	2b20      	cmp	r3, #32
 8003592:	d867      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05c      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 8003598:	2b10      	cmp	r3, #16
 800359a:	d05a      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x1de>
 800359c:	e062      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	f000 f9d9 	bl	8003964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	609a      	str	r2, [r3, #8]
      break;
 80035ca:	e04f      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	f000 f9c2 	bl	8003964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ee:	609a      	str	r2, [r3, #8]
      break;
 80035f0:	e03c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 f934 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2150      	movs	r1, #80	@ 0x50
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f98d 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003610:	e02c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f953 	bl	80038ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2160      	movs	r1, #96	@ 0x60
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f97d 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003630:	e01c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f914 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f96d 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003650:	e00c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 f964 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 8003662:	e003      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e000      	b.n	800366c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800366a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	00100070 	.word	0x00100070
 800368c:	00100060 	.word	0x00100060
 8003690:	00100050 	.word	0x00100050
 8003694:	00100040 	.word	0x00100040
 8003698:	00100030 	.word	0x00100030
 800369c:	00100020 	.word	0x00100020

080036a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a4c      	ldr	r2, [pc, #304]	@ (8003848 <TIM_Base_SetConfig+0x144>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d017      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d013      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a49      	ldr	r2, [pc, #292]	@ (800384c <TIM_Base_SetConfig+0x148>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00f      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a48      	ldr	r2, [pc, #288]	@ (8003850 <TIM_Base_SetConfig+0x14c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a47      	ldr	r2, [pc, #284]	@ (8003854 <TIM_Base_SetConfig+0x150>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a46      	ldr	r2, [pc, #280]	@ (8003858 <TIM_Base_SetConfig+0x154>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x48>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a45      	ldr	r2, [pc, #276]	@ (800385c <TIM_Base_SetConfig+0x158>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a39      	ldr	r2, [pc, #228]	@ (8003848 <TIM_Base_SetConfig+0x144>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d023      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d01f      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a36      	ldr	r2, [pc, #216]	@ (800384c <TIM_Base_SetConfig+0x148>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01b      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a35      	ldr	r2, [pc, #212]	@ (8003850 <TIM_Base_SetConfig+0x14c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d017      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a34      	ldr	r2, [pc, #208]	@ (8003854 <TIM_Base_SetConfig+0x150>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a33      	ldr	r2, [pc, #204]	@ (8003858 <TIM_Base_SetConfig+0x154>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a33      	ldr	r2, [pc, #204]	@ (8003860 <TIM_Base_SetConfig+0x15c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a32      	ldr	r2, [pc, #200]	@ (8003864 <TIM_Base_SetConfig+0x160>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <TIM_Base_SetConfig+0x164>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xaa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2c      	ldr	r2, [pc, #176]	@ (800385c <TIM_Base_SetConfig+0x158>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <TIM_Base_SetConfig+0x144>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_Base_SetConfig+0x110>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <TIM_Base_SetConfig+0x154>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00f      	beq.n	8003814 <TIM_Base_SetConfig+0x110>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <TIM_Base_SetConfig+0x15c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x110>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a19      	ldr	r2, [pc, #100]	@ (8003864 <TIM_Base_SetConfig+0x160>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x110>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <TIM_Base_SetConfig+0x164>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x110>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a13      	ldr	r2, [pc, #76]	@ (800385c <TIM_Base_SetConfig+0x158>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]
  }
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40015000 	.word	0x40015000
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0210 	bic.w	r2, r3, #16
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003906:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 0307 	orr.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800397e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e074      	b.n	8003aa6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a34      	ldr	r2, [pc, #208]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3c:	d01d      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a11      	ldr	r2, [pc, #68]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10c      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40013400 	.word	0x40013400
 8003abc:	40015000 	.word	0x40015000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40014000 	.word	0x40014000

08003ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e042      	b.n	8003bf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fc ff91 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	@ 0x24
 8003b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fbb2 	bl	8004310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8b3 	bl	8003d18 <UART_SetConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e01b      	b.n	8003bf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fc31 	bl	8004454 <UART_CheckIdleState>
 8003bf2:	4603      	mov	r3, r0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	@ 0x28
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d17b      	bne.n	8003d0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_UART_Transmit+0x26>
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e074      	b.n	8003d10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2221      	movs	r2, #33	@ 0x21
 8003c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c36:	f7fd f921 	bl	8000e7c <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d108      	bne.n	8003c68 <HAL_UART_Transmit+0x6c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c70:	e030      	b.n	8003cd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	@ 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fc93 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e03d      	b.n	8003d10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e007      	b.n	8003cc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1c8      	bne.n	8003c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2140      	movs	r1, #64	@ 0x40
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fc5c 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e006      	b.n	8003d10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b08c      	sub	sp, #48	@ 0x30
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4baa      	ldr	r3, [pc, #680]	@ (8003ff0 <UART_SetConfig+0x2d8>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a9f      	ldr	r2, [pc, #636]	@ (8003ff4 <UART_SetConfig+0x2dc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d80:	4313      	orrs	r3, r2
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	f023 010f 	bic.w	r1, r3, #15
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a90      	ldr	r2, [pc, #576]	@ (8003ff8 <UART_SetConfig+0x2e0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d125      	bne.n	8003e08 <UART_SetConfig+0xf0>
 8003dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d81a      	bhi.n	8003e00 <UART_SetConfig+0xe8>
 8003dca:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <UART_SetConfig+0xb8>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003df1 	.word	0x08003df1
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003df9 	.word	0x08003df9
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e116      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003de8:	2302      	movs	r3, #2
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e112      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003df0:	2304      	movs	r3, #4
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e10e      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e10a      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e106      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004000 <UART_SetConfig+0x2e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d138      	bne.n	8003e84 <UART_SetConfig+0x16c>
 8003e12:	4b7a      	ldr	r3, [pc, #488]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d82d      	bhi.n	8003e7c <UART_SetConfig+0x164>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <UART_SetConfig+0x110>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e7d 	.word	0x08003e7d
 8003e30:	08003e7d 	.word	0x08003e7d
 8003e34:	08003e7d 	.word	0x08003e7d
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003e7d 	.word	0x08003e7d
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e0d8      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e0d4      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e0d0      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e0cc      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e0c8      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5e      	ldr	r2, [pc, #376]	@ (8004004 <UART_SetConfig+0x2ec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d125      	bne.n	8003eda <UART_SetConfig+0x1c2>
 8003e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e98:	2b30      	cmp	r3, #48	@ 0x30
 8003e9a:	d016      	beq.n	8003eca <UART_SetConfig+0x1b2>
 8003e9c:	2b30      	cmp	r3, #48	@ 0x30
 8003e9e:	d818      	bhi.n	8003ed2 <UART_SetConfig+0x1ba>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d00a      	beq.n	8003eba <UART_SetConfig+0x1a2>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d814      	bhi.n	8003ed2 <UART_SetConfig+0x1ba>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <UART_SetConfig+0x19a>
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d008      	beq.n	8003ec2 <UART_SetConfig+0x1aa>
 8003eb0:	e00f      	b.n	8003ed2 <UART_SetConfig+0x1ba>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb8:	e0ad      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec0:	e0a9      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003ec2:	2304      	movs	r3, #4
 8003ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec8:	e0a5      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed0:	e0a1      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed8:	e09d      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4a      	ldr	r2, [pc, #296]	@ (8004008 <UART_SetConfig+0x2f0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d125      	bne.n	8003f30 <UART_SetConfig+0x218>
 8003ee4:	4b45      	ldr	r3, [pc, #276]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef0:	d016      	beq.n	8003f20 <UART_SetConfig+0x208>
 8003ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef4:	d818      	bhi.n	8003f28 <UART_SetConfig+0x210>
 8003ef6:	2b80      	cmp	r3, #128	@ 0x80
 8003ef8:	d00a      	beq.n	8003f10 <UART_SetConfig+0x1f8>
 8003efa:	2b80      	cmp	r3, #128	@ 0x80
 8003efc:	d814      	bhi.n	8003f28 <UART_SetConfig+0x210>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <UART_SetConfig+0x1f0>
 8003f02:	2b40      	cmp	r3, #64	@ 0x40
 8003f04:	d008      	beq.n	8003f18 <UART_SetConfig+0x200>
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x210>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0e:	e082      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f16:	e07e      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1e:	e07a      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f26:	e076      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2e:	e072      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a35      	ldr	r2, [pc, #212]	@ (800400c <UART_SetConfig+0x2f4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d12a      	bne.n	8003f90 <UART_SetConfig+0x278>
 8003f3a:	4b30      	ldr	r3, [pc, #192]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f48:	d01a      	beq.n	8003f80 <UART_SetConfig+0x268>
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f4e:	d81b      	bhi.n	8003f88 <UART_SetConfig+0x270>
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f54:	d00c      	beq.n	8003f70 <UART_SetConfig+0x258>
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5a:	d815      	bhi.n	8003f88 <UART_SetConfig+0x270>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <UART_SetConfig+0x250>
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f64:	d008      	beq.n	8003f78 <UART_SetConfig+0x260>
 8003f66:	e00f      	b.n	8003f88 <UART_SetConfig+0x270>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	e052      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f76:	e04e      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7e:	e04a      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f80:	2308      	movs	r3, #8
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f86:	e046      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e042      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <UART_SetConfig+0x2dc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d13a      	bne.n	8004010 <UART_SetConfig+0x2f8>
 8003f9a:	4b18      	ldr	r3, [pc, #96]	@ (8003ffc <UART_SetConfig+0x2e4>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fa8:	d01a      	beq.n	8003fe0 <UART_SetConfig+0x2c8>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fae:	d81b      	bhi.n	8003fe8 <UART_SetConfig+0x2d0>
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb4:	d00c      	beq.n	8003fd0 <UART_SetConfig+0x2b8>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fba:	d815      	bhi.n	8003fe8 <UART_SetConfig+0x2d0>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <UART_SetConfig+0x2b0>
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc4:	d008      	beq.n	8003fd8 <UART_SetConfig+0x2c0>
 8003fc6:	e00f      	b.n	8003fe8 <UART_SetConfig+0x2d0>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e022      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd6:	e01e      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fde:	e01a      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe6:	e016      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fee:	e012      	b.n	8004016 <UART_SetConfig+0x2fe>
 8003ff0:	cfff69f3 	.word	0xcfff69f3
 8003ff4:	40008000 	.word	0x40008000
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40004400 	.word	0x40004400
 8004004:	40004800 	.word	0x40004800
 8004008:	40004c00 	.word	0x40004c00
 800400c:	40005000 	.word	0x40005000
 8004010:	2310      	movs	r3, #16
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4aae      	ldr	r2, [pc, #696]	@ (80042d4 <UART_SetConfig+0x5bc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f040 8097 	bne.w	8004150 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004022:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004026:	2b08      	cmp	r3, #8
 8004028:	d823      	bhi.n	8004072 <UART_SetConfig+0x35a>
 800402a:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <UART_SetConfig+0x318>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004055 	.word	0x08004055
 8004034:	08004073 	.word	0x08004073
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004073 	.word	0x08004073
 8004040:	08004063 	.word	0x08004063
 8004044:	08004073 	.word	0x08004073
 8004048:	08004073 	.word	0x08004073
 800404c:	08004073 	.word	0x08004073
 8004050:	0800406b 	.word	0x0800406b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7fd fffc 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8004058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800405a:	e010      	b.n	800407e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405c:	4b9e      	ldr	r3, [pc, #632]	@ (80042d8 <UART_SetConfig+0x5c0>)
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004060:	e00d      	b.n	800407e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004062:	f7fd ff87 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004068:	e009      	b.n	800407e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004070:	e005      	b.n	800407e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800407c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8130 	beq.w	80042e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	4a94      	ldr	r2, [pc, #592]	@ (80042dc <UART_SetConfig+0x5c4>)
 800408c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004090:	461a      	mov	r2, r3
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	fbb3 f3f2 	udiv	r3, r3, r2
 8004098:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d305      	bcc.n	80040b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040bc:	e113      	b.n	80042e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	60fa      	str	r2, [r7, #12]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	4a84      	ldr	r2, [pc, #528]	@ (80042dc <UART_SetConfig+0x5c4>)
 80040cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2200      	movs	r2, #0
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040e0:	f7fc f8f6 	bl	80002d0 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	020b      	lsls	r3, r1, #8
 80040f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040fa:	0202      	lsls	r2, r0, #8
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	6849      	ldr	r1, [r1, #4]
 8004100:	0849      	lsrs	r1, r1, #1
 8004102:	2000      	movs	r0, #0
 8004104:	460c      	mov	r4, r1
 8004106:	4605      	mov	r5, r0
 8004108:	eb12 0804 	adds.w	r8, r2, r4
 800410c:	eb43 0905 	adc.w	r9, r3, r5
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	469a      	mov	sl, r3
 8004118:	4693      	mov	fp, r2
 800411a:	4652      	mov	r2, sl
 800411c:	465b      	mov	r3, fp
 800411e:	4640      	mov	r0, r8
 8004120:	4649      	mov	r1, r9
 8004122:	f7fc f8d5 	bl	80002d0 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4613      	mov	r3, r2
 800412c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004134:	d308      	bcc.n	8004148 <UART_SetConfig+0x430>
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800413c:	d204      	bcs.n	8004148 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	e0ce      	b.n	80042e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800414e:	e0ca      	b.n	80042e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004158:	d166      	bne.n	8004228 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800415a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800415e:	2b08      	cmp	r3, #8
 8004160:	d827      	bhi.n	80041b2 <UART_SetConfig+0x49a>
 8004162:	a201      	add	r2, pc, #4	@ (adr r2, 8004168 <UART_SetConfig+0x450>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800418d 	.word	0x0800418d
 800416c:	08004195 	.word	0x08004195
 8004170:	0800419d 	.word	0x0800419d
 8004174:	080041b3 	.word	0x080041b3
 8004178:	080041a3 	.word	0x080041a3
 800417c:	080041b3 	.word	0x080041b3
 8004180:	080041b3 	.word	0x080041b3
 8004184:	080041b3 	.word	0x080041b3
 8004188:	080041ab 	.word	0x080041ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7fd ff60 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8004190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004192:	e014      	b.n	80041be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004194:	f7fd ff72 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8004198:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800419a:	e010      	b.n	80041be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800419c:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <UART_SetConfig+0x5c0>)
 800419e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041a0:	e00d      	b.n	80041be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a2:	f7fd fee7 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80041a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041a8:	e009      	b.n	80041be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041b0:	e005      	b.n	80041be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8090 	beq.w	80042e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	4a44      	ldr	r2, [pc, #272]	@ (80042dc <UART_SetConfig+0x5c4>)
 80041cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d8:	005a      	lsls	r2, r3, #1
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	441a      	add	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b0f      	cmp	r3, #15
 80041f0:	d916      	bls.n	8004220 <UART_SetConfig+0x508>
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f8:	d212      	bcs.n	8004220 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f023 030f 	bic.w	r3, r3, #15
 8004202:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	b29b      	uxth	r3, r3
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	b29a      	uxth	r2, r3
 8004210:	8bfb      	ldrh	r3, [r7, #30]
 8004212:	4313      	orrs	r3, r2
 8004214:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	8bfa      	ldrh	r2, [r7, #30]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	e062      	b.n	80042e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004226:	e05e      	b.n	80042e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004228:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800422c:	2b08      	cmp	r3, #8
 800422e:	d828      	bhi.n	8004282 <UART_SetConfig+0x56a>
 8004230:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <UART_SetConfig+0x520>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004265 	.word	0x08004265
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004283 	.word	0x08004283
 8004248:	08004273 	.word	0x08004273
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fd fef8 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004262:	e014      	b.n	800428e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7fd ff0a 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8004268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800426a:	e010      	b.n	800428e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800426c:	4b1a      	ldr	r3, [pc, #104]	@ (80042d8 <UART_SetConfig+0x5c0>)
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004270:	e00d      	b.n	800428e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004272:	f7fd fe7f 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8004276:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004278:	e009      	b.n	800428e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004280:	e005      	b.n	800428e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800428c:	bf00      	nop
    }

    if (pclk != 0U)
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d028      	beq.n	80042e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <UART_SetConfig+0x5c4>)
 800429a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800429e:	461a      	mov	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	441a      	add	r2, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	d910      	bls.n	80042e0 <UART_SetConfig+0x5c8>
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d20c      	bcs.n	80042e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
 80042d0:	e009      	b.n	80042e6 <UART_SetConfig+0x5ce>
 80042d2:	bf00      	nop
 80042d4:	40008000 	.word	0x40008000
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	080052d4 	.word	0x080052d4
      }
      else
      {
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004302:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004306:	4618      	mov	r0, r3
 8004308:	3730      	adds	r7, #48	@ 0x30
 800430a:	46bd      	mov	sp, r7
 800430c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01a      	beq.n	8004426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800440e:	d10a      	bne.n	8004426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b098      	sub	sp, #96	@ 0x60
 8004458:	af02      	add	r7, sp, #8
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004464:	f7fc fd0a 	bl	8000e7c <HAL_GetTick>
 8004468:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d12f      	bne.n	80044d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f88e 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d022      	beq.n	80044d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e063      	b.n	80045a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d149      	bne.n	800457a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ee:	2200      	movs	r2, #0
 80044f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f857 	bl	80045a8 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03c      	beq.n	800457a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	623b      	str	r3, [r7, #32]
   return(result);
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004520:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	60fb      	str	r3, [r7, #12]
   return(result);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004552:	61fa      	str	r2, [r7, #28]
 8004554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69b9      	ldr	r1, [r7, #24]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	617b      	str	r3, [r7, #20]
   return(result);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e012      	b.n	80045a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3758      	adds	r7, #88	@ 0x58
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b8:	e04f      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d04b      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fc fc5b 	bl	8000e7c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e04e      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d037      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b80      	cmp	r3, #128	@ 0x80
 80045ee:	d034      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d031      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b08      	cmp	r3, #8
 8004602:	d110      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2208      	movs	r2, #8
 800460a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f838 	bl	8004682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2208      	movs	r2, #8
 8004616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e029      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004634:	d111      	bne.n	800465a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800463e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f81e 	bl	8004682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00f      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d0a0      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004682:	b480      	push	{r7}
 8004684:	b095      	sub	sp, #84	@ 0x54
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e6      	bne.n	800468a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e3      	bne.n	80046bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d118      	bne.n	800472e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	60bb      	str	r3, [r7, #8]
   return(result);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	647b      	str	r3, [r7, #68]	@ 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6979      	ldr	r1, [r7, #20]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	613b      	str	r3, [r7, #16]
   return(result);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e6      	bne.n	80046fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004742:	bf00      	nop
 8004744:	3754      	adds	r7, #84	@ 0x54
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_UARTEx_DisableFifoMode+0x16>
 8004760:	2302      	movs	r3, #2
 8004762:	e027      	b.n	80047b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	@ 0x24
 8004770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004792:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e02d      	b.n	8004834 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	@ 0x24
 80047e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f84f 	bl	80048b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	e02d      	b.n	80048b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	@ 0x24
 8004860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f811 	bl	80048b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048d8:	e031      	b.n	800493e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048da:	2308      	movs	r3, #8
 80048dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048de:	2308      	movs	r3, #8
 80048e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	0e5b      	lsrs	r3, r3, #25
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	0f5b      	lsrs	r3, r3, #29
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	7b3a      	ldrb	r2, [r7, #12]
 8004906:	4911      	ldr	r1, [pc, #68]	@ (800494c <UARTEx_SetNbDataToProcess+0x94>)
 8004908:	5c8a      	ldrb	r2, [r1, r2]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800490e:	7b3a      	ldrb	r2, [r7, #12]
 8004910:	490f      	ldr	r1, [pc, #60]	@ (8004950 <UARTEx_SetNbDataToProcess+0x98>)
 8004912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004914:	fb93 f3f2 	sdiv	r3, r3, r2
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	7b7a      	ldrb	r2, [r7, #13]
 8004924:	4909      	ldr	r1, [pc, #36]	@ (800494c <UARTEx_SetNbDataToProcess+0x94>)
 8004926:	5c8a      	ldrb	r2, [r1, r2]
 8004928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800492c:	7b7a      	ldrb	r2, [r7, #13]
 800492e:	4908      	ldr	r1, [pc, #32]	@ (8004950 <UARTEx_SetNbDataToProcess+0x98>)
 8004930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004932:	fb93 f3f2 	sdiv	r3, r3, r2
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	080052ec 	.word	0x080052ec
 8004950:	080052f4 	.word	0x080052f4

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b500      	push	{lr}
 8004958:	b09c      	sub	sp, #112	@ 0x70
 800495a:	ab1d      	add	r3, sp, #116	@ 0x74
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004964:	4809      	ldr	r0, [pc, #36]	@ (800498c <siprintf+0x38>)
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	4909      	ldr	r1, [pc, #36]	@ (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	a902      	add	r1, sp, #8
 8004978:	f000 f994 	bl	8004ca4 <_svfiprintf_r>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	@ 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	20000014 	.word	0x20000014
 8004990:	ffff0208 	.word	0xffff0208

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <__errno>:
 80049a4:	4b01      	ldr	r3, [pc, #4]	@ (80049ac <__errno+0x8>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000014 	.word	0x20000014

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	4d0d      	ldr	r5, [pc, #52]	@ (80049e8 <__libc_init_array+0x38>)
 80049b4:	4c0d      	ldr	r4, [pc, #52]	@ (80049ec <__libc_init_array+0x3c>)
 80049b6:	1b64      	subs	r4, r4, r5
 80049b8:	10a4      	asrs	r4, r4, #2
 80049ba:	2600      	movs	r6, #0
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	4d0b      	ldr	r5, [pc, #44]	@ (80049f0 <__libc_init_array+0x40>)
 80049c2:	4c0c      	ldr	r4, [pc, #48]	@ (80049f4 <__libc_init_array+0x44>)
 80049c4:	f000 fc66 	bl	8005294 <_init>
 80049c8:	1b64      	subs	r4, r4, r5
 80049ca:	10a4      	asrs	r4, r4, #2
 80049cc:	2600      	movs	r6, #0
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08005338 	.word	0x08005338
 80049ec:	08005338 	.word	0x08005338
 80049f0:	08005338 	.word	0x08005338
 80049f4:	0800533c 	.word	0x0800533c

080049f8 <__retarget_lock_acquire_recursive>:
 80049f8:	4770      	bx	lr

080049fa <__retarget_lock_release_recursive>:
 80049fa:	4770      	bx	lr

080049fc <_free_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4605      	mov	r5, r0
 8004a00:	2900      	cmp	r1, #0
 8004a02:	d041      	beq.n	8004a88 <_free_r+0x8c>
 8004a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a08:	1f0c      	subs	r4, r1, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bfb8      	it	lt
 8004a0e:	18e4      	addlt	r4, r4, r3
 8004a10:	f000 f8e0 	bl	8004bd4 <__malloc_lock>
 8004a14:	4a1d      	ldr	r2, [pc, #116]	@ (8004a8c <_free_r+0x90>)
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	b933      	cbnz	r3, 8004a28 <_free_r+0x2c>
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	6014      	str	r4, [r2, #0]
 8004a1e:	4628      	mov	r0, r5
 8004a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a24:	f000 b8dc 	b.w	8004be0 <__malloc_unlock>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d908      	bls.n	8004a3e <_free_r+0x42>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	1821      	adds	r1, r4, r0
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf01      	itttt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	1809      	addeq	r1, r1, r0
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	e7ed      	b.n	8004a1a <_free_r+0x1e>
 8004a3e:	461a      	mov	r2, r3
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b10b      	cbz	r3, 8004a48 <_free_r+0x4c>
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d9fa      	bls.n	8004a3e <_free_r+0x42>
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	1850      	adds	r0, r2, r1
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d10b      	bne.n	8004a68 <_free_r+0x6c>
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	4401      	add	r1, r0
 8004a54:	1850      	adds	r0, r2, r1
 8004a56:	4283      	cmp	r3, r0
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	d1e0      	bne.n	8004a1e <_free_r+0x22>
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6053      	str	r3, [r2, #4]
 8004a62:	4408      	add	r0, r1
 8004a64:	6010      	str	r0, [r2, #0]
 8004a66:	e7da      	b.n	8004a1e <_free_r+0x22>
 8004a68:	d902      	bls.n	8004a70 <_free_r+0x74>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	e7d6      	b.n	8004a1e <_free_r+0x22>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	1821      	adds	r1, r4, r0
 8004a74:	428b      	cmp	r3, r1
 8004a76:	bf04      	itt	eq
 8004a78:	6819      	ldreq	r1, [r3, #0]
 8004a7a:	685b      	ldreq	r3, [r3, #4]
 8004a7c:	6063      	str	r3, [r4, #4]
 8004a7e:	bf04      	itt	eq
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	6054      	str	r4, [r2, #4]
 8004a86:	e7ca      	b.n	8004a1e <_free_r+0x22>
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000350 	.word	0x20000350

08004a90 <sbrk_aligned>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4e0f      	ldr	r6, [pc, #60]	@ (8004ad0 <sbrk_aligned+0x40>)
 8004a94:	460c      	mov	r4, r1
 8004a96:	6831      	ldr	r1, [r6, #0]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	b911      	cbnz	r1, 8004aa2 <sbrk_aligned+0x12>
 8004a9c:	f000 fba6 	bl	80051ec <_sbrk_r>
 8004aa0:	6030      	str	r0, [r6, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 fba1 	bl	80051ec <_sbrk_r>
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d103      	bne.n	8004ab6 <sbrk_aligned+0x26>
 8004aae:	f04f 34ff 	mov.w	r4, #4294967295
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
 8004ab6:	1cc4      	adds	r4, r0, #3
 8004ab8:	f024 0403 	bic.w	r4, r4, #3
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d0f8      	beq.n	8004ab2 <sbrk_aligned+0x22>
 8004ac0:	1a21      	subs	r1, r4, r0
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 fb92 	bl	80051ec <_sbrk_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d1f2      	bne.n	8004ab2 <sbrk_aligned+0x22>
 8004acc:	e7ef      	b.n	8004aae <sbrk_aligned+0x1e>
 8004ace:	bf00      	nop
 8004ad0:	2000034c 	.word	0x2000034c

08004ad4 <_malloc_r>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	1ccd      	adds	r5, r1, #3
 8004ada:	f025 0503 	bic.w	r5, r5, #3
 8004ade:	3508      	adds	r5, #8
 8004ae0:	2d0c      	cmp	r5, #12
 8004ae2:	bf38      	it	cc
 8004ae4:	250c      	movcc	r5, #12
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	4606      	mov	r6, r0
 8004aea:	db01      	blt.n	8004af0 <_malloc_r+0x1c>
 8004aec:	42a9      	cmp	r1, r5
 8004aee:	d904      	bls.n	8004afa <_malloc_r+0x26>
 8004af0:	230c      	movs	r3, #12
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	2000      	movs	r0, #0
 8004af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bd0 <_malloc_r+0xfc>
 8004afe:	f000 f869 	bl	8004bd4 <__malloc_lock>
 8004b02:	f8d8 3000 	ldr.w	r3, [r8]
 8004b06:	461c      	mov	r4, r3
 8004b08:	bb44      	cbnz	r4, 8004b5c <_malloc_r+0x88>
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff ffbf 	bl	8004a90 <sbrk_aligned>
 8004b12:	1c43      	adds	r3, r0, #1
 8004b14:	4604      	mov	r4, r0
 8004b16:	d158      	bne.n	8004bca <_malloc_r+0xf6>
 8004b18:	f8d8 4000 	ldr.w	r4, [r8]
 8004b1c:	4627      	mov	r7, r4
 8004b1e:	2f00      	cmp	r7, #0
 8004b20:	d143      	bne.n	8004baa <_malloc_r+0xd6>
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	d04b      	beq.n	8004bbe <_malloc_r+0xea>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	4639      	mov	r1, r7
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	eb04 0903 	add.w	r9, r4, r3
 8004b30:	f000 fb5c 	bl	80051ec <_sbrk_r>
 8004b34:	4581      	cmp	r9, r0
 8004b36:	d142      	bne.n	8004bbe <_malloc_r+0xea>
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	1a6d      	subs	r5, r5, r1
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7ff ffa6 	bl	8004a90 <sbrk_aligned>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d03a      	beq.n	8004bbe <_malloc_r+0xea>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	442b      	add	r3, r5
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	bb62      	cbnz	r2, 8004bb0 <_malloc_r+0xdc>
 8004b56:	f8c8 7000 	str.w	r7, [r8]
 8004b5a:	e00f      	b.n	8004b7c <_malloc_r+0xa8>
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	1b52      	subs	r2, r2, r5
 8004b60:	d420      	bmi.n	8004ba4 <_malloc_r+0xd0>
 8004b62:	2a0b      	cmp	r2, #11
 8004b64:	d917      	bls.n	8004b96 <_malloc_r+0xc2>
 8004b66:	1961      	adds	r1, r4, r5
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	6025      	str	r5, [r4, #0]
 8004b6c:	bf18      	it	ne
 8004b6e:	6059      	strne	r1, [r3, #4]
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	bf08      	it	eq
 8004b74:	f8c8 1000 	streq.w	r1, [r8]
 8004b78:	5162      	str	r2, [r4, r5]
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 f82f 	bl	8004be0 <__malloc_unlock>
 8004b82:	f104 000b 	add.w	r0, r4, #11
 8004b86:	1d23      	adds	r3, r4, #4
 8004b88:	f020 0007 	bic.w	r0, r0, #7
 8004b8c:	1ac2      	subs	r2, r0, r3
 8004b8e:	bf1c      	itt	ne
 8004b90:	1a1b      	subne	r3, r3, r0
 8004b92:	50a3      	strne	r3, [r4, r2]
 8004b94:	e7af      	b.n	8004af6 <_malloc_r+0x22>
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	bf0c      	ite	eq
 8004b9c:	f8c8 2000 	streq.w	r2, [r8]
 8004ba0:	605a      	strne	r2, [r3, #4]
 8004ba2:	e7eb      	b.n	8004b7c <_malloc_r+0xa8>
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	6864      	ldr	r4, [r4, #4]
 8004ba8:	e7ae      	b.n	8004b08 <_malloc_r+0x34>
 8004baa:	463c      	mov	r4, r7
 8004bac:	687f      	ldr	r7, [r7, #4]
 8004bae:	e7b6      	b.n	8004b1e <_malloc_r+0x4a>
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d1fb      	bne.n	8004bb0 <_malloc_r+0xdc>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6053      	str	r3, [r2, #4]
 8004bbc:	e7de      	b.n	8004b7c <_malloc_r+0xa8>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f000 f80c 	bl	8004be0 <__malloc_unlock>
 8004bc8:	e794      	b.n	8004af4 <_malloc_r+0x20>
 8004bca:	6005      	str	r5, [r0, #0]
 8004bcc:	e7d6      	b.n	8004b7c <_malloc_r+0xa8>
 8004bce:	bf00      	nop
 8004bd0:	20000350 	.word	0x20000350

08004bd4 <__malloc_lock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__malloc_lock+0x8>)
 8004bd6:	f7ff bf0f 	b.w	80049f8 <__retarget_lock_acquire_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20000348 	.word	0x20000348

08004be0 <__malloc_unlock>:
 8004be0:	4801      	ldr	r0, [pc, #4]	@ (8004be8 <__malloc_unlock+0x8>)
 8004be2:	f7ff bf0a 	b.w	80049fa <__retarget_lock_release_recursive>
 8004be6:	bf00      	nop
 8004be8:	20000348 	.word	0x20000348

08004bec <__ssputs_r>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	688e      	ldr	r6, [r1, #8]
 8004bf2:	461f      	mov	r7, r3
 8004bf4:	42be      	cmp	r6, r7
 8004bf6:	680b      	ldr	r3, [r1, #0]
 8004bf8:	4682      	mov	sl, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4690      	mov	r8, r2
 8004bfe:	d82d      	bhi.n	8004c5c <__ssputs_r+0x70>
 8004c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c08:	d026      	beq.n	8004c58 <__ssputs_r+0x6c>
 8004c0a:	6965      	ldr	r5, [r4, #20]
 8004c0c:	6909      	ldr	r1, [r1, #16]
 8004c0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c12:	eba3 0901 	sub.w	r9, r3, r1
 8004c16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c1a:	1c7b      	adds	r3, r7, #1
 8004c1c:	444b      	add	r3, r9
 8004c1e:	106d      	asrs	r5, r5, #1
 8004c20:	429d      	cmp	r5, r3
 8004c22:	bf38      	it	cc
 8004c24:	461d      	movcc	r5, r3
 8004c26:	0553      	lsls	r3, r2, #21
 8004c28:	d527      	bpl.n	8004c7a <__ssputs_r+0x8e>
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	f7ff ff52 	bl	8004ad4 <_malloc_r>
 8004c30:	4606      	mov	r6, r0
 8004c32:	b360      	cbz	r0, 8004c8e <__ssputs_r+0xa2>
 8004c34:	6921      	ldr	r1, [r4, #16]
 8004c36:	464a      	mov	r2, r9
 8004c38:	f000 fae8 	bl	800520c <memcpy>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	6126      	str	r6, [r4, #16]
 8004c4a:	6165      	str	r5, [r4, #20]
 8004c4c:	444e      	add	r6, r9
 8004c4e:	eba5 0509 	sub.w	r5, r5, r9
 8004c52:	6026      	str	r6, [r4, #0]
 8004c54:	60a5      	str	r5, [r4, #8]
 8004c56:	463e      	mov	r6, r7
 8004c58:	42be      	cmp	r6, r7
 8004c5a:	d900      	bls.n	8004c5e <__ssputs_r+0x72>
 8004c5c:	463e      	mov	r6, r7
 8004c5e:	6820      	ldr	r0, [r4, #0]
 8004c60:	4632      	mov	r2, r6
 8004c62:	4641      	mov	r1, r8
 8004c64:	f000 faa8 	bl	80051b8 <memmove>
 8004c68:	68a3      	ldr	r3, [r4, #8]
 8004c6a:	1b9b      	subs	r3, r3, r6
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	4433      	add	r3, r6
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	f000 fad4 	bl	8005228 <_realloc_r>
 8004c80:	4606      	mov	r6, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d1e0      	bne.n	8004c48 <__ssputs_r+0x5c>
 8004c86:	6921      	ldr	r1, [r4, #16]
 8004c88:	4650      	mov	r0, sl
 8004c8a:	f7ff feb7 	bl	80049fc <_free_r>
 8004c8e:	230c      	movs	r3, #12
 8004c90:	f8ca 3000 	str.w	r3, [sl]
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	e7e9      	b.n	8004c76 <__ssputs_r+0x8a>
	...

08004ca4 <_svfiprintf_r>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	4698      	mov	r8, r3
 8004caa:	898b      	ldrh	r3, [r1, #12]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	b09d      	sub	sp, #116	@ 0x74
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	d510      	bpl.n	8004cda <_svfiprintf_r+0x36>
 8004cb8:	690b      	ldr	r3, [r1, #16]
 8004cba:	b973      	cbnz	r3, 8004cda <_svfiprintf_r+0x36>
 8004cbc:	2140      	movs	r1, #64	@ 0x40
 8004cbe:	f7ff ff09 	bl	8004ad4 <_malloc_r>
 8004cc2:	6028      	str	r0, [r5, #0]
 8004cc4:	6128      	str	r0, [r5, #16]
 8004cc6:	b930      	cbnz	r0, 8004cd6 <_svfiprintf_r+0x32>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	b01d      	add	sp, #116	@ 0x74
 8004cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd6:	2340      	movs	r3, #64	@ 0x40
 8004cd8:	616b      	str	r3, [r5, #20]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cde:	2320      	movs	r3, #32
 8004ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce8:	2330      	movs	r3, #48	@ 0x30
 8004cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e88 <_svfiprintf_r+0x1e4>
 8004cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cf2:	f04f 0901 	mov.w	r9, #1
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	469a      	mov	sl, r3
 8004cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cfe:	b10a      	cbz	r2, 8004d04 <_svfiprintf_r+0x60>
 8004d00:	2a25      	cmp	r2, #37	@ 0x25
 8004d02:	d1f9      	bne.n	8004cf8 <_svfiprintf_r+0x54>
 8004d04:	ebba 0b04 	subs.w	fp, sl, r4
 8004d08:	d00b      	beq.n	8004d22 <_svfiprintf_r+0x7e>
 8004d0a:	465b      	mov	r3, fp
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff ff6b 	bl	8004bec <__ssputs_r>
 8004d16:	3001      	adds	r0, #1
 8004d18:	f000 80a7 	beq.w	8004e6a <_svfiprintf_r+0x1c6>
 8004d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d1e:	445a      	add	r2, fp
 8004d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d22:	f89a 3000 	ldrb.w	r3, [sl]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 809f 	beq.w	8004e6a <_svfiprintf_r+0x1c6>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d36:	f10a 0a01 	add.w	sl, sl, #1
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	9307      	str	r3, [sp, #28]
 8004d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d44:	4654      	mov	r4, sl
 8004d46:	2205      	movs	r2, #5
 8004d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4c:	484e      	ldr	r0, [pc, #312]	@ (8004e88 <_svfiprintf_r+0x1e4>)
 8004d4e:	f7fb fa6f 	bl	8000230 <memchr>
 8004d52:	9a04      	ldr	r2, [sp, #16]
 8004d54:	b9d8      	cbnz	r0, 8004d8e <_svfiprintf_r+0xea>
 8004d56:	06d0      	lsls	r0, r2, #27
 8004d58:	bf44      	itt	mi
 8004d5a:	2320      	movmi	r3, #32
 8004d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d60:	0711      	lsls	r1, r2, #28
 8004d62:	bf44      	itt	mi
 8004d64:	232b      	movmi	r3, #43	@ 0x2b
 8004d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d70:	d015      	beq.n	8004d9e <_svfiprintf_r+0xfa>
 8004d72:	9a07      	ldr	r2, [sp, #28]
 8004d74:	4654      	mov	r4, sl
 8004d76:	2000      	movs	r0, #0
 8004d78:	f04f 0c0a 	mov.w	ip, #10
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d82:	3b30      	subs	r3, #48	@ 0x30
 8004d84:	2b09      	cmp	r3, #9
 8004d86:	d94b      	bls.n	8004e20 <_svfiprintf_r+0x17c>
 8004d88:	b1b0      	cbz	r0, 8004db8 <_svfiprintf_r+0x114>
 8004d8a:	9207      	str	r2, [sp, #28]
 8004d8c:	e014      	b.n	8004db8 <_svfiprintf_r+0x114>
 8004d8e:	eba0 0308 	sub.w	r3, r0, r8
 8004d92:	fa09 f303 	lsl.w	r3, r9, r3
 8004d96:	4313      	orrs	r3, r2
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	46a2      	mov	sl, r4
 8004d9c:	e7d2      	b.n	8004d44 <_svfiprintf_r+0xa0>
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	1d19      	adds	r1, r3, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	9103      	str	r1, [sp, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bfbb      	ittet	lt
 8004daa:	425b      	neglt	r3, r3
 8004dac:	f042 0202 	orrlt.w	r2, r2, #2
 8004db0:	9307      	strge	r3, [sp, #28]
 8004db2:	9307      	strlt	r3, [sp, #28]
 8004db4:	bfb8      	it	lt
 8004db6:	9204      	strlt	r2, [sp, #16]
 8004db8:	7823      	ldrb	r3, [r4, #0]
 8004dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dbc:	d10a      	bne.n	8004dd4 <_svfiprintf_r+0x130>
 8004dbe:	7863      	ldrb	r3, [r4, #1]
 8004dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc2:	d132      	bne.n	8004e2a <_svfiprintf_r+0x186>
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	9203      	str	r2, [sp, #12]
 8004dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dd0:	3402      	adds	r4, #2
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e98 <_svfiprintf_r+0x1f4>
 8004dd8:	7821      	ldrb	r1, [r4, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f7fb fa27 	bl	8000230 <memchr>
 8004de2:	b138      	cbz	r0, 8004df4 <_svfiprintf_r+0x150>
 8004de4:	9b04      	ldr	r3, [sp, #16]
 8004de6:	eba0 000a 	sub.w	r0, r0, sl
 8004dea:	2240      	movs	r2, #64	@ 0x40
 8004dec:	4082      	lsls	r2, r0
 8004dee:	4313      	orrs	r3, r2
 8004df0:	3401      	adds	r4, #1
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df8:	4824      	ldr	r0, [pc, #144]	@ (8004e8c <_svfiprintf_r+0x1e8>)
 8004dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dfe:	2206      	movs	r2, #6
 8004e00:	f7fb fa16 	bl	8000230 <memchr>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d036      	beq.n	8004e76 <_svfiprintf_r+0x1d2>
 8004e08:	4b21      	ldr	r3, [pc, #132]	@ (8004e90 <_svfiprintf_r+0x1ec>)
 8004e0a:	bb1b      	cbnz	r3, 8004e54 <_svfiprintf_r+0x1b0>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	3307      	adds	r3, #7
 8004e10:	f023 0307 	bic.w	r3, r3, #7
 8004e14:	3308      	adds	r3, #8
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1a:	4433      	add	r3, r6
 8004e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e1e:	e76a      	b.n	8004cf6 <_svfiprintf_r+0x52>
 8004e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e24:	460c      	mov	r4, r1
 8004e26:	2001      	movs	r0, #1
 8004e28:	e7a8      	b.n	8004d7c <_svfiprintf_r+0xd8>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	3401      	adds	r4, #1
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	4619      	mov	r1, r3
 8004e32:	f04f 0c0a 	mov.w	ip, #10
 8004e36:	4620      	mov	r0, r4
 8004e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3c:	3a30      	subs	r2, #48	@ 0x30
 8004e3e:	2a09      	cmp	r2, #9
 8004e40:	d903      	bls.n	8004e4a <_svfiprintf_r+0x1a6>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0c6      	beq.n	8004dd4 <_svfiprintf_r+0x130>
 8004e46:	9105      	str	r1, [sp, #20]
 8004e48:	e7c4      	b.n	8004dd4 <_svfiprintf_r+0x130>
 8004e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4e:	4604      	mov	r4, r0
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7f0      	b.n	8004e36 <_svfiprintf_r+0x192>
 8004e54:	ab03      	add	r3, sp, #12
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <_svfiprintf_r+0x1f0>)
 8004e5c:	a904      	add	r1, sp, #16
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f3af 8000 	nop.w
 8004e64:	1c42      	adds	r2, r0, #1
 8004e66:	4606      	mov	r6, r0
 8004e68:	d1d6      	bne.n	8004e18 <_svfiprintf_r+0x174>
 8004e6a:	89ab      	ldrh	r3, [r5, #12]
 8004e6c:	065b      	lsls	r3, r3, #25
 8004e6e:	f53f af2d 	bmi.w	8004ccc <_svfiprintf_r+0x28>
 8004e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e74:	e72c      	b.n	8004cd0 <_svfiprintf_r+0x2c>
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <_svfiprintf_r+0x1f0>)
 8004e7e:	a904      	add	r1, sp, #16
 8004e80:	4638      	mov	r0, r7
 8004e82:	f000 f879 	bl	8004f78 <_printf_i>
 8004e86:	e7ed      	b.n	8004e64 <_svfiprintf_r+0x1c0>
 8004e88:	080052fc 	.word	0x080052fc
 8004e8c:	08005306 	.word	0x08005306
 8004e90:	00000000 	.word	0x00000000
 8004e94:	08004bed 	.word	0x08004bed
 8004e98:	08005302 	.word	0x08005302

08004e9c <_printf_common>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4616      	mov	r6, r2
 8004ea2:	4698      	mov	r8, r3
 8004ea4:	688a      	ldr	r2, [r1, #8]
 8004ea6:	690b      	ldr	r3, [r1, #16]
 8004ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfb8      	it	lt
 8004eb0:	4613      	movlt	r3, r2
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004eb8:	4607      	mov	r7, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b10a      	cbz	r2, 8004ec2 <_printf_common+0x26>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	0699      	lsls	r1, r3, #26
 8004ec6:	bf42      	ittt	mi
 8004ec8:	6833      	ldrmi	r3, [r6, #0]
 8004eca:	3302      	addmi	r3, #2
 8004ecc:	6033      	strmi	r3, [r6, #0]
 8004ece:	6825      	ldr	r5, [r4, #0]
 8004ed0:	f015 0506 	ands.w	r5, r5, #6
 8004ed4:	d106      	bne.n	8004ee4 <_printf_common+0x48>
 8004ed6:	f104 0a19 	add.w	sl, r4, #25
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	6832      	ldr	r2, [r6, #0]
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dc26      	bgt.n	8004f32 <_printf_common+0x96>
 8004ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	3b00      	subs	r3, #0
 8004eec:	bf18      	it	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	0692      	lsls	r2, r2, #26
 8004ef2:	d42b      	bmi.n	8004f4c <_printf_common+0xb0>
 8004ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ef8:	4641      	mov	r1, r8
 8004efa:	4638      	mov	r0, r7
 8004efc:	47c8      	blx	r9
 8004efe:	3001      	adds	r0, #1
 8004f00:	d01e      	beq.n	8004f40 <_printf_common+0xa4>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	f003 0306 	and.w	r3, r3, #6
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf02      	ittt	eq
 8004f0e:	68e5      	ldreq	r5, [r4, #12]
 8004f10:	6833      	ldreq	r3, [r6, #0]
 8004f12:	1aed      	subeq	r5, r5, r3
 8004f14:	68a3      	ldr	r3, [r4, #8]
 8004f16:	bf0c      	ite	eq
 8004f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f1c:	2500      	movne	r5, #0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bfc4      	itt	gt
 8004f22:	1a9b      	subgt	r3, r3, r2
 8004f24:	18ed      	addgt	r5, r5, r3
 8004f26:	2600      	movs	r6, #0
 8004f28:	341a      	adds	r4, #26
 8004f2a:	42b5      	cmp	r5, r6
 8004f2c:	d11a      	bne.n	8004f64 <_printf_common+0xc8>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e008      	b.n	8004f44 <_printf_common+0xa8>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4652      	mov	r2, sl
 8004f36:	4641      	mov	r1, r8
 8004f38:	4638      	mov	r0, r7
 8004f3a:	47c8      	blx	r9
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d103      	bne.n	8004f48 <_printf_common+0xac>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7c6      	b.n	8004eda <_printf_common+0x3e>
 8004f4c:	18e1      	adds	r1, r4, r3
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	2030      	movs	r0, #48	@ 0x30
 8004f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f56:	4422      	add	r2, r4
 8004f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f60:	3302      	adds	r3, #2
 8004f62:	e7c7      	b.n	8004ef4 <_printf_common+0x58>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4622      	mov	r2, r4
 8004f68:	4641      	mov	r1, r8
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c8      	blx	r9
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa4>
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7d9      	b.n	8004f2a <_printf_common+0x8e>
	...

08004f78 <_printf_i>:
 8004f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	7e0f      	ldrb	r7, [r1, #24]
 8004f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f80:	2f78      	cmp	r7, #120	@ 0x78
 8004f82:	4691      	mov	r9, r2
 8004f84:	4680      	mov	r8, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	469a      	mov	sl, r3
 8004f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f8e:	d807      	bhi.n	8004fa0 <_printf_i+0x28>
 8004f90:	2f62      	cmp	r7, #98	@ 0x62
 8004f92:	d80a      	bhi.n	8004faa <_printf_i+0x32>
 8004f94:	2f00      	cmp	r7, #0
 8004f96:	f000 80d2 	beq.w	800513e <_printf_i+0x1c6>
 8004f9a:	2f58      	cmp	r7, #88	@ 0x58
 8004f9c:	f000 80b9 	beq.w	8005112 <_printf_i+0x19a>
 8004fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fa8:	e03a      	b.n	8005020 <_printf_i+0xa8>
 8004faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fae:	2b15      	cmp	r3, #21
 8004fb0:	d8f6      	bhi.n	8004fa0 <_printf_i+0x28>
 8004fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8004fb8 <_printf_i+0x40>)
 8004fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb8:	08005011 	.word	0x08005011
 8004fbc:	08005025 	.word	0x08005025
 8004fc0:	08004fa1 	.word	0x08004fa1
 8004fc4:	08004fa1 	.word	0x08004fa1
 8004fc8:	08004fa1 	.word	0x08004fa1
 8004fcc:	08004fa1 	.word	0x08004fa1
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	08004fa1 	.word	0x08004fa1
 8004fd8:	08004fa1 	.word	0x08004fa1
 8004fdc:	08004fa1 	.word	0x08004fa1
 8004fe0:	08004fa1 	.word	0x08004fa1
 8004fe4:	08005125 	.word	0x08005125
 8004fe8:	0800504f 	.word	0x0800504f
 8004fec:	080050df 	.word	0x080050df
 8004ff0:	08004fa1 	.word	0x08004fa1
 8004ff4:	08004fa1 	.word	0x08004fa1
 8004ff8:	08005147 	.word	0x08005147
 8004ffc:	08004fa1 	.word	0x08004fa1
 8005000:	0800504f 	.word	0x0800504f
 8005004:	08004fa1 	.word	0x08004fa1
 8005008:	08004fa1 	.word	0x08004fa1
 800500c:	080050e7 	.word	0x080050e7
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6032      	str	r2, [r6, #0]
 8005018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800501c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005020:	2301      	movs	r3, #1
 8005022:	e09d      	b.n	8005160 <_printf_i+0x1e8>
 8005024:	6833      	ldr	r3, [r6, #0]
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	1d19      	adds	r1, r3, #4
 800502a:	6031      	str	r1, [r6, #0]
 800502c:	0606      	lsls	r6, r0, #24
 800502e:	d501      	bpl.n	8005034 <_printf_i+0xbc>
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	e003      	b.n	800503c <_printf_i+0xc4>
 8005034:	0645      	lsls	r5, r0, #25
 8005036:	d5fb      	bpl.n	8005030 <_printf_i+0xb8>
 8005038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800503c:	2d00      	cmp	r5, #0
 800503e:	da03      	bge.n	8005048 <_printf_i+0xd0>
 8005040:	232d      	movs	r3, #45	@ 0x2d
 8005042:	426d      	negs	r5, r5
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005048:	4859      	ldr	r0, [pc, #356]	@ (80051b0 <_printf_i+0x238>)
 800504a:	230a      	movs	r3, #10
 800504c:	e011      	b.n	8005072 <_printf_i+0xfa>
 800504e:	6821      	ldr	r1, [r4, #0]
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	0608      	lsls	r0, r1, #24
 8005054:	f853 5b04 	ldr.w	r5, [r3], #4
 8005058:	d402      	bmi.n	8005060 <_printf_i+0xe8>
 800505a:	0649      	lsls	r1, r1, #25
 800505c:	bf48      	it	mi
 800505e:	b2ad      	uxthmi	r5, r5
 8005060:	2f6f      	cmp	r7, #111	@ 0x6f
 8005062:	4853      	ldr	r0, [pc, #332]	@ (80051b0 <_printf_i+0x238>)
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	bf14      	ite	ne
 8005068:	230a      	movne	r3, #10
 800506a:	2308      	moveq	r3, #8
 800506c:	2100      	movs	r1, #0
 800506e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005072:	6866      	ldr	r6, [r4, #4]
 8005074:	60a6      	str	r6, [r4, #8]
 8005076:	2e00      	cmp	r6, #0
 8005078:	bfa2      	ittt	ge
 800507a:	6821      	ldrge	r1, [r4, #0]
 800507c:	f021 0104 	bicge.w	r1, r1, #4
 8005080:	6021      	strge	r1, [r4, #0]
 8005082:	b90d      	cbnz	r5, 8005088 <_printf_i+0x110>
 8005084:	2e00      	cmp	r6, #0
 8005086:	d04b      	beq.n	8005120 <_printf_i+0x1a8>
 8005088:	4616      	mov	r6, r2
 800508a:	fbb5 f1f3 	udiv	r1, r5, r3
 800508e:	fb03 5711 	mls	r7, r3, r1, r5
 8005092:	5dc7      	ldrb	r7, [r0, r7]
 8005094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005098:	462f      	mov	r7, r5
 800509a:	42bb      	cmp	r3, r7
 800509c:	460d      	mov	r5, r1
 800509e:	d9f4      	bls.n	800508a <_printf_i+0x112>
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d10b      	bne.n	80050bc <_printf_i+0x144>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	07df      	lsls	r7, r3, #31
 80050a8:	d508      	bpl.n	80050bc <_printf_i+0x144>
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	4299      	cmp	r1, r3
 80050b0:	bfde      	ittt	le
 80050b2:	2330      	movle	r3, #48	@ 0x30
 80050b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050bc:	1b92      	subs	r2, r2, r6
 80050be:	6122      	str	r2, [r4, #16]
 80050c0:	f8cd a000 	str.w	sl, [sp]
 80050c4:	464b      	mov	r3, r9
 80050c6:	aa03      	add	r2, sp, #12
 80050c8:	4621      	mov	r1, r4
 80050ca:	4640      	mov	r0, r8
 80050cc:	f7ff fee6 	bl	8004e9c <_printf_common>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d14a      	bne.n	800516a <_printf_i+0x1f2>
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	b004      	add	sp, #16
 80050da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	4833      	ldr	r0, [pc, #204]	@ (80051b4 <_printf_i+0x23c>)
 80050e8:	2778      	movs	r7, #120	@ 0x78
 80050ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	6831      	ldr	r1, [r6, #0]
 80050f2:	061f      	lsls	r7, r3, #24
 80050f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80050f8:	d402      	bmi.n	8005100 <_printf_i+0x188>
 80050fa:	065f      	lsls	r7, r3, #25
 80050fc:	bf48      	it	mi
 80050fe:	b2ad      	uxthmi	r5, r5
 8005100:	6031      	str	r1, [r6, #0]
 8005102:	07d9      	lsls	r1, r3, #31
 8005104:	bf44      	itt	mi
 8005106:	f043 0320 	orrmi.w	r3, r3, #32
 800510a:	6023      	strmi	r3, [r4, #0]
 800510c:	b11d      	cbz	r5, 8005116 <_printf_i+0x19e>
 800510e:	2310      	movs	r3, #16
 8005110:	e7ac      	b.n	800506c <_printf_i+0xf4>
 8005112:	4827      	ldr	r0, [pc, #156]	@ (80051b0 <_printf_i+0x238>)
 8005114:	e7e9      	b.n	80050ea <_printf_i+0x172>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f023 0320 	bic.w	r3, r3, #32
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	e7f6      	b.n	800510e <_printf_i+0x196>
 8005120:	4616      	mov	r6, r2
 8005122:	e7bd      	b.n	80050a0 <_printf_i+0x128>
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	6961      	ldr	r1, [r4, #20]
 800512a:	1d18      	adds	r0, r3, #4
 800512c:	6030      	str	r0, [r6, #0]
 800512e:	062e      	lsls	r6, r5, #24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	d501      	bpl.n	8005138 <_printf_i+0x1c0>
 8005134:	6019      	str	r1, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0x1c6>
 8005138:	0668      	lsls	r0, r5, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0x1bc>
 800513c:	8019      	strh	r1, [r3, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	6123      	str	r3, [r4, #16]
 8005142:	4616      	mov	r6, r2
 8005144:	e7bc      	b.n	80050c0 <_printf_i+0x148>
 8005146:	6833      	ldr	r3, [r6, #0]
 8005148:	1d1a      	adds	r2, r3, #4
 800514a:	6032      	str	r2, [r6, #0]
 800514c:	681e      	ldr	r6, [r3, #0]
 800514e:	6862      	ldr	r2, [r4, #4]
 8005150:	2100      	movs	r1, #0
 8005152:	4630      	mov	r0, r6
 8005154:	f7fb f86c 	bl	8000230 <memchr>
 8005158:	b108      	cbz	r0, 800515e <_printf_i+0x1e6>
 800515a:	1b80      	subs	r0, r0, r6
 800515c:	6060      	str	r0, [r4, #4]
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	2300      	movs	r3, #0
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005168:	e7aa      	b.n	80050c0 <_printf_i+0x148>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	4632      	mov	r2, r6
 800516e:	4649      	mov	r1, r9
 8005170:	4640      	mov	r0, r8
 8005172:	47d0      	blx	sl
 8005174:	3001      	adds	r0, #1
 8005176:	d0ad      	beq.n	80050d4 <_printf_i+0x15c>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	d413      	bmi.n	80051a6 <_printf_i+0x22e>
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	4298      	cmp	r0, r3
 8005184:	bfb8      	it	lt
 8005186:	4618      	movlt	r0, r3
 8005188:	e7a6      	b.n	80050d8 <_printf_i+0x160>
 800518a:	2301      	movs	r3, #1
 800518c:	4632      	mov	r2, r6
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	47d0      	blx	sl
 8005194:	3001      	adds	r0, #1
 8005196:	d09d      	beq.n	80050d4 <_printf_i+0x15c>
 8005198:	3501      	adds	r5, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	9903      	ldr	r1, [sp, #12]
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dcf2      	bgt.n	800518a <_printf_i+0x212>
 80051a4:	e7eb      	b.n	800517e <_printf_i+0x206>
 80051a6:	2500      	movs	r5, #0
 80051a8:	f104 0619 	add.w	r6, r4, #25
 80051ac:	e7f5      	b.n	800519a <_printf_i+0x222>
 80051ae:	bf00      	nop
 80051b0:	0800530d 	.word	0x0800530d
 80051b4:	0800531e 	.word	0x0800531e

080051b8 <memmove>:
 80051b8:	4288      	cmp	r0, r1
 80051ba:	b510      	push	{r4, lr}
 80051bc:	eb01 0402 	add.w	r4, r1, r2
 80051c0:	d902      	bls.n	80051c8 <memmove+0x10>
 80051c2:	4284      	cmp	r4, r0
 80051c4:	4623      	mov	r3, r4
 80051c6:	d807      	bhi.n	80051d8 <memmove+0x20>
 80051c8:	1e43      	subs	r3, r0, #1
 80051ca:	42a1      	cmp	r1, r4
 80051cc:	d008      	beq.n	80051e0 <memmove+0x28>
 80051ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051d6:	e7f8      	b.n	80051ca <memmove+0x12>
 80051d8:	4402      	add	r2, r0
 80051da:	4601      	mov	r1, r0
 80051dc:	428a      	cmp	r2, r1
 80051de:	d100      	bne.n	80051e2 <memmove+0x2a>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ea:	e7f7      	b.n	80051dc <memmove+0x24>

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	@ (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fd6a 	bl	8000cd0 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000344 	.word	0x20000344

0800520c <memcpy>:
 800520c:	440a      	add	r2, r1
 800520e:	4291      	cmp	r1, r2
 8005210:	f100 33ff 	add.w	r3, r0, #4294967295
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	4770      	bx	lr
 8005218:	b510      	push	{r4, lr}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005222:	4291      	cmp	r1, r2
 8005224:	d1f9      	bne.n	800521a <memcpy+0xe>
 8005226:	bd10      	pop	{r4, pc}

08005228 <_realloc_r>:
 8005228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522c:	4680      	mov	r8, r0
 800522e:	4615      	mov	r5, r2
 8005230:	460c      	mov	r4, r1
 8005232:	b921      	cbnz	r1, 800523e <_realloc_r+0x16>
 8005234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	4611      	mov	r1, r2
 800523a:	f7ff bc4b 	b.w	8004ad4 <_malloc_r>
 800523e:	b92a      	cbnz	r2, 800524c <_realloc_r+0x24>
 8005240:	f7ff fbdc 	bl	80049fc <_free_r>
 8005244:	2400      	movs	r4, #0
 8005246:	4620      	mov	r0, r4
 8005248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800524c:	f000 f81a 	bl	8005284 <_malloc_usable_size_r>
 8005250:	4285      	cmp	r5, r0
 8005252:	4606      	mov	r6, r0
 8005254:	d802      	bhi.n	800525c <_realloc_r+0x34>
 8005256:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800525a:	d8f4      	bhi.n	8005246 <_realloc_r+0x1e>
 800525c:	4629      	mov	r1, r5
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fc38 	bl	8004ad4 <_malloc_r>
 8005264:	4607      	mov	r7, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	d0ec      	beq.n	8005244 <_realloc_r+0x1c>
 800526a:	42b5      	cmp	r5, r6
 800526c:	462a      	mov	r2, r5
 800526e:	4621      	mov	r1, r4
 8005270:	bf28      	it	cs
 8005272:	4632      	movcs	r2, r6
 8005274:	f7ff ffca 	bl	800520c <memcpy>
 8005278:	4621      	mov	r1, r4
 800527a:	4640      	mov	r0, r8
 800527c:	f7ff fbbe 	bl	80049fc <_free_r>
 8005280:	463c      	mov	r4, r7
 8005282:	e7e0      	b.n	8005246 <_realloc_r+0x1e>

08005284 <_malloc_usable_size_r>:
 8005284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005288:	1f18      	subs	r0, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbc      	itt	lt
 800528e:	580b      	ldrlt	r3, [r1, r0]
 8005290:	18c0      	addlt	r0, r0, r3
 8005292:	4770      	bx	lr

08005294 <_init>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr

080052a0 <_fini>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr
