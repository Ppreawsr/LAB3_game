
TUATUNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f0  080060f0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080060f0  080060f0  000070f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f8  080060f8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006100  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000006c  0800616c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800616c  00008364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150c7  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295e  00000000  00000000  0001d163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eef  00000000  00000000  00020de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027947  00000000  00000000  00021ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016432  00000000  00000000  00049616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffa39  00000000  00000000  0005fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c54  00000000  00000000  0015f4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00165118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005fac 	.word	0x08005fac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005fac 	.word	0x08005fac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd81 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f848 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f968 	bl	80008a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f890 	bl	80006f4 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005d4:	f000 f8d8 	bl	8000788 <MX_SPI3_Init>
  MX_TIM2_Init();
 80005d8:	f000 f914 	bl	8000804 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
  SPI_Setup();
 80005dc:	f000 f9f0 	bl	80009c0 <SPI_Setup>
  HAL_TIM_Base_Start_IT(&htim2);
 80005e0:	4818      	ldr	r0, [pc, #96]	@ (8000644 <main+0x84>)
 80005e2:	f002 ff01 	bl	80033e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UARTPollingMethod();
 80005e6:	f000 fb07 	bl	8000bf8 <UARTPollingMethod>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fdde 	bl	80011ac <HAL_Delay>
	Tuatunn();
 80005f0:	f000 fa06 	bl	8000a00 <Tuatunn>
	ReadSwitch();
 80005f4:	f000 fa7c 	bl	8000af0 <ReadSwitch>
	if(Switch == n && n != 0)
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <main+0x88>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <main+0x8c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d117      	bne.n	8000634 <main+0x74>
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <main+0x8c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d013      	beq.n	8000634 <main+0x74>
	{
		point++;
 800060c:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <main+0x90>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <main+0x90>)
 8000616:	701a      	strb	r2, [r3, #0]
		n = 0;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <main+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		Mode = 1;
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <main+0x94>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2104      	movs	r1, #4
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <main+0x98>)
 800062a:	f001 f8f1 	bl	8001810 <HAL_GPIO_WritePin>
		Tuatunn(); // light update : off
 800062e:	f000 f9e7 	bl	8000a00 <Tuatunn>
 8000632:	e006      	b.n	8000642 <main+0x82>
	}
	else if(Mode == 0)
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <main+0x94>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1d4      	bne.n	80005e6 <main+0x26>
	{
		Switch = 0;
 800063c:	4b02      	ldr	r3, [pc, #8]	@ (8000648 <main+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	UARTPollingMethod();
 8000642:	e7d0      	b.n	80005e6 <main+0x26>
 8000644:	20000180 	.word	0x20000180
 8000648:	20000000 	.word	0x20000000
 800064c:	200001e3 	.word	0x200001e3
 8000650:	200001e6 	.word	0x200001e6
 8000654:	200001e2 	.word	0x200001e2
 8000658:	48000c00 	.word	0x48000c00

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2238      	movs	r2, #56	@ 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fc4d 	bl	8004f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800067e:	2000      	movs	r0, #0
 8000680:	f001 f902 	bl	8001888 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800069e:	2355      	movs	r3, #85	@ 0x55
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f99c 	bl	80019f0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006be:	f000 fac5 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fc9a 	bl	8002014 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e6:	f000 fab1 	bl	8000c4c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 80006fa:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LPUART1_UART_Init+0x90>)
 80006fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000704:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000736:	4812      	ldr	r0, [pc, #72]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f003 fb88 	bl	8003e4c <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f000 fa83 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	480d      	ldr	r0, [pc, #52]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	f004 f9b1 	bl	8004ab0 <HAL_UARTEx_SetTxFifoThreshold>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000754:	f000 fa7a 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	f004 f9e6 	bl	8004b2c <HAL_UARTEx_SetRxFifoThreshold>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000766:	f000 fa71 	bl	8000c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	f004 f967 	bl	8004a3e <HAL_UARTEx_DisableFifoMode>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000776:	f000 fa69 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000088 	.word	0x20000088
 8000784:	40008000 	.word	0x40008000

08000788 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <MX_SPI3_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	@ (8000800 <MX_SPI3_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_SPI3_Init+0x74>)
 8000794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_SPI3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007be:	2238      	movs	r2, #56	@ 0x38
 80007c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007d6:	2207      	movs	r2, #7
 80007d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_SPI3_Init+0x74>)
 80007e8:	f002 f87e 	bl	80028e8 <HAL_SPI_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 fa2b 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	40003c00 	.word	0x40003c00

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM2_Init+0x98>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_TIM2_Init+0x98>)
 800082c:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_TIM2_Init+0x98>)
 800083a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_TIM2_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084c:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_TIM2_Init+0x98>)
 800084e:	f002 fd73 	bl	8003338 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f9f8 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	@ (800089c <MX_TIM2_Init+0x98>)
 800086a:	f002 ff85 	bl	8003778 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000874:	f000 f9ea 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_TIM2_Init+0x98>)
 8000886:	f003 fa05 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 f9dc 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000180 	.word	0x20000180

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b3f      	ldr	r3, [pc, #252]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a3e      	ldr	r2, [pc, #248]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b3c      	ldr	r3, [pc, #240]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b39      	ldr	r3, [pc, #228]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a38      	ldr	r2, [pc, #224]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b36      	ldr	r3, [pc, #216]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b33      	ldr	r3, [pc, #204]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a32      	ldr	r2, [pc, #200]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a2c      	ldr	r2, [pc, #176]	@ (80009b4 <MX_GPIO_Init+0x114>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <MX_GPIO_Init+0x114>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_GPIO_Init+0x114>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a26      	ldr	r2, [pc, #152]	@ (80009b4 <MX_GPIO_Init+0x114>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_GPIO_Init+0x114>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f000 ff6b 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2104      	movs	r1, #4
 800093e:	481e      	ldr	r0, [pc, #120]	@ (80009b8 <MX_GPIO_Init+0x118>)
 8000940:	f000 ff66 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	@ (80009bc <MX_GPIO_Init+0x11c>)
 800095c:	f000 fdbe 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097a:	f000 fdaf 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <MX_GPIO_Init+0x118>)
 8000996:	f000 fda1 	bl	80014dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2028      	movs	r0, #40	@ 0x28
 80009a0:	f000 fd01 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a4:	2028      	movs	r0, #40	@ 0x28
 80009a6:	f000 fd18 	bl	80013da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000c00 	.word	0x48000c00
 80009bc:	48000800 	.word	0x48000800

080009c0 <SPI_Setup>:

/* USER CODE BEGIN 4 */
void SPI_Setup()//at BEGIN 2
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <SPI_Setup+0x30>)
 80009ca:	f000 ff21 	bl	8001810 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <SPI_Setup+0x34>)
 80009d0:	2240      	movs	r2, #64	@ 0x40
 80009d2:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//spi
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <SPI_Setup+0x34>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SPI_Setup+0x34>)
 80009dc:	2200      	movs	r2, #0
 80009de:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009e0:	2303      	movs	r3, #3
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SPI_Setup+0x38>)
 80009e4:	4903      	ldr	r1, [pc, #12]	@ (80009f4 <SPI_Setup+0x34>)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <SPI_Setup+0x3c>)
 80009e8:	f002 f82a 	bl	8002a40 <HAL_SPI_TransmitReceive_IT>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	200001d8 	.word	0x200001d8
 80009f8:	200001cc 	.word	0x200001cc
 80009fc:	2000011c 	.word	0x2000011c

08000a00 <Tuatunn>:

void Tuatunn()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a04:	2104      	movs	r1, #4
 8000a06:	4834      	ldr	r0, [pc, #208]	@ (8000ad8 <Tuatunn+0xd8>)
 8000a08:	f000 feea 	bl	80017e0 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d05f      	beq.n	8000ad2 <Tuatunn+0xd2>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a12:	2200      	movs	r2, #0
 8000a14:	2104      	movs	r1, #4
 8000a16:	4830      	ldr	r0, [pc, #192]	@ (8000ad8 <Tuatunn+0xd8>)
 8000a18:	f000 fefa 	bl	8001810 <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000adc <Tuatunn+0xdc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10c      	bne.n	8000a3e <Tuatunn+0x3e>
		{
			SPITx[0] = 0b01000001;//read
 8000a24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a26:	2241      	movs	r2, #65	@ 0x41
 8000a28:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a2c:	2212      	movs	r2, #18
 8000a2e:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	709a      	strb	r2, [r3, #2]
			Mode = 1;
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <Tuatunn+0xdc>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e043      	b.n	8000ac6 <Tuatunn+0xc6>
		}
		else if(Mode == 1)
 8000a3e:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <Tuatunn+0xdc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d13f      	bne.n	8000ac6 <Tuatunn+0xc6>
		{
			SPITx[0] = 0b01000000;//write
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a48:	2240      	movs	r2, #64	@ 0x40
 8000a4a:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000a4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a4e:	2215      	movs	r2, #21
 8000a50:	705a      	strb	r2, [r3, #1]
			//LED_From();
			if(n == 0 || (n >= 5 && n < 9))
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <Tuatunn+0x6a>
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d907      	bls.n	8000a72 <Tuatunn+0x72>
 8000a62:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d803      	bhi.n	8000a72 <Tuatunn+0x72>
			{
				SPITx[2] = 0xFF; //4 latter bit , 0 on 1 off
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a6c:	22ff      	movs	r2, #255	@ 0xff
 8000a6e:	709a      	strb	r2, [r3, #2]
 8000a70:	e026      	b.n	8000ac0 <Tuatunn+0xc0>
			}
			else if(n == 1)
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d103      	bne.n	8000a82 <Tuatunn+0x82>
			{
				SPITx[2] = 0b11111110;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a7c:	22fe      	movs	r2, #254	@ 0xfe
 8000a7e:	709a      	strb	r2, [r3, #2]
 8000a80:	e01e      	b.n	8000ac0 <Tuatunn+0xc0>
			}
			else if(n == 2)
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d103      	bne.n	8000a92 <Tuatunn+0x92>
			{
				SPITx[2] = 0b11111101;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a8c:	22fd      	movs	r2, #253	@ 0xfd
 8000a8e:	709a      	strb	r2, [r3, #2]
 8000a90:	e016      	b.n	8000ac0 <Tuatunn+0xc0>
			}
			else if(n == 3)
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <Tuatunn+0xe4>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d103      	bne.n	8000aa2 <Tuatunn+0xa2>
			{
				SPITx[2] = 0b11111011;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <Tuatunn+0xe0>)
 8000a9c:	22fb      	movs	r2, #251	@ 0xfb
 8000a9e:	709a      	strb	r2, [r3, #2]
 8000aa0:	e00e      	b.n	8000ac0 <Tuatunn+0xc0>
			}
			else if(n == 4)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <Tuatunn+0xe4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d103      	bne.n	8000ab2 <Tuatunn+0xb2>
			{
				SPITx[2] = 0b11110111;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <Tuatunn+0xe0>)
 8000aac:	22f7      	movs	r2, #247	@ 0xf7
 8000aae:	709a      	strb	r2, [r3, #2]
 8000ab0:	e006      	b.n	8000ac0 <Tuatunn+0xc0>
			}
			else if(n >= 9){
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <Tuatunn+0xe4>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b08      	cmp	r3, #8
 8000ab8:	d902      	bls.n	8000ac0 <Tuatunn+0xc0>
				SPITx[2] = 0b11111111;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <Tuatunn+0xe0>)
 8000abc:	22ff      	movs	r2, #255	@ 0xff
 8000abe:	709a      	strb	r2, [r3, #2]
			}
			Mode = 0;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <Tuatunn+0xdc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <Tuatunn+0xe8>)
 8000aca:	4905      	ldr	r1, [pc, #20]	@ (8000ae0 <Tuatunn+0xe0>)
 8000acc:	4807      	ldr	r0, [pc, #28]	@ (8000aec <Tuatunn+0xec>)
 8000ace:	f001 ffb7 	bl	8002a40 <HAL_SPI_TransmitReceive_IT>

	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	48000c00 	.word	0x48000c00
 8000adc:	200001e2 	.word	0x200001e2
 8000ae0:	200001d8 	.word	0x200001d8
 8000ae4:	200001e3 	.word	0x200001e3
 8000ae8:	200001cc 	.word	0x200001cc
 8000aec:	2000011c 	.word	0x2000011c

08000af0 <ReadSwitch>:
void ReadSwitch()
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	if (SPIRx[2]==14)
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <ReadSwitch+0x4c>)
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	2b0e      	cmp	r3, #14
 8000afa:	d103      	bne.n	8000b04 <ReadSwitch+0x14>
	{
		Switch = 1;
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <ReadSwitch+0x50>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
	}
	else if (SPIRx[2]==7)
	{
		Switch = 3;
	}
}
 8000b02:	e016      	b.n	8000b32 <ReadSwitch+0x42>
	else if (SPIRx[2]==13)
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <ReadSwitch+0x4c>)
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b0d      	cmp	r3, #13
 8000b0a:	d103      	bne.n	8000b14 <ReadSwitch+0x24>
		Switch = 2;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <ReadSwitch+0x50>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	701a      	strb	r2, [r3, #0]
}
 8000b12:	e00e      	b.n	8000b32 <ReadSwitch+0x42>
	else if (SPIRx[2]==11)
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <ReadSwitch+0x4c>)
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	2b0b      	cmp	r3, #11
 8000b1a:	d103      	bne.n	8000b24 <ReadSwitch+0x34>
		Switch = 4;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <ReadSwitch+0x50>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	701a      	strb	r2, [r3, #0]
}
 8000b22:	e006      	b.n	8000b32 <ReadSwitch+0x42>
	else if (SPIRx[2]==7)
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <ReadSwitch+0x4c>)
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d102      	bne.n	8000b32 <ReadSwitch+0x42>
		Switch = 3;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <ReadSwitch+0x50>)
 8000b2e:	2203      	movs	r2, #3
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	200001cc 	.word	0x200001cc
 8000b40:	20000000 	.word	0x20000000

08000b44 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b52:	f000 fe5d 	bl	8001810 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	48000c00 	.word	0x48000c00

08000b64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
		if (htim == &htim2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d133      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			if(tick <300)
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000b7c:	d22b      	bcs.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				LMode1+=1;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b88:	701a      	strb	r2, [r3, #0]
				if (LMode1>16)
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b10      	cmp	r3, #16
 8000b90:	d902      	bls.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x34>
				{
					LMode1 = 1;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
				}
				if (LMode1%8 == 0)
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d110      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
					n = rand() % 10;
 8000ba6:	f004 f84d 	bl	8004c44 <rand>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bae:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb2:	1099      	asrs	r1, r3, #2
 8000bb4:	17d3      	asrs	r3, r2, #31
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1ad1      	subs	r1, r2, r3
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bc6:	701a      	strb	r2, [r3, #0]
				}
				tick++;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bd2:	801a      	strh	r2, [r3, #0]
			{
				n = 0;
				//send UART
			}
		}
}
 8000bd4:	e002      	b.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x78>
				n = 0;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000180 	.word	0x20000180
 8000be8:	200001e4 	.word	0x200001e4
 8000bec:	20000001 	.word	0x20000001
 8000bf0:	66666667 	.word	0x66666667
 8000bf4:	200001e3 	.word	0x200001e3

08000bf8 <UARTPollingMethod>:

void UARTPollingMethod()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	//return received char
	if(tick == 300 ){
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <UARTPollingMethod+0x40>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000c04:	d116      	bne.n	8000c34 <UARTPollingMethod+0x3c>
		tick++;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <UARTPollingMethod+0x40>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <UARTPollingMethod+0x40>)
 8000c10:	801a      	strh	r2, [r3, #0]
		sprintf((char*)TxBuffer,"Got : %d\r\n", (int)point);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <UARTPollingMethod+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4909      	ldr	r1, [pc, #36]	@ (8000c40 <UARTPollingMethod+0x48>)
 8000c1a:	480a      	ldr	r0, [pc, #40]	@ (8000c44 <UARTPollingMethod+0x4c>)
 8000c1c:	f004 f912 	bl	8004e44 <siprintf>
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <UARTPollingMethod+0x4c>)
 8000c22:	f7ff fafd 	bl	8000220 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	4905      	ldr	r1, [pc, #20]	@ (8000c44 <UARTPollingMethod+0x4c>)
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <UARTPollingMethod+0x50>)
 8000c30:	f003 f95c 	bl	8003eec <HAL_UART_Transmit>
	}
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001e4 	.word	0x200001e4
 8000c3c:	200001e6 	.word	0x200001e6
 8000c40:	08005fc4 	.word	0x08005fc4
 8000c44:	200001e8 	.word	0x200001e8
 8000c48:	20000088 	.word	0x20000088

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c8e:	f000 fe9f 	bl	80019d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09e      	sub	sp, #120	@ 0x78
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	2254      	movs	r2, #84	@ 0x54
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 f922 	bl	8004f0a <memset>
  if(huart->Instance==LPUART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1f      	ldr	r2, [pc, #124]	@ (8000d48 <HAL_UART_MspInit+0xa8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d136      	bne.n	8000d3e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fbb5 	bl	800244c <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce8:	f7ff ffb0 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cf0:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	4a10      	ldr	r2, [pc, #64]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_UART_MspInit+0xac>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f000 fbcf 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3778      	adds	r7, #120	@ 0x78
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40008000 	.word	0x40008000
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_SPI_MspInit+0x8c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d130      	bne.n	8000dd4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_SPI_MspInit+0x90>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db4:	2306      	movs	r3, #6
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <HAL_SPI_MspInit+0x94>)
 8000dc0:	f000 fb8c 	bl	80014dc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2033      	movs	r0, #51	@ 0x33
 8000dca:	f000 faec 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dce:	2033      	movs	r0, #51	@ 0x33
 8000dd0:	f000 fb03 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40003c00 	.word	0x40003c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000800 	.word	0x48000800

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df8:	d113      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 fac5 	bl	80013a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f000 fadc 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f973 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f002 fb1f 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000180 	.word	0x20000180

08000ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eac:	f000 fcc8 	bl	8001840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <SPI3_IRQHandler+0x10>)
 8000eba:	f001 fe6f 	bl	8002b9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000011c 	.word	0x2000011c

08000ec8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_kill>:

int _kill(int pid, int sig)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ee2:	f004 f861 	bl	8004fa8 <__errno>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2216      	movs	r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
  return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_exit>:

void _exit (int status)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ffe7 	bl	8000ed8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f0a:	bf00      	nop
 8000f0c:	e7fd      	b.n	8000f0a <_exit+0x12>

08000f0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e00a      	b.n	8000f36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f20:	f3af 8000 	nop.w
 8000f24:	4601      	mov	r1, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	60ba      	str	r2, [r7, #8]
 8000f2c:	b2ca      	uxtb	r2, r1
 8000f2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbf0      	blt.n	8000f20 <_read+0x12>
  }

  return len;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e009      	b.n	8000f6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	60ba      	str	r2, [r7, #8]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf1      	blt.n	8000f5a <_write+0x12>
  }
  return len;
 8000f76:	687b      	ldr	r3, [r7, #4]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_close>:

int _close(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 ffc6 	bl	8004fa8 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000210 	.word	0x20000210
 8001050:	20000368 	.word	0x20000368

08001054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f003 ff85 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010aa:	f7ff fa89 	bl	80005c0 <main>

080010ae <LoopForever>:

LoopForever:
    b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   r0, =_estack
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010bc:	08006100 	.word	0x08006100
  ldr r2, =_sbss
 80010c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010c4:	20000364 	.word	0x20000364

080010c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>

080010ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f95b 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f80e 	bl	80010fc <HAL_InitTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ec:	f7ff fdb4 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]

}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_InitTick+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d022      	beq.n	8001156 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_InitTick+0x6c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_InitTick+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800111c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001120:	fbb2 f3f3 	udiv	r3, r2, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f966 	bl	80013f6 <HAL_SYSTICK_Config>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10f      	bne.n	8001150 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	d809      	bhi.n	800114a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	2200      	movs	r2, #0
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	f04f 30ff 	mov.w	r0, #4294967295
 800113e:	f000 f932 	bl	80013a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_InitTick+0x70>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e007      	b.n	800115a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e004      	b.n	800115a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e001      	b.n	800115a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000004 	.word	0x20000004
 800116c:	20000008 	.word	0x20000008

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x1c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_IncTick+0x20>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4413      	add	r3, r2
 800117e:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x1c>)
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20000214 	.word	0x20000214
 8001190:	2000000c 	.word	0x2000000c

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000214 	.word	0x20000214

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d004      	beq.n	80011d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_Delay+0x40>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d0:	bf00      	nop
 80011d2:	f7ff ffdf 	bl	8001194 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d8f7      	bhi.n	80011d2 <HAL_Delay+0x26>
  {
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	@ (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	@ (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff40 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff33 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa4 	bl	800134c <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d00d      	beq.n	8001442 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e047      	b.n	80014d2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 020e 	bic.w	r2, r2, #14
 8001450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f003 021f 	and.w	r2, r3, #31
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800148e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
    }
  }
  return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ea:	e15a      	b.n	80017a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 814c 	beq.w	800179c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d005      	beq.n	800151c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001518:	2b02      	cmp	r3, #2
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d017      	beq.n	80015ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d123      	bne.n	800160e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0203 	and.w	r2, r3, #3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a6 	beq.w	800179c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	4b5b      	ldr	r3, [pc, #364]	@ (80017c0 <HAL_GPIO_Init+0x2e4>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001654:	4a5a      	ldr	r2, [pc, #360]	@ (80017c0 <HAL_GPIO_Init+0x2e4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6613      	str	r3, [r2, #96]	@ 0x60
 800165c:	4b58      	ldr	r3, [pc, #352]	@ (80017c0 <HAL_GPIO_Init+0x2e4>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001668:	4a56      	ldr	r2, [pc, #344]	@ (80017c4 <HAL_GPIO_Init+0x2e8>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001692:	d01f      	beq.n	80016d4 <HAL_GPIO_Init+0x1f8>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4c      	ldr	r2, [pc, #304]	@ (80017c8 <HAL_GPIO_Init+0x2ec>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d019      	beq.n	80016d0 <HAL_GPIO_Init+0x1f4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <HAL_GPIO_Init+0x2f0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x1f0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a4a      	ldr	r2, [pc, #296]	@ (80017d0 <HAL_GPIO_Init+0x2f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1ec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a49      	ldr	r2, [pc, #292]	@ (80017d4 <HAL_GPIO_Init+0x2f8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1e8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a48      	ldr	r2, [pc, #288]	@ (80017d8 <HAL_GPIO_Init+0x2fc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1e4>
 80016bc:	2305      	movs	r3, #5
 80016be:	e00a      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016c0:	2306      	movs	r3, #6
 80016c2:	e008      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016c4:	2304      	movs	r3, #4
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016d4:	2300      	movs	r3, #0
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e6:	4937      	ldr	r1, [pc, #220]	@ (80017c4 <HAL_GPIO_Init+0x2e8>)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f4:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <HAL_GPIO_Init+0x300>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001718:	4a30      	ldr	r2, [pc, #192]	@ (80017dc <HAL_GPIO_Init+0x300>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_GPIO_Init+0x300>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001742:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_GPIO_Init+0x300>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_GPIO_Init+0x300>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800176c:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_GPIO_Init+0x300>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_GPIO_Init+0x300>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001796:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <HAL_GPIO_Init+0x300>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f ae9d 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	48001000 	.word	0x48001000
 80017d8:	48001400 	.word	0x48001400
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e001      	b.n	8001802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800182c:	e002      	b.n	8001834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f806 	bl	8001870 <HAL_GPIO_EXTI_Callback>
  }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d141      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001896:	4b4b      	ldr	r3, [pc, #300]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a2:	d131      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a4:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018aa:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	4b43      	ldr	r3, [pc, #268]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018bc:	4a41      	ldr	r2, [pc, #260]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c4:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2232      	movs	r2, #50	@ 0x32
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4a3f      	ldr	r2, [pc, #252]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018da:	e002      	b.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ee:	d102      	bne.n	80018f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f2      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f6:	4b33      	ldr	r3, [pc, #204]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001902:	d158      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e057      	b.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001908:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800190e:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001914:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001918:	e04d      	b.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001920:	d141      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001922:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192e:	d131      	bne.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001930:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001936:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001948:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2232      	movs	r2, #50	@ 0x32
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a1c      	ldr	r2, [pc, #112]	@ (80019cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001966:	e002      	b.n	800196e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3b01      	subs	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d102      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f2      	bne.n	8001968 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198e:	d112      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e011      	b.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019a4:	e007      	b.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40007000 	.word	0x40007000
 80019c8:	20000004 	.word	0x20000004
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019de:	6093      	str	r3, [r2, #8]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e2fe      	b.n	8002000 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d075      	beq.n	8001afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4b97      	ldr	r3, [pc, #604]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	4b94      	ldr	r3, [pc, #592]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b0c      	cmp	r3, #12
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3e>
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_OscConfig+0x44>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b8d      	ldr	r3, [pc, #564]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x108>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e2d9      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x74>
 8001a56:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a84      	ldr	r2, [pc, #528]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xb0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xb0>
 8001a88:	4b78      	ldr	r3, [pc, #480]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a77      	ldr	r2, [pc, #476]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b75      	ldr	r3, [pc, #468]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a74      	ldr	r2, [pc, #464]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fb74 	bl	8001194 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fb70 	bl	8001194 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	@ 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e29e      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xc0>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb60 	bl	8001194 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb5c 	bl	8001194 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e28a      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aea:	4b60      	ldr	r3, [pc, #384]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xe8>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d075      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b06:	4b59      	ldr	r3, [pc, #356]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b10:	4b56      	ldr	r3, [pc, #344]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_OscConfig+0x136>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_OscConfig+0x13c>
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d11f      	bne.n	8001b6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_OscConfig+0x154>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e25d      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b49      	ldr	r3, [pc, #292]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	4946      	ldr	r1, [pc, #280]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b58:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff facd 	bl	80010fc <HAL_InitTick>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d043      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e249      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a3c      	ldr	r2, [pc, #240]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb08 	bl	8001194 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb04 	bl	8001194 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e232      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	061b      	lsls	r3, r3, #24
 8001bb4:	492d      	ldr	r1, [pc, #180]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
 8001bba:	e01a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fae4 	bl	8001194 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fae0 	bl	8001194 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e20e      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1e0>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d041      	beq.n	8001c82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c06:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0c:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff fabd 	bl	8001194 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fab9 	bl	8001194 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1e7      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0ef      	beq.n	8001c1e <HAL_RCC_OscConfig+0x22e>
 8001c3e:	e020      	b.n	8001c82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_RCC_OscConfig+0x27c>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff faa0 	bl	8001194 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c56:	e00d      	b.n	8001c74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fa9c 	bl	8001194 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d906      	bls.n	8001c74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1ca      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c74:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ea      	bne.n	8001c58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80a6 	beq.w	8001ddc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c94:	4b84      	ldr	r3, [pc, #528]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2b4>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2b6>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc6:	4b79      	ldr	r3, [pc, #484]	@ (8001eac <HAL_RCC_OscConfig+0x4bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd2:	4b76      	ldr	r3, [pc, #472]	@ (8001eac <HAL_RCC_OscConfig+0x4bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a75      	ldr	r2, [pc, #468]	@ (8001eac <HAL_RCC_OscConfig+0x4bc>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7ff fa59 	bl	8001194 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7ff fa55 	bl	8001194 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e183      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001eac <HAL_RCC_OscConfig+0x4bc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d108      	bne.n	8001d1e <HAL_RCC_OscConfig+0x32e>
 8001d0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d12:	4a65      	ldr	r2, [pc, #404]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d1c:	e024      	b.n	8001d68 <HAL_RCC_OscConfig+0x378>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d110      	bne.n	8001d48 <HAL_RCC_OscConfig+0x358>
 8001d26:	4b60      	ldr	r3, [pc, #384]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x378>
 8001d48:	4b57      	ldr	r3, [pc, #348]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	4a56      	ldr	r2, [pc, #344]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d58:	4b53      	ldr	r3, [pc, #332]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5e:	4a52      	ldr	r2, [pc, #328]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d016      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fa10 	bl	8001194 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa0c 	bl	8001194 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e138      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ed      	beq.n	8001d78 <HAL_RCC_OscConfig+0x388>
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f9f9 	bl	8001194 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff f9f5 	bl	8001194 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e121      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ed      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4b35      	ldr	r3, [pc, #212]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	4a34      	ldr	r2, [pc, #208]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d03c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001df6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f9c8 	bl	8001194 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e08:	f7ff f9c4 	bl	8001194 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0f2      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCC_OscConfig+0x418>
 8001e28:	e01b      	b.n	8001e62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f9ab 	bl	8001194 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e42:	f7ff f9a7 	bl	8001194 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0d5      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ef      	bne.n	8001e42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80c9 	beq.w	8001ffe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	f000 8083 	beq.w	8001f80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d15e      	bne.n	8001f40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f981 	bl	8001194 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	e00c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff f97d 	bl	8001194 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d905      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0ab      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ec      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b52      	ldr	r3, [pc, #328]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4b52      	ldr	r3, [pc, #328]	@ (800200c <HAL_RCC_OscConfig+0x61c>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a11      	ldr	r1, [r2, #32]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	4311      	orrs	r1, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ede:	0852      	lsrs	r2, r2, #1
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	0552      	lsls	r2, r2, #21
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001eea:	0852      	lsrs	r2, r2, #1
 8001eec:	3a01      	subs	r2, #1
 8001eee:	0652      	lsls	r2, r2, #25
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ef6:	06d2      	lsls	r2, r2, #27
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	4943      	ldr	r1, [pc, #268]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a40      	ldr	r2, [pc, #256]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f93c 	bl	8001194 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f938 	bl	8001194 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e066      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	4b35      	ldr	r3, [pc, #212]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x530>
 8001f3e:	e05e      	b.n	8001ffe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f40:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f922 	bl	8001194 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f91e 	bl	8001194 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04c      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f66:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4924      	ldr	r1, [pc, #144]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f78:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <HAL_RCC_OscConfig+0x620>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]
 8001f7e:	e03e      	b.n	8001ffe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e039      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d12c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	3b01      	subs	r3, #1
 8001fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d123      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11b      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d113      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	019f800c 	.word	0x019f800c
 8002010:	feeefffc 	.word	0xfeeefffc

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e11e      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b91      	ldr	r3, [pc, #580]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b8e      	ldr	r3, [pc, #568]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	498c      	ldr	r1, [pc, #560]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b8a      	ldr	r3, [pc, #552]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e106      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d073      	beq.n	8002150 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d129      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002070:	4b81      	ldr	r3, [pc, #516]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0f4      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002080:	f000 f99e 	bl	80023c0 <RCC_GetSysClockFreqFromPLLSource>
 8002084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_ClockConfig+0x268>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d93f      	bls.n	800210e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d033      	beq.n	800210e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12f      	bne.n	800210e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020ae:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020b6:	4a70      	ldr	r2, [pc, #448]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e024      	b.n	800210e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0c6      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	4b66      	ldr	r3, [pc, #408]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0be      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80020ec:	f000 f8ce 	bl	800228c <HAL_RCC_GetSysClockFreq>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4a61      	ldr	r2, [pc, #388]	@ (800227c <HAL_RCC_ClockConfig+0x268>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d909      	bls.n	800210e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002102:	4a5d      	ldr	r2, [pc, #372]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002108:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b5a      	ldr	r3, [pc, #360]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4957      	ldr	r1, [pc, #348]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002120:	f7ff f838 	bl	8001194 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff f834 	bl	8001194 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e095      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d023      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a42      	ldr	r2, [pc, #264]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002172:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002180:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002188:	4a3b      	ldr	r2, [pc, #236]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800218a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800218e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4936      	ldr	r1, [pc, #216]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b80      	cmp	r3, #128	@ 0x80
 80021a8:	d105      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 80021b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d21d      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 020f 	bic.w	r2, r3, #15
 80021cc:	4929      	ldr	r1, [pc, #164]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d4:	f7fe ffde 	bl	8001194 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe ffda 	bl	8001194 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e03b      	b.n	800226a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_RCC_ClockConfig+0x260>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1ed      	bne.n	80021dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4917      	ldr	r1, [pc, #92]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	490f      	ldr	r1, [pc, #60]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223e:	f000 f825 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <HAL_RCC_ClockConfig+0x264>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	490c      	ldr	r1, [pc, #48]	@ (8002280 <HAL_RCC_ClockConfig+0x26c>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_RCC_ClockConfig+0x270>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_ClockConfig+0x274>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ff4a 	bl	80010fc <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000
 8002278:	40021000 	.word	0x40021000
 800227c:	04c4b400 	.word	0x04c4b400
 8002280:	08005fd0 	.word	0x08005fd0
 8002284:	20000004 	.word	0x20000004
 8002288:	20000008 	.word	0x20000008

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002292:	4b2c      	ldr	r3, [pc, #176]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e047      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b0:	4b26      	ldr	r3, [pc, #152]	@ (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	e03e      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d136      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e0:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	4a16      	ldr	r2, [pc, #88]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ea:	68d2      	ldr	r2, [r2, #12]
 80022ec:	0a12      	lsrs	r2, r2, #8
 80022ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
      break;
 80022f8:	e00c      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022fa:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002304:	68d2      	ldr	r2, [r2, #12]
 8002306:	0a12      	lsrs	r2, r2, #8
 8002308:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
      break;
 8002312:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0e5b      	lsrs	r3, r3, #25
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	e001      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002334:	693b      	ldr	r3, [r7, #16]
}
 8002336:	4618      	mov	r0, r3
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	00f42400 	.word	0x00f42400
 800234c:	016e3600 	.word	0x016e3600

08002350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800236c:	f7ff fff0 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4904      	ldr	r1, [pc, #16]	@ (8002390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	08005fe0 	.word	0x08005fe0

08002394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002398:	f7ff ffda 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0adb      	lsrs	r3, r3, #11
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4904      	ldr	r1, [pc, #16]	@ (80023bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08005fe0 	.word	0x08005fe0

080023c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d10c      	bne.n	80023fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023e4:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ee:	68d2      	ldr	r2, [r2, #12]
 80023f0:	0a12      	lsrs	r2, r2, #8
 80023f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
    break;
 80023fc:	e00c      	b.n	8002418 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023fe:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002408:	68d2      	ldr	r2, [r2, #12]
 800240a:	0a12      	lsrs	r2, r2, #8
 800240c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    break;
 8002416:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0e5b      	lsrs	r3, r3, #25
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002432:	687b      	ldr	r3, [r7, #4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	016e3600 	.word	0x016e3600
 8002448:	00f42400 	.word	0x00f42400

0800244c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002454:	2300      	movs	r3, #0
 8002456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002458:	2300      	movs	r3, #0
 800245a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8098 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b40      	ldr	r3, [pc, #256]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	4a3f      	ldr	r2, [pc, #252]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	@ 0x58
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a39      	ldr	r2, [pc, #228]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fe77 	bl	8001194 <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a8:	e009      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7fe fe73 	bl	8001194 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d902      	bls.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	74fb      	strb	r3, [r7, #19]
        break;
 80024bc:	e005      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ef      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d159      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01e      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d019      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002518:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fe33 	bl	8001194 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002530:	e00b      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fe2f 	bl	8001194 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d902      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	74fb      	strb	r3, [r7, #19]
            break;
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ec      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256c:	4903      	ldr	r1, [pc, #12]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002574:	e008      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002588:	7c7b      	ldrb	r3, [r7, #17]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4ba7      	ldr	r3, [pc, #668]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4aa6      	ldr	r2, [pc, #664]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a6:	4ba1      	ldr	r3, [pc, #644]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	499d      	ldr	r1, [pc, #628]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c8:	4b98      	ldr	r3, [pc, #608]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4995      	ldr	r1, [pc, #596]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ea:	4b90      	ldr	r3, [pc, #576]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	498c      	ldr	r1, [pc, #560]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800260c:	4b87      	ldr	r3, [pc, #540]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	4984      	ldr	r1, [pc, #528]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262e:	4b7f      	ldr	r3, [pc, #508]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	497b      	ldr	r1, [pc, #492]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	4b76      	ldr	r3, [pc, #472]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	4973      	ldr	r1, [pc, #460]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002672:	4b6e      	ldr	r3, [pc, #440]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	496a      	ldr	r1, [pc, #424]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002694:	4b65      	ldr	r3, [pc, #404]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4962      	ldr	r1, [pc, #392]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b6:	4b5d      	ldr	r3, [pc, #372]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	4959      	ldr	r1, [pc, #356]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026d8:	4b54      	ldr	r3, [pc, #336]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	4951      	ldr	r1, [pc, #324]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026fa:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	4948      	ldr	r1, [pc, #288]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800271c:	4b43      	ldr	r3, [pc, #268]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002722:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4940      	ldr	r1, [pc, #256]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a3a      	ldr	r2, [pc, #232]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002754:	4b35      	ldr	r3, [pc, #212]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	4932      	ldr	r1, [pc, #200]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002774:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a2c      	ldr	r2, [pc, #176]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800277e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800278c:	4b27      	ldr	r3, [pc, #156]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279a:	4924      	ldr	r1, [pc, #144]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d2:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a10      	ldr	r2, [pc, #64]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d019      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002802:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4908      	ldr	r1, [pc, #32]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800281a:	d109      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a02      	ldr	r2, [pc, #8]	@ (800282c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002826:	60d3      	str	r3, [r2, #12]
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d015      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4926      	ldr	r1, [pc, #152]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800285a:	d105      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800285c:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a20      	ldr	r2, [pc, #128]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002866:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002882:	4918      	ldr	r1, [pc, #96]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	490a      	ldr	r1, [pc, #40]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e09d      	b.n	8002a36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fa08 	bl	8000d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002960:	d902      	bls.n	8002968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e002      	b.n	800296e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002976:	d007      	beq.n	8002988 <HAL_SPI_Init+0xa0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	f003 0204 	and.w	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a58:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a60:	7dbb      	ldrb	r3, [r7, #22]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d00d      	beq.n	8002a82 <HAL_SPI_TransmitReceive_IT+0x42>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6c:	d106      	bne.n	8002a7c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_SPI_TransmitReceive_IT+0x3c>
 8002a76:	7dbb      	ldrb	r3, [r7, #22]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d002      	beq.n	8002a82 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a80:	e07d      	b.n	8002b7e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a98:	e071      	b.n	8002b7e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_SPI_TransmitReceive_IT+0x68>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e06b      	b.n	8002b80 <HAL_SPI_TransmitReceive_IT+0x140>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d003      	beq.n	8002ac4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2205      	movs	r2, #5
 8002ac0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	887a      	ldrh	r2, [r7, #2]
 8002ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002afa:	d906      	bls.n	8002b0a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a23      	ldr	r2, [pc, #140]	@ (8002b8c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002b00:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a22      	ldr	r2, [pc, #136]	@ (8002b90 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002b06:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b08:	e005      	b.n	8002b16 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002b14:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b1e:	d802      	bhi.n	8002b26 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d908      	bls.n	8002b38 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e007      	b.n	8002b48 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b46:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d007      	beq.n	8002b66 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002b7c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	08002f27 	.word	0x08002f27
 8002b90:	08002f8d 	.word	0x08002f8d
 8002b94:	08002dd7 	.word	0x08002dd7
 8002b98:	08002e95 	.word	0x08002e95

08002b9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    return;
 8002bda:	e0ce      	b.n	8002d7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_SPI_IRQHandler+0x5e>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
    return;
 8002bf8:	e0bf      	b.n	8002d7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_SPI_IRQHandler+0x7e>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80b0 	beq.w	8002d7a <HAL_SPI_IRQHandler+0x1de>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80aa 	beq.w	8002d7a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d011      	beq.n	8002c60 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	e00b      	b.n	8002c78 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
        return;
 8002c76:	e080      	b.n	8002d7a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d014      	beq.n	8002cac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f043 0208 	orr.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d04f      	beq.n	8002d78 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ce6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <HAL_SPI_IRQHandler+0x168>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d034      	beq.n	8002d6e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0203 	bic.w	r2, r2, #3
 8002d12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_SPI_IRQHandler+0x1e4>)
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fb70 	bl	800140e <HAL_DMA_Abort_IT>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <HAL_SPI_IRQHandler+0x1e4>)
 8002d4e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fb5a 	bl	800140e <HAL_DMA_Abort_IT>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002d6c:	e003      	b.n	8002d76 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f812 	bl	8002d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d74:	e000      	b.n	8002d78 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002d76:	bf00      	nop
    return;
 8002d78:	bf00      	nop
  }
}
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	08002dad 	.word	0x08002dad

08002d84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff ffe5 	bl	8002d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d923      	bls.n	8002e32 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	b292      	uxth	r2, r2
 8002df6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b02      	subs	r3, #2
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d11f      	bne.n	8002e60 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	e016      	b.n	8002e60 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f103 020c 	add.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e7a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa14 	bl	80032b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d912      	bls.n	8002ecc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	1c9a      	adds	r2, r3, #2
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b02      	subs	r3, #2
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eca:	e012      	b.n	8002ef2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d110      	bne.n	8002f1e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f0a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9cb 	bl	80032b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10f      	bne.n	8002f84 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f72:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f998 	bl	80032b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d110      	bne.n	8002fe4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fd0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f968 	bl	80032b4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ffc:	f7fe f8ca 	bl	8001194 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800300c:	f7fe f8c2 	bl	8001194 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003012:	4b39      	ldr	r3, [pc, #228]	@ (80030f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003022:	e054      	b.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d050      	beq.n	80030ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800302c:	f7fe f8b2 	bl	8001194 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d902      	bls.n	8003042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800305a:	d111      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003064:	d004      	beq.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306e:	d107      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800307e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003088:	d10f      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e017      	b.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d19b      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000004 	.word	0x20000004

080030fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	@ 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800310e:	f7fe f841 	bl	8001194 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800311e:	f7fe f839 	bl	8001194 <HAL_GetTick>
 8003122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800312c:	4b3d      	ldr	r3, [pc, #244]	@ (8003224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	0d1b      	lsrs	r3, r3, #20
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003144:	e060      	b.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800314c:	d107      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800315c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d050      	beq.n	8003208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003166:	f7fe f815 	bl	8001194 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	429a      	cmp	r2, r3
 8003174:	d902      	bls.n	800317c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13d      	bne.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800318a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003194:	d111      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319e:	d004      	beq.n	80031aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d107      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c2:	d10f      	bne.n	80031e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e010      	b.n	800321a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3b01      	subs	r3, #1
 8003206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d196      	bne.n	8003146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3728      	adds	r7, #40	@ 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000004 	.word	0x20000004

08003228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff ff5b 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e027      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	2180      	movs	r1, #128	@ 0x80
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fec0 	bl	8002fec <SPI_WaitFlagStateUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e014      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff34 	bl	80030fc <SPI_WaitFifoStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e000      	b.n	80032ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032bc:	f7fd ff6a 	bl	8001194 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0220 	bic.w	r2, r2, #32
 80032d0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	2164      	movs	r1, #100	@ 0x64
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa6 	bl	8003228 <SPI_EndRxTxTransaction>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fd3a 	bl	8002d84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003310:	e00e      	b.n	8003330 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fc12 	bl	8000b44 <HAL_SPI_TxRxCpltCallback>
}
 8003320:	e006      	b.n	8003330 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fd34 	bl	8002d98 <HAL_SPI_ErrorCallback>
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e049      	b.n	80033de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fd42 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fb3c 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d001      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e054      	b.n	80034aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d022      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342a:	d01d      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	@ (80034bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d018      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d009      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <HAL_TIM_Base_Start_IT+0xe4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d115      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b06      	cmp	r3, #6
 8003478:	d015      	beq.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d011      	beq.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e008      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e000      	b.n	80034a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40013400 	.word	0x40013400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40015000 	.word	0x40015000
 80034d4:	00010007 	.word	0x00010007

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d020      	beq.n	800353c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0202 	mvn.w	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa48 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa3a 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa4b 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d020      	beq.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa22 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa14 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fa25 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d020      	beq.n	80035d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01b      	beq.n	80035d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0208 	mvn.w	r2, #8
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2204      	movs	r2, #4
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9fc 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9ee 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f9ff 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d020      	beq.n	8003620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0210 	mvn.w	r2, #16
 80035f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2208      	movs	r2, #8
 80035f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9d6 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9c8 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9d9 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0201 	mvn.w	r2, #1
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fa90 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fbb1 	bl	8003dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800368e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fba9 	bl	8003de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f993 	bl	80039e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0220 	mvn.w	r2, #32
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fb71 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00c      	beq.n	8003702 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb7d 	bl	8003dfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fb75 	bl	8003e10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb6d 	bl	8003e24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fb65 	bl	8003e38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIM_ConfigClockSource+0x1c>
 8003790:	2302      	movs	r3, #2
 8003792:	e0f6      	b.n	8003982 <HAL_TIM_ConfigClockSource+0x20a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80037b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6f      	ldr	r2, [pc, #444]	@ (800398c <HAL_TIM_ConfigClockSource+0x214>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f000 80c1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037d4:	4a6d      	ldr	r2, [pc, #436]	@ (800398c <HAL_TIM_ConfigClockSource+0x214>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f200 80c6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003990 <HAL_TIM_ConfigClockSource+0x218>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f000 80b9 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_TIM_ConfigClockSource+0x218>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f200 80be 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_TIM_ConfigClockSource+0x21c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f000 80b1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037f4:	4a67      	ldr	r2, [pc, #412]	@ (8003994 <HAL_TIM_ConfigClockSource+0x21c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f200 80b6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	4a66      	ldr	r2, [pc, #408]	@ (8003998 <HAL_TIM_ConfigClockSource+0x220>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f000 80a9 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	4a64      	ldr	r2, [pc, #400]	@ (8003998 <HAL_TIM_ConfigClockSource+0x220>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f200 80ae 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	4a63      	ldr	r2, [pc, #396]	@ (800399c <HAL_TIM_ConfigClockSource+0x224>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f000 80a1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	4a61      	ldr	r2, [pc, #388]	@ (800399c <HAL_TIM_ConfigClockSource+0x224>)
 8003816:	4293      	cmp	r3, r2
 8003818:	f200 80a6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800381c:	4a60      	ldr	r2, [pc, #384]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x228>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f000 8099 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003824:	4a5e      	ldr	r2, [pc, #376]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x228>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f200 809e 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800382c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003830:	f000 8091 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003834:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003838:	f200 8096 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003840:	f000 8089 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003848:	f200 808e 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003850:	d03e      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x158>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	f200 8087 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	f000 8086 	beq.w	800396e <HAL_TIM_ConfigClockSource+0x1f6>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d87f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	2b70      	cmp	r3, #112	@ 0x70
 800386a:	d01a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x12a>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d87b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d050      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x19e>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d877      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003878:	2b50      	cmp	r3, #80	@ 0x50
 800387a:	d03c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x17e>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d873      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d058      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1be>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d86f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003888:	2b30      	cmp	r3, #48	@ 0x30
 800388a:	d064      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d86b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d060      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d867      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05c      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d05a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80038a0:	e062      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	f000 f9cf 	bl	8003c54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e04f      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	f000 f9b8 	bl	8003c54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
      break;
 80038f4:	e03c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 f92a 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	@ 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f983 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 8003914:	e02c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 f949 	bl	8003bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	@ 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f973 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 8003934:	e01c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f90a 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	@ 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f963 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 8003954:	e00c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 f95a 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 8003966:	e003      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e000      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800396e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100070 	.word	0x00100070
 8003990:	00100060 	.word	0x00100060
 8003994:	00100050 	.word	0x00100050
 8003998:	00100040 	.word	0x00100040
 800399c:	00100030 	.word	0x00100030
 80039a0:	00100020 	.word	0x00100020

080039a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d017      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d013      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a49      	ldr	r2, [pc, #292]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00f      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a48      	ldr	r2, [pc, #288]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a47      	ldr	r2, [pc, #284]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a46      	ldr	r2, [pc, #280]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a45      	ldr	r2, [pc, #276]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a39      	ldr	r2, [pc, #228]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d023      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5c:	d01f      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01b      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d017      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a34      	ldr	r2, [pc, #208]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00f      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <TIM_Base_SetConfig+0x15c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <TIM_Base_SetConfig+0x160>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <TIM_Base_SetConfig+0x164>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1a      	ldr	r2, [pc, #104]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <TIM_Base_SetConfig+0x15c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <TIM_Base_SetConfig+0x160>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a18      	ldr	r2, [pc, #96]	@ (8003b58 <TIM_Base_SetConfig+0x164>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40015000 	.word	0x40015000
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0201 	bic.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 030a 	bic.w	r3, r3, #10
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 0210 	bic.w	r2, r3, #16
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	031b      	lsls	r3, r3, #12
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f043 0307 	orr.w	r3, r3, #7
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	021a      	lsls	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e074      	b.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d009      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a33      	ldr	r2, [pc, #204]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a31      	ldr	r2, [pc, #196]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d01d      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a15      	ldr	r2, [pc, #84]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a11      	ldr	r2, [pc, #68]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10c      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40015000 	.word	0x40015000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40014000 	.word	0x40014000

08003dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e042      	b.n	8003ee4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fc ff15 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2224      	movs	r2, #36	@ 0x24
 8003e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fbb2 	bl	8004600 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8b3 	bl	8004008 <UART_SetConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e01b      	b.n	8003ee4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fc31 	bl	8004744 <UART_CheckIdleState>
 8003ee2:	4603      	mov	r3, r0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	@ 0x28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d17b      	bne.n	8003ffe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_UART_Transmit+0x26>
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e074      	b.n	8004000 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2221      	movs	r2, #33	@ 0x21
 8003f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f26:	f7fd f935 	bl	8001194 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f44:	d108      	bne.n	8003f58 <HAL_UART_Transmit+0x6c>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e003      	b.n	8003f60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f60:	e030      	b.n	8003fc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	@ 0x80
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fc93 	bl	8004898 <UART_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e03d      	b.n	8004000 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e007      	b.n	8003fb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1c8      	bne.n	8003f62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2140      	movs	r1, #64	@ 0x40
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fc5c 	bl	8004898 <UART_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e006      	b.n	8004000 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800400c:	b08c      	sub	sp, #48	@ 0x30
 800400e:	af00      	add	r7, sp, #0
 8004010:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	431a      	orrs	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4baa      	ldr	r3, [pc, #680]	@ (80042e0 <UART_SetConfig+0x2d8>)
 8004038:	4013      	ands	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004040:	430b      	orrs	r3, r1
 8004042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a9f      	ldr	r2, [pc, #636]	@ (80042e4 <UART_SetConfig+0x2dc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004070:	4313      	orrs	r3, r2
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800407e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004088:	430b      	orrs	r3, r1
 800408a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	f023 010f 	bic.w	r1, r3, #15
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a90      	ldr	r2, [pc, #576]	@ (80042e8 <UART_SetConfig+0x2e0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d125      	bne.n	80040f8 <UART_SetConfig+0xf0>
 80040ac:	4b8f      	ldr	r3, [pc, #572]	@ (80042ec <UART_SetConfig+0x2e4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d81a      	bhi.n	80040f0 <UART_SetConfig+0xe8>
 80040ba:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <UART_SetConfig+0xb8>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e9 	.word	0x080040e9
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d6:	e116      	b.n	8004306 <UART_SetConfig+0x2fe>
 80040d8:	2302      	movs	r3, #2
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040de:	e112      	b.n	8004306 <UART_SetConfig+0x2fe>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e6:	e10e      	b.n	8004306 <UART_SetConfig+0x2fe>
 80040e8:	2308      	movs	r3, #8
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e10a      	b.n	8004306 <UART_SetConfig+0x2fe>
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e106      	b.n	8004306 <UART_SetConfig+0x2fe>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <UART_SetConfig+0x2e8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d138      	bne.n	8004174 <UART_SetConfig+0x16c>
 8004102:	4b7a      	ldr	r3, [pc, #488]	@ (80042ec <UART_SetConfig+0x2e4>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d82d      	bhi.n	800416c <UART_SetConfig+0x164>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <UART_SetConfig+0x110>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800414d 	.word	0x0800414d
 800411c:	0800416d 	.word	0x0800416d
 8004120:	0800416d 	.word	0x0800416d
 8004124:	0800416d 	.word	0x0800416d
 8004128:	0800415d 	.word	0x0800415d
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800416d 	.word	0x0800416d
 8004134:	0800416d 	.word	0x0800416d
 8004138:	08004155 	.word	0x08004155
 800413c:	0800416d 	.word	0x0800416d
 8004140:	0800416d 	.word	0x0800416d
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004165 	.word	0x08004165
 800414c:	2300      	movs	r3, #0
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004152:	e0d8      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004154:	2302      	movs	r3, #2
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415a:	e0d4      	b.n	8004306 <UART_SetConfig+0x2fe>
 800415c:	2304      	movs	r3, #4
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004162:	e0d0      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004164:	2308      	movs	r3, #8
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800416a:	e0cc      	b.n	8004306 <UART_SetConfig+0x2fe>
 800416c:	2310      	movs	r3, #16
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004172:	e0c8      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5e      	ldr	r2, [pc, #376]	@ (80042f4 <UART_SetConfig+0x2ec>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d125      	bne.n	80041ca <UART_SetConfig+0x1c2>
 800417e:	4b5b      	ldr	r3, [pc, #364]	@ (80042ec <UART_SetConfig+0x2e4>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004188:	2b30      	cmp	r3, #48	@ 0x30
 800418a:	d016      	beq.n	80041ba <UART_SetConfig+0x1b2>
 800418c:	2b30      	cmp	r3, #48	@ 0x30
 800418e:	d818      	bhi.n	80041c2 <UART_SetConfig+0x1ba>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d00a      	beq.n	80041aa <UART_SetConfig+0x1a2>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d814      	bhi.n	80041c2 <UART_SetConfig+0x1ba>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <UART_SetConfig+0x19a>
 800419c:	2b10      	cmp	r3, #16
 800419e:	d008      	beq.n	80041b2 <UART_SetConfig+0x1aa>
 80041a0:	e00f      	b.n	80041c2 <UART_SetConfig+0x1ba>
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a8:	e0ad      	b.n	8004306 <UART_SetConfig+0x2fe>
 80041aa:	2302      	movs	r3, #2
 80041ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b0:	e0a9      	b.n	8004306 <UART_SetConfig+0x2fe>
 80041b2:	2304      	movs	r3, #4
 80041b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041b8:	e0a5      	b.n	8004306 <UART_SetConfig+0x2fe>
 80041ba:	2308      	movs	r3, #8
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c0:	e0a1      	b.n	8004306 <UART_SetConfig+0x2fe>
 80041c2:	2310      	movs	r3, #16
 80041c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c8:	e09d      	b.n	8004306 <UART_SetConfig+0x2fe>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4a      	ldr	r2, [pc, #296]	@ (80042f8 <UART_SetConfig+0x2f0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d125      	bne.n	8004220 <UART_SetConfig+0x218>
 80041d4:	4b45      	ldr	r3, [pc, #276]	@ (80042ec <UART_SetConfig+0x2e4>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041de:	2bc0      	cmp	r3, #192	@ 0xc0
 80041e0:	d016      	beq.n	8004210 <UART_SetConfig+0x208>
 80041e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041e4:	d818      	bhi.n	8004218 <UART_SetConfig+0x210>
 80041e6:	2b80      	cmp	r3, #128	@ 0x80
 80041e8:	d00a      	beq.n	8004200 <UART_SetConfig+0x1f8>
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d814      	bhi.n	8004218 <UART_SetConfig+0x210>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <UART_SetConfig+0x1f0>
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d008      	beq.n	8004208 <UART_SetConfig+0x200>
 80041f6:	e00f      	b.n	8004218 <UART_SetConfig+0x210>
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041fe:	e082      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004200:	2302      	movs	r3, #2
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004206:	e07e      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004208:	2304      	movs	r3, #4
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420e:	e07a      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004210:	2308      	movs	r3, #8
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004216:	e076      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800421e:	e072      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a35      	ldr	r2, [pc, #212]	@ (80042fc <UART_SetConfig+0x2f4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d12a      	bne.n	8004280 <UART_SetConfig+0x278>
 800422a:	4b30      	ldr	r3, [pc, #192]	@ (80042ec <UART_SetConfig+0x2e4>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004238:	d01a      	beq.n	8004270 <UART_SetConfig+0x268>
 800423a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423e:	d81b      	bhi.n	8004278 <UART_SetConfig+0x270>
 8004240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004244:	d00c      	beq.n	8004260 <UART_SetConfig+0x258>
 8004246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424a:	d815      	bhi.n	8004278 <UART_SetConfig+0x270>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <UART_SetConfig+0x250>
 8004250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004254:	d008      	beq.n	8004268 <UART_SetConfig+0x260>
 8004256:	e00f      	b.n	8004278 <UART_SetConfig+0x270>
 8004258:	2300      	movs	r3, #0
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800425e:	e052      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004260:	2302      	movs	r3, #2
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004266:	e04e      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800426e:	e04a      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004276:	e046      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e042      	b.n	8004306 <UART_SetConfig+0x2fe>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <UART_SetConfig+0x2dc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d13a      	bne.n	8004300 <UART_SetConfig+0x2f8>
 800428a:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <UART_SetConfig+0x2e4>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004298:	d01a      	beq.n	80042d0 <UART_SetConfig+0x2c8>
 800429a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800429e:	d81b      	bhi.n	80042d8 <UART_SetConfig+0x2d0>
 80042a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a4:	d00c      	beq.n	80042c0 <UART_SetConfig+0x2b8>
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042aa:	d815      	bhi.n	80042d8 <UART_SetConfig+0x2d0>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <UART_SetConfig+0x2b0>
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b4:	d008      	beq.n	80042c8 <UART_SetConfig+0x2c0>
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x2d0>
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042be:	e022      	b.n	8004306 <UART_SetConfig+0x2fe>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	e01e      	b.n	8004306 <UART_SetConfig+0x2fe>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ce:	e01a      	b.n	8004306 <UART_SetConfig+0x2fe>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d6:	e016      	b.n	8004306 <UART_SetConfig+0x2fe>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042de:	e012      	b.n	8004306 <UART_SetConfig+0x2fe>
 80042e0:	cfff69f3 	.word	0xcfff69f3
 80042e4:	40008000 	.word	0x40008000
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40004400 	.word	0x40004400
 80042f4:	40004800 	.word	0x40004800
 80042f8:	40004c00 	.word	0x40004c00
 80042fc:	40005000 	.word	0x40005000
 8004300:	2310      	movs	r3, #16
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4aae      	ldr	r2, [pc, #696]	@ (80045c4 <UART_SetConfig+0x5bc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	f040 8097 	bne.w	8004440 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004312:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004316:	2b08      	cmp	r3, #8
 8004318:	d823      	bhi.n	8004362 <UART_SetConfig+0x35a>
 800431a:	a201      	add	r2, pc, #4	@ (adr r2, 8004320 <UART_SetConfig+0x318>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004345 	.word	0x08004345
 8004324:	08004363 	.word	0x08004363
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004363 	.word	0x08004363
 8004330:	08004353 	.word	0x08004353
 8004334:	08004363 	.word	0x08004363
 8004338:	08004363 	.word	0x08004363
 800433c:	08004363 	.word	0x08004363
 8004340:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7fe f810 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8004348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b9e      	ldr	r3, [pc, #632]	@ (80045c8 <UART_SetConfig+0x5c0>)
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004350:	e00d      	b.n	800436e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fd ff9b 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8004356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800436c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8130 	beq.w	80045d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	4a94      	ldr	r2, [pc, #592]	@ (80045cc <UART_SetConfig+0x5c4>)
 800437c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004380:	461a      	mov	r2, r3
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	fbb3 f3f2 	udiv	r3, r3, r2
 8004388:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	429a      	cmp	r2, r3
 8004398:	d305      	bcc.n	80043a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d903      	bls.n	80043ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043ac:	e113      	b.n	80045d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2200      	movs	r2, #0
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	60fa      	str	r2, [r7, #12]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	4a84      	ldr	r2, [pc, #528]	@ (80045cc <UART_SetConfig+0x5c4>)
 80043bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043d0:	f7fb ff7e 	bl	80002d0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4610      	mov	r0, r2
 80043da:	4619      	mov	r1, r3
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	020b      	lsls	r3, r1, #8
 80043e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ea:	0202      	lsls	r2, r0, #8
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	6849      	ldr	r1, [r1, #4]
 80043f0:	0849      	lsrs	r1, r1, #1
 80043f2:	2000      	movs	r0, #0
 80043f4:	460c      	mov	r4, r1
 80043f6:	4605      	mov	r5, r0
 80043f8:	eb12 0804 	adds.w	r8, r2, r4
 80043fc:	eb43 0905 	adc.w	r9, r3, r5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	469a      	mov	sl, r3
 8004408:	4693      	mov	fp, r2
 800440a:	4652      	mov	r2, sl
 800440c:	465b      	mov	r3, fp
 800440e:	4640      	mov	r0, r8
 8004410:	4649      	mov	r1, r9
 8004412:	f7fb ff5d 	bl	80002d0 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4613      	mov	r3, r2
 800441c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004424:	d308      	bcc.n	8004438 <UART_SetConfig+0x430>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800442c:	d204      	bcs.n	8004438 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e0ce      	b.n	80045d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800443e:	e0ca      	b.n	80045d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004448:	d166      	bne.n	8004518 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800444a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800444e:	2b08      	cmp	r3, #8
 8004450:	d827      	bhi.n	80044a2 <UART_SetConfig+0x49a>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <UART_SetConfig+0x450>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	080044a3 	.word	0x080044a3
 8004468:	08004493 	.word	0x08004493
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044a3 	.word	0x080044a3
 8004474:	080044a3 	.word	0x080044a3
 8004478:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fd ff74 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8004480:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004482:	e014      	b.n	80044ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fd ff86 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 8004488:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800448a:	e010      	b.n	80044ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b4e      	ldr	r3, [pc, #312]	@ (80045c8 <UART_SetConfig+0x5c0>)
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004490:	e00d      	b.n	80044ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fd fefb 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8004496:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004498:	e009      	b.n	80044ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044a0:	e005      	b.n	80044ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8090 	beq.w	80045d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	4a44      	ldr	r2, [pc, #272]	@ (80045cc <UART_SetConfig+0x5c4>)
 80044bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c8:	005a      	lsls	r2, r3, #1
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	441a      	add	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d916      	bls.n	8004510 <UART_SetConfig+0x508>
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d212      	bcs.n	8004510 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	b29a      	uxth	r2, r3
 8004500:	8bfb      	ldrh	r3, [r7, #30]
 8004502:	4313      	orrs	r3, r2
 8004504:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	8bfa      	ldrh	r2, [r7, #30]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e062      	b.n	80045d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004516:	e05e      	b.n	80045d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004518:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800451c:	2b08      	cmp	r3, #8
 800451e:	d828      	bhi.n	8004572 <UART_SetConfig+0x56a>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <UART_SetConfig+0x520>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fd ff0c 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8004550:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004552:	e014      	b.n	800457e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fd ff1e 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800455a:	e010      	b.n	800457e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <UART_SetConfig+0x5c0>)
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fd fe93 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8004566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004568:	e009      	b.n	800457e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004570:	e005      	b.n	800457e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800457c:	bf00      	nop
    }

    if (pclk != 0U)
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d028      	beq.n	80045d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	4a10      	ldr	r2, [pc, #64]	@ (80045cc <UART_SetConfig+0x5c4>)
 800458a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458e:	461a      	mov	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	fbb3 f2f2 	udiv	r2, r3, r2
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	441a      	add	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d910      	bls.n	80045d0 <UART_SetConfig+0x5c8>
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d20c      	bcs.n	80045d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
 80045c0:	e009      	b.n	80045d6 <UART_SetConfig+0x5ce>
 80045c2:	bf00      	nop
 80045c4:	40008000 	.word	0x40008000
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	08005fe8 	.word	0x08005fe8
      }
      else
      {
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2201      	movs	r2, #1
 80045da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2200      	movs	r2, #0
 80045ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80045f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	@ 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01a      	beq.n	8004716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046fe:	d10a      	bne.n	8004716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b098      	sub	sp, #96	@ 0x60
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004754:	f7fc fd1e 	bl	8001194 <HAL_GetTick>
 8004758:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d12f      	bne.n	80047c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f88e 	bl	8004898 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d022      	beq.n	80047c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004796:	653b      	str	r3, [r7, #80]	@ 0x50
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e6      	bne.n	8004782 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e063      	b.n	8004890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d149      	bne.n	800486a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047de:	2200      	movs	r2, #0
 80047e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f857 	bl	8004898 <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d03c      	beq.n	800486a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	623b      	str	r3, [r7, #32]
   return(result);
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004810:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	60fb      	str	r3, [r7, #12]
   return(result);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004842:	61fa      	str	r2, [r7, #28]
 8004844:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	617b      	str	r3, [r7, #20]
   return(result);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e012      	b.n	8004890 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3758      	adds	r7, #88	@ 0x58
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a8:	e04f      	b.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d04b      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fc fc6f 	bl	8001194 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e04e      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d037      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d034      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d031      	beq.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d110      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2208      	movs	r2, #8
 80048fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f838 	bl	8004972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2208      	movs	r2, #8
 8004906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e029      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004924:	d111      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800492e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f81e 	bl	8004972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e00f      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d0a0      	beq.n	80048aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004972:	b480      	push	{r7}
 8004974:	b095      	sub	sp, #84	@ 0x54
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004998:	643b      	str	r3, [r7, #64]	@ 0x40
 800499a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800499e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e6      	bne.n	800497a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3308      	adds	r3, #8
 80049b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e3      	bne.n	80049ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d118      	bne.n	8004a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0310 	bic.w	r3, r3, #16
 8004a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6979      	ldr	r1, [r7, #20]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	613b      	str	r3, [r7, #16]
   return(result);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a32:	bf00      	nop
 8004a34:	3754      	adds	r7, #84	@ 0x54
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e027      	b.n	8004aa4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	@ 0x24
 8004a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e02d      	b.n	8004b24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	@ 0x24
 8004ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f84f 	bl	8004ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e02d      	b.n	8004ba0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	@ 0x24
 8004b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f811 	bl	8004ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d108      	bne.n	8004bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bc8:	e031      	b.n	8004c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bce:	2308      	movs	r3, #8
 8004bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	0e5b      	lsrs	r3, r3, #25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	0f5b      	lsrs	r3, r3, #29
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	7b3a      	ldrb	r2, [r7, #12]
 8004bf6:	4911      	ldr	r1, [pc, #68]	@ (8004c3c <UARTEx_SetNbDataToProcess+0x94>)
 8004bf8:	5c8a      	ldrb	r2, [r1, r2]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bfe:	7b3a      	ldrb	r2, [r7, #12]
 8004c00:	490f      	ldr	r1, [pc, #60]	@ (8004c40 <UARTEx_SetNbDataToProcess+0x98>)
 8004c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	7b7a      	ldrb	r2, [r7, #13]
 8004c14:	4909      	ldr	r1, [pc, #36]	@ (8004c3c <UARTEx_SetNbDataToProcess+0x94>)
 8004c16:	5c8a      	ldrb	r2, [r1, r2]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c1c:	7b7a      	ldrb	r2, [r7, #13]
 8004c1e:	4908      	ldr	r1, [pc, #32]	@ (8004c40 <UARTEx_SetNbDataToProcess+0x98>)
 8004c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	08006000 	.word	0x08006000
 8004c40:	08006008 	.word	0x08006008

08004c44 <rand>:
 8004c44:	4b16      	ldr	r3, [pc, #88]	@ (8004ca0 <rand+0x5c>)
 8004c46:	b510      	push	{r4, lr}
 8004c48:	681c      	ldr	r4, [r3, #0]
 8004c4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c4c:	b9b3      	cbnz	r3, 8004c7c <rand+0x38>
 8004c4e:	2018      	movs	r0, #24
 8004c50:	f000 fa40 	bl	80050d4 <malloc>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6320      	str	r0, [r4, #48]	@ 0x30
 8004c58:	b920      	cbnz	r0, 8004c64 <rand+0x20>
 8004c5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <rand+0x60>)
 8004c5c:	4812      	ldr	r0, [pc, #72]	@ (8004ca8 <rand+0x64>)
 8004c5e:	2152      	movs	r1, #82	@ 0x52
 8004c60:	f000 f9d0 	bl	8005004 <__assert_func>
 8004c64:	4911      	ldr	r1, [pc, #68]	@ (8004cac <rand+0x68>)
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <rand+0x6c>)
 8004c68:	e9c0 1300 	strd	r1, r3, [r0]
 8004c6c:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <rand+0x70>)
 8004c6e:	6083      	str	r3, [r0, #8]
 8004c70:	230b      	movs	r3, #11
 8004c72:	8183      	strh	r3, [r0, #12]
 8004c74:	2100      	movs	r1, #0
 8004c76:	2001      	movs	r0, #1
 8004c78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c7e:	480e      	ldr	r0, [pc, #56]	@ (8004cb8 <rand+0x74>)
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	694c      	ldr	r4, [r1, #20]
 8004c84:	4a0d      	ldr	r2, [pc, #52]	@ (8004cbc <rand+0x78>)
 8004c86:	4358      	muls	r0, r3
 8004c88:	fb02 0004 	mla	r0, r2, r4, r0
 8004c8c:	fba3 3202 	umull	r3, r2, r3, r2
 8004c90:	3301      	adds	r3, #1
 8004c92:	eb40 0002 	adc.w	r0, r0, r2
 8004c96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004c9e:	bd10      	pop	{r4, pc}
 8004ca0:	2000001c 	.word	0x2000001c
 8004ca4:	08006010 	.word	0x08006010
 8004ca8:	08006027 	.word	0x08006027
 8004cac:	abcd330e 	.word	0xabcd330e
 8004cb0:	e66d1234 	.word	0xe66d1234
 8004cb4:	0005deec 	.word	0x0005deec
 8004cb8:	5851f42d 	.word	0x5851f42d
 8004cbc:	4c957f2d 	.word	0x4c957f2d

08004cc0 <std>:
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cce:	6083      	str	r3, [r0, #8]
 8004cd0:	8181      	strh	r1, [r0, #12]
 8004cd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cd4:	81c2      	strh	r2, [r0, #14]
 8004cd6:	6183      	str	r3, [r0, #24]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	2208      	movs	r2, #8
 8004cdc:	305c      	adds	r0, #92	@ 0x5c
 8004cde:	f000 f914 	bl	8004f0a <memset>
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <std+0x58>)
 8004ce4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <std+0x5c>)
 8004ce8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <std+0x60>)
 8004cec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cee:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <std+0x64>)
 8004cf0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <std+0x68>)
 8004cf4:	6224      	str	r4, [r4, #32]
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d006      	beq.n	8004d08 <std+0x48>
 8004cfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cfe:	4294      	cmp	r4, r2
 8004d00:	d002      	beq.n	8004d08 <std+0x48>
 8004d02:	33d0      	adds	r3, #208	@ 0xd0
 8004d04:	429c      	cmp	r4, r3
 8004d06:	d105      	bne.n	8004d14 <std+0x54>
 8004d08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	f000 b974 	b.w	8004ffc <__retarget_lock_init_recursive>
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	bf00      	nop
 8004d18:	08004e85 	.word	0x08004e85
 8004d1c:	08004ea7 	.word	0x08004ea7
 8004d20:	08004edf 	.word	0x08004edf
 8004d24:	08004f03 	.word	0x08004f03
 8004d28:	20000218 	.word	0x20000218

08004d2c <stdio_exit_handler>:
 8004d2c:	4a02      	ldr	r2, [pc, #8]	@ (8004d38 <stdio_exit_handler+0xc>)
 8004d2e:	4903      	ldr	r1, [pc, #12]	@ (8004d3c <stdio_exit_handler+0x10>)
 8004d30:	4803      	ldr	r0, [pc, #12]	@ (8004d40 <stdio_exit_handler+0x14>)
 8004d32:	f000 b869 	b.w	8004e08 <_fwalk_sglue>
 8004d36:	bf00      	nop
 8004d38:	20000010 	.word	0x20000010
 8004d3c:	08005915 	.word	0x08005915
 8004d40:	20000020 	.word	0x20000020

08004d44 <cleanup_stdio>:
 8004d44:	6841      	ldr	r1, [r0, #4]
 8004d46:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <cleanup_stdio+0x34>)
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	d001      	beq.n	8004d54 <cleanup_stdio+0x10>
 8004d50:	f000 fde0 	bl	8005914 <_fflush_r>
 8004d54:	68a1      	ldr	r1, [r4, #8]
 8004d56:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <cleanup_stdio+0x38>)
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d002      	beq.n	8004d62 <cleanup_stdio+0x1e>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 fdd9 	bl	8005914 <_fflush_r>
 8004d62:	68e1      	ldr	r1, [r4, #12]
 8004d64:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <cleanup_stdio+0x3c>)
 8004d66:	4299      	cmp	r1, r3
 8004d68:	d004      	beq.n	8004d74 <cleanup_stdio+0x30>
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d70:	f000 bdd0 	b.w	8005914 <_fflush_r>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	bf00      	nop
 8004d78:	20000218 	.word	0x20000218
 8004d7c:	20000280 	.word	0x20000280
 8004d80:	200002e8 	.word	0x200002e8

08004d84 <global_stdio_init.part.0>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <global_stdio_init.part.0+0x30>)
 8004d88:	4c0b      	ldr	r4, [pc, #44]	@ (8004db8 <global_stdio_init.part.0+0x34>)
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <global_stdio_init.part.0+0x38>)
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	4620      	mov	r0, r4
 8004d90:	2200      	movs	r2, #0
 8004d92:	2104      	movs	r1, #4
 8004d94:	f7ff ff94 	bl	8004cc0 <std>
 8004d98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	2109      	movs	r1, #9
 8004da0:	f7ff ff8e 	bl	8004cc0 <std>
 8004da4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004da8:	2202      	movs	r2, #2
 8004daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dae:	2112      	movs	r1, #18
 8004db0:	f7ff bf86 	b.w	8004cc0 <std>
 8004db4:	20000350 	.word	0x20000350
 8004db8:	20000218 	.word	0x20000218
 8004dbc:	08004d2d 	.word	0x08004d2d

08004dc0 <__sfp_lock_acquire>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	@ (8004dc8 <__sfp_lock_acquire+0x8>)
 8004dc2:	f000 b91c 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	20000359 	.word	0x20000359

08004dcc <__sfp_lock_release>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	@ (8004dd4 <__sfp_lock_release+0x8>)
 8004dce:	f000 b917 	b.w	8005000 <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000359 	.word	0x20000359

08004dd8 <__sinit>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f7ff fff0 	bl	8004dc0 <__sfp_lock_acquire>
 8004de0:	6a23      	ldr	r3, [r4, #32]
 8004de2:	b11b      	cbz	r3, 8004dec <__sinit+0x14>
 8004de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de8:	f7ff bff0 	b.w	8004dcc <__sfp_lock_release>
 8004dec:	4b04      	ldr	r3, [pc, #16]	@ (8004e00 <__sinit+0x28>)
 8004dee:	6223      	str	r3, [r4, #32]
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <__sinit+0x2c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f5      	bne.n	8004de4 <__sinit+0xc>
 8004df8:	f7ff ffc4 	bl	8004d84 <global_stdio_init.part.0>
 8004dfc:	e7f2      	b.n	8004de4 <__sinit+0xc>
 8004dfe:	bf00      	nop
 8004e00:	08004d45 	.word	0x08004d45
 8004e04:	20000350 	.word	0x20000350

08004e08 <_fwalk_sglue>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	4688      	mov	r8, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	2600      	movs	r6, #0
 8004e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e18:	f1b9 0901 	subs.w	r9, r9, #1
 8004e1c:	d505      	bpl.n	8004e2a <_fwalk_sglue+0x22>
 8004e1e:	6824      	ldr	r4, [r4, #0]
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	d1f7      	bne.n	8004e14 <_fwalk_sglue+0xc>
 8004e24:	4630      	mov	r0, r6
 8004e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d907      	bls.n	8004e40 <_fwalk_sglue+0x38>
 8004e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e34:	3301      	adds	r3, #1
 8004e36:	d003      	beq.n	8004e40 <_fwalk_sglue+0x38>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	47c0      	blx	r8
 8004e3e:	4306      	orrs	r6, r0
 8004e40:	3568      	adds	r5, #104	@ 0x68
 8004e42:	e7e9      	b.n	8004e18 <_fwalk_sglue+0x10>

08004e44 <siprintf>:
 8004e44:	b40e      	push	{r1, r2, r3}
 8004e46:	b500      	push	{lr}
 8004e48:	b09c      	sub	sp, #112	@ 0x70
 8004e4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e4c:	9002      	str	r0, [sp, #8]
 8004e4e:	9006      	str	r0, [sp, #24]
 8004e50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e54:	4809      	ldr	r0, [pc, #36]	@ (8004e7c <siprintf+0x38>)
 8004e56:	9107      	str	r1, [sp, #28]
 8004e58:	9104      	str	r1, [sp, #16]
 8004e5a:	4909      	ldr	r1, [pc, #36]	@ (8004e80 <siprintf+0x3c>)
 8004e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e60:	9105      	str	r1, [sp, #20]
 8004e62:	6800      	ldr	r0, [r0, #0]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	a902      	add	r1, sp, #8
 8004e68:	f000 fa46 	bl	80052f8 <_svfiprintf_r>
 8004e6c:	9b02      	ldr	r3, [sp, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	b01c      	add	sp, #112	@ 0x70
 8004e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e78:	b003      	add	sp, #12
 8004e7a:	4770      	bx	lr
 8004e7c:	2000001c 	.word	0x2000001c
 8004e80:	ffff0208 	.word	0xffff0208

08004e84 <__sread>:
 8004e84:	b510      	push	{r4, lr}
 8004e86:	460c      	mov	r4, r1
 8004e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8c:	f000 f868 	bl	8004f60 <_read_r>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	bfab      	itete	ge
 8004e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e96:	89a3      	ldrhlt	r3, [r4, #12]
 8004e98:	181b      	addge	r3, r3, r0
 8004e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e9e:	bfac      	ite	ge
 8004ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ea2:	81a3      	strhlt	r3, [r4, #12]
 8004ea4:	bd10      	pop	{r4, pc}

08004ea6 <__swrite>:
 8004ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	461f      	mov	r7, r3
 8004eac:	898b      	ldrh	r3, [r1, #12]
 8004eae:	05db      	lsls	r3, r3, #23
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	d505      	bpl.n	8004ec4 <__swrite+0x1e>
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f000 f83c 	bl	8004f3c <_lseek_r>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	f000 b853 	b.w	8004f84 <_write_r>

08004ede <__sseek>:
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee6:	f000 f829 	bl	8004f3c <_lseek_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	bf15      	itete	ne
 8004ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004efa:	81a3      	strheq	r3, [r4, #12]
 8004efc:	bf18      	it	ne
 8004efe:	81a3      	strhne	r3, [r4, #12]
 8004f00:	bd10      	pop	{r4, pc}

08004f02 <__sclose>:
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 b809 	b.w	8004f1c <_close_r>

08004f0a <memset>:
 8004f0a:	4402      	add	r2, r0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d100      	bne.n	8004f14 <memset+0xa>
 8004f12:	4770      	bx	lr
 8004f14:	f803 1b01 	strb.w	r1, [r3], #1
 8004f18:	e7f9      	b.n	8004f0e <memset+0x4>
	...

08004f1c <_close_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	@ (8004f38 <_close_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc f82a 	bl	8000f80 <_close>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_close_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_close_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000354 	.word	0x20000354

08004f3c <_lseek_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	@ (8004f5c <_lseek_r+0x20>)
 8004f40:	4604      	mov	r4, r0
 8004f42:	4608      	mov	r0, r1
 8004f44:	4611      	mov	r1, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fc f83f 	bl	8000fce <_lseek>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_lseek_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_lseek_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000354 	.word	0x20000354

08004f60 <_read_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	@ (8004f80 <_read_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fb ffcd 	bl	8000f0e <_read>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_read_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_read_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000354 	.word	0x20000354

08004f84 <_write_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	@ (8004fa4 <_write_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fb ffd8 	bl	8000f48 <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_write_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_write_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000354 	.word	0x20000354

08004fa8 <__errno>:
 8004fa8:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <__errno+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	2000001c 	.word	0x2000001c

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f000 fff0 	bl	8005fac <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	080060f8 	.word	0x080060f8
 8004ff0:	080060f8 	.word	0x080060f8
 8004ff4:	080060f8 	.word	0x080060f8
 8004ff8:	080060fc 	.word	0x080060fc

08004ffc <__retarget_lock_init_recursive>:
 8004ffc:	4770      	bx	lr

08004ffe <__retarget_lock_acquire_recursive>:
 8004ffe:	4770      	bx	lr

08005000 <__retarget_lock_release_recursive>:
 8005000:	4770      	bx	lr
	...

08005004 <__assert_func>:
 8005004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005006:	4614      	mov	r4, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <__assert_func+0x2c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4605      	mov	r5, r0
 8005010:	68d8      	ldr	r0, [r3, #12]
 8005012:	b954      	cbnz	r4, 800502a <__assert_func+0x26>
 8005014:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <__assert_func+0x30>)
 8005016:	461c      	mov	r4, r3
 8005018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800501c:	9100      	str	r1, [sp, #0]
 800501e:	462b      	mov	r3, r5
 8005020:	4905      	ldr	r1, [pc, #20]	@ (8005038 <__assert_func+0x34>)
 8005022:	f000 fc9f 	bl	8005964 <fiprintf>
 8005026:	f000 fce7 	bl	80059f8 <abort>
 800502a:	4b04      	ldr	r3, [pc, #16]	@ (800503c <__assert_func+0x38>)
 800502c:	e7f4      	b.n	8005018 <__assert_func+0x14>
 800502e:	bf00      	nop
 8005030:	2000001c 	.word	0x2000001c
 8005034:	080060ba 	.word	0x080060ba
 8005038:	0800608c 	.word	0x0800608c
 800503c:	0800607f 	.word	0x0800607f

08005040 <_free_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4605      	mov	r5, r0
 8005044:	2900      	cmp	r1, #0
 8005046:	d041      	beq.n	80050cc <_free_r+0x8c>
 8005048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504c:	1f0c      	subs	r4, r1, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfb8      	it	lt
 8005052:	18e4      	addlt	r4, r4, r3
 8005054:	f000 f8e8 	bl	8005228 <__malloc_lock>
 8005058:	4a1d      	ldr	r2, [pc, #116]	@ (80050d0 <_free_r+0x90>)
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	b933      	cbnz	r3, 800506c <_free_r+0x2c>
 800505e:	6063      	str	r3, [r4, #4]
 8005060:	6014      	str	r4, [r2, #0]
 8005062:	4628      	mov	r0, r5
 8005064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005068:	f000 b8e4 	b.w	8005234 <__malloc_unlock>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d908      	bls.n	8005082 <_free_r+0x42>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	1821      	adds	r1, r4, r0
 8005074:	428b      	cmp	r3, r1
 8005076:	bf01      	itttt	eq
 8005078:	6819      	ldreq	r1, [r3, #0]
 800507a:	685b      	ldreq	r3, [r3, #4]
 800507c:	1809      	addeq	r1, r1, r0
 800507e:	6021      	streq	r1, [r4, #0]
 8005080:	e7ed      	b.n	800505e <_free_r+0x1e>
 8005082:	461a      	mov	r2, r3
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b10b      	cbz	r3, 800508c <_free_r+0x4c>
 8005088:	42a3      	cmp	r3, r4
 800508a:	d9fa      	bls.n	8005082 <_free_r+0x42>
 800508c:	6811      	ldr	r1, [r2, #0]
 800508e:	1850      	adds	r0, r2, r1
 8005090:	42a0      	cmp	r0, r4
 8005092:	d10b      	bne.n	80050ac <_free_r+0x6c>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	4401      	add	r1, r0
 8005098:	1850      	adds	r0, r2, r1
 800509a:	4283      	cmp	r3, r0
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	d1e0      	bne.n	8005062 <_free_r+0x22>
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	4408      	add	r0, r1
 80050a8:	6010      	str	r0, [r2, #0]
 80050aa:	e7da      	b.n	8005062 <_free_r+0x22>
 80050ac:	d902      	bls.n	80050b4 <_free_r+0x74>
 80050ae:	230c      	movs	r3, #12
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	e7d6      	b.n	8005062 <_free_r+0x22>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	1821      	adds	r1, r4, r0
 80050b8:	428b      	cmp	r3, r1
 80050ba:	bf04      	itt	eq
 80050bc:	6819      	ldreq	r1, [r3, #0]
 80050be:	685b      	ldreq	r3, [r3, #4]
 80050c0:	6063      	str	r3, [r4, #4]
 80050c2:	bf04      	itt	eq
 80050c4:	1809      	addeq	r1, r1, r0
 80050c6:	6021      	streq	r1, [r4, #0]
 80050c8:	6054      	str	r4, [r2, #4]
 80050ca:	e7ca      	b.n	8005062 <_free_r+0x22>
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	20000360 	.word	0x20000360

080050d4 <malloc>:
 80050d4:	4b02      	ldr	r3, [pc, #8]	@ (80050e0 <malloc+0xc>)
 80050d6:	4601      	mov	r1, r0
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f000 b825 	b.w	8005128 <_malloc_r>
 80050de:	bf00      	nop
 80050e0:	2000001c 	.word	0x2000001c

080050e4 <sbrk_aligned>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005124 <sbrk_aligned+0x40>)
 80050e8:	460c      	mov	r4, r1
 80050ea:	6831      	ldr	r1, [r6, #0]
 80050ec:	4605      	mov	r5, r0
 80050ee:	b911      	cbnz	r1, 80050f6 <sbrk_aligned+0x12>
 80050f0:	f000 fc64 	bl	80059bc <_sbrk_r>
 80050f4:	6030      	str	r0, [r6, #0]
 80050f6:	4621      	mov	r1, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 fc5f 	bl	80059bc <_sbrk_r>
 80050fe:	1c43      	adds	r3, r0, #1
 8005100:	d103      	bne.n	800510a <sbrk_aligned+0x26>
 8005102:	f04f 34ff 	mov.w	r4, #4294967295
 8005106:	4620      	mov	r0, r4
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	1cc4      	adds	r4, r0, #3
 800510c:	f024 0403 	bic.w	r4, r4, #3
 8005110:	42a0      	cmp	r0, r4
 8005112:	d0f8      	beq.n	8005106 <sbrk_aligned+0x22>
 8005114:	1a21      	subs	r1, r4, r0
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fc50 	bl	80059bc <_sbrk_r>
 800511c:	3001      	adds	r0, #1
 800511e:	d1f2      	bne.n	8005106 <sbrk_aligned+0x22>
 8005120:	e7ef      	b.n	8005102 <sbrk_aligned+0x1e>
 8005122:	bf00      	nop
 8005124:	2000035c 	.word	0x2000035c

08005128 <_malloc_r>:
 8005128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800512c:	1ccd      	adds	r5, r1, #3
 800512e:	f025 0503 	bic.w	r5, r5, #3
 8005132:	3508      	adds	r5, #8
 8005134:	2d0c      	cmp	r5, #12
 8005136:	bf38      	it	cc
 8005138:	250c      	movcc	r5, #12
 800513a:	2d00      	cmp	r5, #0
 800513c:	4606      	mov	r6, r0
 800513e:	db01      	blt.n	8005144 <_malloc_r+0x1c>
 8005140:	42a9      	cmp	r1, r5
 8005142:	d904      	bls.n	800514e <_malloc_r+0x26>
 8005144:	230c      	movs	r3, #12
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	2000      	movs	r0, #0
 800514a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800514e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005224 <_malloc_r+0xfc>
 8005152:	f000 f869 	bl	8005228 <__malloc_lock>
 8005156:	f8d8 3000 	ldr.w	r3, [r8]
 800515a:	461c      	mov	r4, r3
 800515c:	bb44      	cbnz	r4, 80051b0 <_malloc_r+0x88>
 800515e:	4629      	mov	r1, r5
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff ffbf 	bl	80050e4 <sbrk_aligned>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	4604      	mov	r4, r0
 800516a:	d158      	bne.n	800521e <_malloc_r+0xf6>
 800516c:	f8d8 4000 	ldr.w	r4, [r8]
 8005170:	4627      	mov	r7, r4
 8005172:	2f00      	cmp	r7, #0
 8005174:	d143      	bne.n	80051fe <_malloc_r+0xd6>
 8005176:	2c00      	cmp	r4, #0
 8005178:	d04b      	beq.n	8005212 <_malloc_r+0xea>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	4639      	mov	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	eb04 0903 	add.w	r9, r4, r3
 8005184:	f000 fc1a 	bl	80059bc <_sbrk_r>
 8005188:	4581      	cmp	r9, r0
 800518a:	d142      	bne.n	8005212 <_malloc_r+0xea>
 800518c:	6821      	ldr	r1, [r4, #0]
 800518e:	1a6d      	subs	r5, r5, r1
 8005190:	4629      	mov	r1, r5
 8005192:	4630      	mov	r0, r6
 8005194:	f7ff ffa6 	bl	80050e4 <sbrk_aligned>
 8005198:	3001      	adds	r0, #1
 800519a:	d03a      	beq.n	8005212 <_malloc_r+0xea>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	442b      	add	r3, r5
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	f8d8 3000 	ldr.w	r3, [r8]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	bb62      	cbnz	r2, 8005204 <_malloc_r+0xdc>
 80051aa:	f8c8 7000 	str.w	r7, [r8]
 80051ae:	e00f      	b.n	80051d0 <_malloc_r+0xa8>
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	1b52      	subs	r2, r2, r5
 80051b4:	d420      	bmi.n	80051f8 <_malloc_r+0xd0>
 80051b6:	2a0b      	cmp	r2, #11
 80051b8:	d917      	bls.n	80051ea <_malloc_r+0xc2>
 80051ba:	1961      	adds	r1, r4, r5
 80051bc:	42a3      	cmp	r3, r4
 80051be:	6025      	str	r5, [r4, #0]
 80051c0:	bf18      	it	ne
 80051c2:	6059      	strne	r1, [r3, #4]
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	bf08      	it	eq
 80051c8:	f8c8 1000 	streq.w	r1, [r8]
 80051cc:	5162      	str	r2, [r4, r5]
 80051ce:	604b      	str	r3, [r1, #4]
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 f82f 	bl	8005234 <__malloc_unlock>
 80051d6:	f104 000b 	add.w	r0, r4, #11
 80051da:	1d23      	adds	r3, r4, #4
 80051dc:	f020 0007 	bic.w	r0, r0, #7
 80051e0:	1ac2      	subs	r2, r0, r3
 80051e2:	bf1c      	itt	ne
 80051e4:	1a1b      	subne	r3, r3, r0
 80051e6:	50a3      	strne	r3, [r4, r2]
 80051e8:	e7af      	b.n	800514a <_malloc_r+0x22>
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	bf0c      	ite	eq
 80051f0:	f8c8 2000 	streq.w	r2, [r8]
 80051f4:	605a      	strne	r2, [r3, #4]
 80051f6:	e7eb      	b.n	80051d0 <_malloc_r+0xa8>
 80051f8:	4623      	mov	r3, r4
 80051fa:	6864      	ldr	r4, [r4, #4]
 80051fc:	e7ae      	b.n	800515c <_malloc_r+0x34>
 80051fe:	463c      	mov	r4, r7
 8005200:	687f      	ldr	r7, [r7, #4]
 8005202:	e7b6      	b.n	8005172 <_malloc_r+0x4a>
 8005204:	461a      	mov	r2, r3
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	42a3      	cmp	r3, r4
 800520a:	d1fb      	bne.n	8005204 <_malloc_r+0xdc>
 800520c:	2300      	movs	r3, #0
 800520e:	6053      	str	r3, [r2, #4]
 8005210:	e7de      	b.n	80051d0 <_malloc_r+0xa8>
 8005212:	230c      	movs	r3, #12
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	4630      	mov	r0, r6
 8005218:	f000 f80c 	bl	8005234 <__malloc_unlock>
 800521c:	e794      	b.n	8005148 <_malloc_r+0x20>
 800521e:	6005      	str	r5, [r0, #0]
 8005220:	e7d6      	b.n	80051d0 <_malloc_r+0xa8>
 8005222:	bf00      	nop
 8005224:	20000360 	.word	0x20000360

08005228 <__malloc_lock>:
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <__malloc_lock+0x8>)
 800522a:	f7ff bee8 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20000358 	.word	0x20000358

08005234 <__malloc_unlock>:
 8005234:	4801      	ldr	r0, [pc, #4]	@ (800523c <__malloc_unlock+0x8>)
 8005236:	f7ff bee3 	b.w	8005000 <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20000358 	.word	0x20000358

08005240 <__ssputs_r>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	688e      	ldr	r6, [r1, #8]
 8005246:	461f      	mov	r7, r3
 8005248:	42be      	cmp	r6, r7
 800524a:	680b      	ldr	r3, [r1, #0]
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	d82d      	bhi.n	80052b0 <__ssputs_r+0x70>
 8005254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005258:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800525c:	d026      	beq.n	80052ac <__ssputs_r+0x6c>
 800525e:	6965      	ldr	r5, [r4, #20]
 8005260:	6909      	ldr	r1, [r1, #16]
 8005262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005266:	eba3 0901 	sub.w	r9, r3, r1
 800526a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800526e:	1c7b      	adds	r3, r7, #1
 8005270:	444b      	add	r3, r9
 8005272:	106d      	asrs	r5, r5, #1
 8005274:	429d      	cmp	r5, r3
 8005276:	bf38      	it	cc
 8005278:	461d      	movcc	r5, r3
 800527a:	0553      	lsls	r3, r2, #21
 800527c:	d527      	bpl.n	80052ce <__ssputs_r+0x8e>
 800527e:	4629      	mov	r1, r5
 8005280:	f7ff ff52 	bl	8005128 <_malloc_r>
 8005284:	4606      	mov	r6, r0
 8005286:	b360      	cbz	r0, 80052e2 <__ssputs_r+0xa2>
 8005288:	6921      	ldr	r1, [r4, #16]
 800528a:	464a      	mov	r2, r9
 800528c:	f000 fba6 	bl	80059dc <memcpy>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	6126      	str	r6, [r4, #16]
 800529e:	6165      	str	r5, [r4, #20]
 80052a0:	444e      	add	r6, r9
 80052a2:	eba5 0509 	sub.w	r5, r5, r9
 80052a6:	6026      	str	r6, [r4, #0]
 80052a8:	60a5      	str	r5, [r4, #8]
 80052aa:	463e      	mov	r6, r7
 80052ac:	42be      	cmp	r6, r7
 80052ae:	d900      	bls.n	80052b2 <__ssputs_r+0x72>
 80052b0:	463e      	mov	r6, r7
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	4632      	mov	r2, r6
 80052b6:	4641      	mov	r1, r8
 80052b8:	f000 fb66 	bl	8005988 <memmove>
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	1b9b      	subs	r3, r3, r6
 80052c0:	60a3      	str	r3, [r4, #8]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	4433      	add	r3, r6
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	2000      	movs	r0, #0
 80052ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ce:	462a      	mov	r2, r5
 80052d0:	f000 fb99 	bl	8005a06 <_realloc_r>
 80052d4:	4606      	mov	r6, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d1e0      	bne.n	800529c <__ssputs_r+0x5c>
 80052da:	6921      	ldr	r1, [r4, #16]
 80052dc:	4650      	mov	r0, sl
 80052de:	f7ff feaf 	bl	8005040 <_free_r>
 80052e2:	230c      	movs	r3, #12
 80052e4:	f8ca 3000 	str.w	r3, [sl]
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	e7e9      	b.n	80052ca <__ssputs_r+0x8a>
	...

080052f8 <_svfiprintf_r>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	4698      	mov	r8, r3
 80052fe:	898b      	ldrh	r3, [r1, #12]
 8005300:	061b      	lsls	r3, r3, #24
 8005302:	b09d      	sub	sp, #116	@ 0x74
 8005304:	4607      	mov	r7, r0
 8005306:	460d      	mov	r5, r1
 8005308:	4614      	mov	r4, r2
 800530a:	d510      	bpl.n	800532e <_svfiprintf_r+0x36>
 800530c:	690b      	ldr	r3, [r1, #16]
 800530e:	b973      	cbnz	r3, 800532e <_svfiprintf_r+0x36>
 8005310:	2140      	movs	r1, #64	@ 0x40
 8005312:	f7ff ff09 	bl	8005128 <_malloc_r>
 8005316:	6028      	str	r0, [r5, #0]
 8005318:	6128      	str	r0, [r5, #16]
 800531a:	b930      	cbnz	r0, 800532a <_svfiprintf_r+0x32>
 800531c:	230c      	movs	r3, #12
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	b01d      	add	sp, #116	@ 0x74
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	2340      	movs	r3, #64	@ 0x40
 800532c:	616b      	str	r3, [r5, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	9309      	str	r3, [sp, #36]	@ 0x24
 8005332:	2320      	movs	r3, #32
 8005334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005338:	f8cd 800c 	str.w	r8, [sp, #12]
 800533c:	2330      	movs	r3, #48	@ 0x30
 800533e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054dc <_svfiprintf_r+0x1e4>
 8005342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005346:	f04f 0901 	mov.w	r9, #1
 800534a:	4623      	mov	r3, r4
 800534c:	469a      	mov	sl, r3
 800534e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005352:	b10a      	cbz	r2, 8005358 <_svfiprintf_r+0x60>
 8005354:	2a25      	cmp	r2, #37	@ 0x25
 8005356:	d1f9      	bne.n	800534c <_svfiprintf_r+0x54>
 8005358:	ebba 0b04 	subs.w	fp, sl, r4
 800535c:	d00b      	beq.n	8005376 <_svfiprintf_r+0x7e>
 800535e:	465b      	mov	r3, fp
 8005360:	4622      	mov	r2, r4
 8005362:	4629      	mov	r1, r5
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ff6b 	bl	8005240 <__ssputs_r>
 800536a:	3001      	adds	r0, #1
 800536c:	f000 80a7 	beq.w	80054be <_svfiprintf_r+0x1c6>
 8005370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005372:	445a      	add	r2, fp
 8005374:	9209      	str	r2, [sp, #36]	@ 0x24
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 809f 	beq.w	80054be <_svfiprintf_r+0x1c6>
 8005380:	2300      	movs	r3, #0
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800538a:	f10a 0a01 	add.w	sl, sl, #1
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	9307      	str	r3, [sp, #28]
 8005392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005396:	931a      	str	r3, [sp, #104]	@ 0x68
 8005398:	4654      	mov	r4, sl
 800539a:	2205      	movs	r2, #5
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	484e      	ldr	r0, [pc, #312]	@ (80054dc <_svfiprintf_r+0x1e4>)
 80053a2:	f7fa ff45 	bl	8000230 <memchr>
 80053a6:	9a04      	ldr	r2, [sp, #16]
 80053a8:	b9d8      	cbnz	r0, 80053e2 <_svfiprintf_r+0xea>
 80053aa:	06d0      	lsls	r0, r2, #27
 80053ac:	bf44      	itt	mi
 80053ae:	2320      	movmi	r3, #32
 80053b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053b4:	0711      	lsls	r1, r2, #28
 80053b6:	bf44      	itt	mi
 80053b8:	232b      	movmi	r3, #43	@ 0x2b
 80053ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053be:	f89a 3000 	ldrb.w	r3, [sl]
 80053c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c4:	d015      	beq.n	80053f2 <_svfiprintf_r+0xfa>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	4654      	mov	r4, sl
 80053ca:	2000      	movs	r0, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4621      	mov	r1, r4
 80053d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d6:	3b30      	subs	r3, #48	@ 0x30
 80053d8:	2b09      	cmp	r3, #9
 80053da:	d94b      	bls.n	8005474 <_svfiprintf_r+0x17c>
 80053dc:	b1b0      	cbz	r0, 800540c <_svfiprintf_r+0x114>
 80053de:	9207      	str	r2, [sp, #28]
 80053e0:	e014      	b.n	800540c <_svfiprintf_r+0x114>
 80053e2:	eba0 0308 	sub.w	r3, r0, r8
 80053e6:	fa09 f303 	lsl.w	r3, r9, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	46a2      	mov	sl, r4
 80053f0:	e7d2      	b.n	8005398 <_svfiprintf_r+0xa0>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9103      	str	r1, [sp, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfbb      	ittet	lt
 80053fe:	425b      	neglt	r3, r3
 8005400:	f042 0202 	orrlt.w	r2, r2, #2
 8005404:	9307      	strge	r3, [sp, #28]
 8005406:	9307      	strlt	r3, [sp, #28]
 8005408:	bfb8      	it	lt
 800540a:	9204      	strlt	r2, [sp, #16]
 800540c:	7823      	ldrb	r3, [r4, #0]
 800540e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005410:	d10a      	bne.n	8005428 <_svfiprintf_r+0x130>
 8005412:	7863      	ldrb	r3, [r4, #1]
 8005414:	2b2a      	cmp	r3, #42	@ 0x2a
 8005416:	d132      	bne.n	800547e <_svfiprintf_r+0x186>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	9203      	str	r2, [sp, #12]
 8005420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005424:	3402      	adds	r4, #2
 8005426:	9305      	str	r3, [sp, #20]
 8005428:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054ec <_svfiprintf_r+0x1f4>
 800542c:	7821      	ldrb	r1, [r4, #0]
 800542e:	2203      	movs	r2, #3
 8005430:	4650      	mov	r0, sl
 8005432:	f7fa fefd 	bl	8000230 <memchr>
 8005436:	b138      	cbz	r0, 8005448 <_svfiprintf_r+0x150>
 8005438:	9b04      	ldr	r3, [sp, #16]
 800543a:	eba0 000a 	sub.w	r0, r0, sl
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	4082      	lsls	r2, r0
 8005442:	4313      	orrs	r3, r2
 8005444:	3401      	adds	r4, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544c:	4824      	ldr	r0, [pc, #144]	@ (80054e0 <_svfiprintf_r+0x1e8>)
 800544e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005452:	2206      	movs	r2, #6
 8005454:	f7fa feec 	bl	8000230 <memchr>
 8005458:	2800      	cmp	r0, #0
 800545a:	d036      	beq.n	80054ca <_svfiprintf_r+0x1d2>
 800545c:	4b21      	ldr	r3, [pc, #132]	@ (80054e4 <_svfiprintf_r+0x1ec>)
 800545e:	bb1b      	cbnz	r3, 80054a8 <_svfiprintf_r+0x1b0>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	3307      	adds	r3, #7
 8005464:	f023 0307 	bic.w	r3, r3, #7
 8005468:	3308      	adds	r3, #8
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546e:	4433      	add	r3, r6
 8005470:	9309      	str	r3, [sp, #36]	@ 0x24
 8005472:	e76a      	b.n	800534a <_svfiprintf_r+0x52>
 8005474:	fb0c 3202 	mla	r2, ip, r2, r3
 8005478:	460c      	mov	r4, r1
 800547a:	2001      	movs	r0, #1
 800547c:	e7a8      	b.n	80053d0 <_svfiprintf_r+0xd8>
 800547e:	2300      	movs	r3, #0
 8005480:	3401      	adds	r4, #1
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	4619      	mov	r1, r3
 8005486:	f04f 0c0a 	mov.w	ip, #10
 800548a:	4620      	mov	r0, r4
 800548c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005490:	3a30      	subs	r2, #48	@ 0x30
 8005492:	2a09      	cmp	r2, #9
 8005494:	d903      	bls.n	800549e <_svfiprintf_r+0x1a6>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0c6      	beq.n	8005428 <_svfiprintf_r+0x130>
 800549a:	9105      	str	r1, [sp, #20]
 800549c:	e7c4      	b.n	8005428 <_svfiprintf_r+0x130>
 800549e:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a2:	4604      	mov	r4, r0
 80054a4:	2301      	movs	r3, #1
 80054a6:	e7f0      	b.n	800548a <_svfiprintf_r+0x192>
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	462a      	mov	r2, r5
 80054ae:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <_svfiprintf_r+0x1f0>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	4638      	mov	r0, r7
 80054b4:	f3af 8000 	nop.w
 80054b8:	1c42      	adds	r2, r0, #1
 80054ba:	4606      	mov	r6, r0
 80054bc:	d1d6      	bne.n	800546c <_svfiprintf_r+0x174>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	065b      	lsls	r3, r3, #25
 80054c2:	f53f af2d 	bmi.w	8005320 <_svfiprintf_r+0x28>
 80054c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054c8:	e72c      	b.n	8005324 <_svfiprintf_r+0x2c>
 80054ca:	ab03      	add	r3, sp, #12
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	462a      	mov	r2, r5
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <_svfiprintf_r+0x1f0>)
 80054d2:	a904      	add	r1, sp, #16
 80054d4:	4638      	mov	r0, r7
 80054d6:	f000 f879 	bl	80055cc <_printf_i>
 80054da:	e7ed      	b.n	80054b8 <_svfiprintf_r+0x1c0>
 80054dc:	080060bb 	.word	0x080060bb
 80054e0:	080060c5 	.word	0x080060c5
 80054e4:	00000000 	.word	0x00000000
 80054e8:	08005241 	.word	0x08005241
 80054ec:	080060c1 	.word	0x080060c1

080054f0 <_printf_common>:
 80054f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	4616      	mov	r6, r2
 80054f6:	4698      	mov	r8, r3
 80054f8:	688a      	ldr	r2, [r1, #8]
 80054fa:	690b      	ldr	r3, [r1, #16]
 80054fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005500:	4293      	cmp	r3, r2
 8005502:	bfb8      	it	lt
 8005504:	4613      	movlt	r3, r2
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800550c:	4607      	mov	r7, r0
 800550e:	460c      	mov	r4, r1
 8005510:	b10a      	cbz	r2, 8005516 <_printf_common+0x26>
 8005512:	3301      	adds	r3, #1
 8005514:	6033      	str	r3, [r6, #0]
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	0699      	lsls	r1, r3, #26
 800551a:	bf42      	ittt	mi
 800551c:	6833      	ldrmi	r3, [r6, #0]
 800551e:	3302      	addmi	r3, #2
 8005520:	6033      	strmi	r3, [r6, #0]
 8005522:	6825      	ldr	r5, [r4, #0]
 8005524:	f015 0506 	ands.w	r5, r5, #6
 8005528:	d106      	bne.n	8005538 <_printf_common+0x48>
 800552a:	f104 0a19 	add.w	sl, r4, #25
 800552e:	68e3      	ldr	r3, [r4, #12]
 8005530:	6832      	ldr	r2, [r6, #0]
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	42ab      	cmp	r3, r5
 8005536:	dc26      	bgt.n	8005586 <_printf_common+0x96>
 8005538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	3b00      	subs	r3, #0
 8005540:	bf18      	it	ne
 8005542:	2301      	movne	r3, #1
 8005544:	0692      	lsls	r2, r2, #26
 8005546:	d42b      	bmi.n	80055a0 <_printf_common+0xb0>
 8005548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800554c:	4641      	mov	r1, r8
 800554e:	4638      	mov	r0, r7
 8005550:	47c8      	blx	r9
 8005552:	3001      	adds	r0, #1
 8005554:	d01e      	beq.n	8005594 <_printf_common+0xa4>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	6922      	ldr	r2, [r4, #16]
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	2b04      	cmp	r3, #4
 8005560:	bf02      	ittt	eq
 8005562:	68e5      	ldreq	r5, [r4, #12]
 8005564:	6833      	ldreq	r3, [r6, #0]
 8005566:	1aed      	subeq	r5, r5, r3
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	bf0c      	ite	eq
 800556c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005570:	2500      	movne	r5, #0
 8005572:	4293      	cmp	r3, r2
 8005574:	bfc4      	itt	gt
 8005576:	1a9b      	subgt	r3, r3, r2
 8005578:	18ed      	addgt	r5, r5, r3
 800557a:	2600      	movs	r6, #0
 800557c:	341a      	adds	r4, #26
 800557e:	42b5      	cmp	r5, r6
 8005580:	d11a      	bne.n	80055b8 <_printf_common+0xc8>
 8005582:	2000      	movs	r0, #0
 8005584:	e008      	b.n	8005598 <_printf_common+0xa8>
 8005586:	2301      	movs	r3, #1
 8005588:	4652      	mov	r2, sl
 800558a:	4641      	mov	r1, r8
 800558c:	4638      	mov	r0, r7
 800558e:	47c8      	blx	r9
 8005590:	3001      	adds	r0, #1
 8005592:	d103      	bne.n	800559c <_printf_common+0xac>
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	3501      	adds	r5, #1
 800559e:	e7c6      	b.n	800552e <_printf_common+0x3e>
 80055a0:	18e1      	adds	r1, r4, r3
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	2030      	movs	r0, #48	@ 0x30
 80055a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055aa:	4422      	add	r2, r4
 80055ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055b4:	3302      	adds	r3, #2
 80055b6:	e7c7      	b.n	8005548 <_printf_common+0x58>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4622      	mov	r2, r4
 80055bc:	4641      	mov	r1, r8
 80055be:	4638      	mov	r0, r7
 80055c0:	47c8      	blx	r9
 80055c2:	3001      	adds	r0, #1
 80055c4:	d0e6      	beq.n	8005594 <_printf_common+0xa4>
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7d9      	b.n	800557e <_printf_common+0x8e>
	...

080055cc <_printf_i>:
 80055cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	7e0f      	ldrb	r7, [r1, #24]
 80055d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055d4:	2f78      	cmp	r7, #120	@ 0x78
 80055d6:	4691      	mov	r9, r2
 80055d8:	4680      	mov	r8, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	469a      	mov	sl, r3
 80055de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055e2:	d807      	bhi.n	80055f4 <_printf_i+0x28>
 80055e4:	2f62      	cmp	r7, #98	@ 0x62
 80055e6:	d80a      	bhi.n	80055fe <_printf_i+0x32>
 80055e8:	2f00      	cmp	r7, #0
 80055ea:	f000 80d2 	beq.w	8005792 <_printf_i+0x1c6>
 80055ee:	2f58      	cmp	r7, #88	@ 0x58
 80055f0:	f000 80b9 	beq.w	8005766 <_printf_i+0x19a>
 80055f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055fc:	e03a      	b.n	8005674 <_printf_i+0xa8>
 80055fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005602:	2b15      	cmp	r3, #21
 8005604:	d8f6      	bhi.n	80055f4 <_printf_i+0x28>
 8005606:	a101      	add	r1, pc, #4	@ (adr r1, 800560c <_printf_i+0x40>)
 8005608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800560c:	08005665 	.word	0x08005665
 8005610:	08005679 	.word	0x08005679
 8005614:	080055f5 	.word	0x080055f5
 8005618:	080055f5 	.word	0x080055f5
 800561c:	080055f5 	.word	0x080055f5
 8005620:	080055f5 	.word	0x080055f5
 8005624:	08005679 	.word	0x08005679
 8005628:	080055f5 	.word	0x080055f5
 800562c:	080055f5 	.word	0x080055f5
 8005630:	080055f5 	.word	0x080055f5
 8005634:	080055f5 	.word	0x080055f5
 8005638:	08005779 	.word	0x08005779
 800563c:	080056a3 	.word	0x080056a3
 8005640:	08005733 	.word	0x08005733
 8005644:	080055f5 	.word	0x080055f5
 8005648:	080055f5 	.word	0x080055f5
 800564c:	0800579b 	.word	0x0800579b
 8005650:	080055f5 	.word	0x080055f5
 8005654:	080056a3 	.word	0x080056a3
 8005658:	080055f5 	.word	0x080055f5
 800565c:	080055f5 	.word	0x080055f5
 8005660:	0800573b 	.word	0x0800573b
 8005664:	6833      	ldr	r3, [r6, #0]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6032      	str	r2, [r6, #0]
 800566c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005674:	2301      	movs	r3, #1
 8005676:	e09d      	b.n	80057b4 <_printf_i+0x1e8>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	6820      	ldr	r0, [r4, #0]
 800567c:	1d19      	adds	r1, r3, #4
 800567e:	6031      	str	r1, [r6, #0]
 8005680:	0606      	lsls	r6, r0, #24
 8005682:	d501      	bpl.n	8005688 <_printf_i+0xbc>
 8005684:	681d      	ldr	r5, [r3, #0]
 8005686:	e003      	b.n	8005690 <_printf_i+0xc4>
 8005688:	0645      	lsls	r5, r0, #25
 800568a:	d5fb      	bpl.n	8005684 <_printf_i+0xb8>
 800568c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005690:	2d00      	cmp	r5, #0
 8005692:	da03      	bge.n	800569c <_printf_i+0xd0>
 8005694:	232d      	movs	r3, #45	@ 0x2d
 8005696:	426d      	negs	r5, r5
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800569c:	4859      	ldr	r0, [pc, #356]	@ (8005804 <_printf_i+0x238>)
 800569e:	230a      	movs	r3, #10
 80056a0:	e011      	b.n	80056c6 <_printf_i+0xfa>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	0608      	lsls	r0, r1, #24
 80056a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80056ac:	d402      	bmi.n	80056b4 <_printf_i+0xe8>
 80056ae:	0649      	lsls	r1, r1, #25
 80056b0:	bf48      	it	mi
 80056b2:	b2ad      	uxthmi	r5, r5
 80056b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80056b6:	4853      	ldr	r0, [pc, #332]	@ (8005804 <_printf_i+0x238>)
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	bf14      	ite	ne
 80056bc:	230a      	movne	r3, #10
 80056be:	2308      	moveq	r3, #8
 80056c0:	2100      	movs	r1, #0
 80056c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056c6:	6866      	ldr	r6, [r4, #4]
 80056c8:	60a6      	str	r6, [r4, #8]
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	bfa2      	ittt	ge
 80056ce:	6821      	ldrge	r1, [r4, #0]
 80056d0:	f021 0104 	bicge.w	r1, r1, #4
 80056d4:	6021      	strge	r1, [r4, #0]
 80056d6:	b90d      	cbnz	r5, 80056dc <_printf_i+0x110>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	d04b      	beq.n	8005774 <_printf_i+0x1a8>
 80056dc:	4616      	mov	r6, r2
 80056de:	fbb5 f1f3 	udiv	r1, r5, r3
 80056e2:	fb03 5711 	mls	r7, r3, r1, r5
 80056e6:	5dc7      	ldrb	r7, [r0, r7]
 80056e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ec:	462f      	mov	r7, r5
 80056ee:	42bb      	cmp	r3, r7
 80056f0:	460d      	mov	r5, r1
 80056f2:	d9f4      	bls.n	80056de <_printf_i+0x112>
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d10b      	bne.n	8005710 <_printf_i+0x144>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	07df      	lsls	r7, r3, #31
 80056fc:	d508      	bpl.n	8005710 <_printf_i+0x144>
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	6861      	ldr	r1, [r4, #4]
 8005702:	4299      	cmp	r1, r3
 8005704:	bfde      	ittt	le
 8005706:	2330      	movle	r3, #48	@ 0x30
 8005708:	f806 3c01 	strble.w	r3, [r6, #-1]
 800570c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005710:	1b92      	subs	r2, r2, r6
 8005712:	6122      	str	r2, [r4, #16]
 8005714:	f8cd a000 	str.w	sl, [sp]
 8005718:	464b      	mov	r3, r9
 800571a:	aa03      	add	r2, sp, #12
 800571c:	4621      	mov	r1, r4
 800571e:	4640      	mov	r0, r8
 8005720:	f7ff fee6 	bl	80054f0 <_printf_common>
 8005724:	3001      	adds	r0, #1
 8005726:	d14a      	bne.n	80057be <_printf_i+0x1f2>
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	b004      	add	sp, #16
 800572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	4833      	ldr	r0, [pc, #204]	@ (8005808 <_printf_i+0x23c>)
 800573c:	2778      	movs	r7, #120	@ 0x78
 800573e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	6831      	ldr	r1, [r6, #0]
 8005746:	061f      	lsls	r7, r3, #24
 8005748:	f851 5b04 	ldr.w	r5, [r1], #4
 800574c:	d402      	bmi.n	8005754 <_printf_i+0x188>
 800574e:	065f      	lsls	r7, r3, #25
 8005750:	bf48      	it	mi
 8005752:	b2ad      	uxthmi	r5, r5
 8005754:	6031      	str	r1, [r6, #0]
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	bf44      	itt	mi
 800575a:	f043 0320 	orrmi.w	r3, r3, #32
 800575e:	6023      	strmi	r3, [r4, #0]
 8005760:	b11d      	cbz	r5, 800576a <_printf_i+0x19e>
 8005762:	2310      	movs	r3, #16
 8005764:	e7ac      	b.n	80056c0 <_printf_i+0xf4>
 8005766:	4827      	ldr	r0, [pc, #156]	@ (8005804 <_printf_i+0x238>)
 8005768:	e7e9      	b.n	800573e <_printf_i+0x172>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	f023 0320 	bic.w	r3, r3, #32
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	e7f6      	b.n	8005762 <_printf_i+0x196>
 8005774:	4616      	mov	r6, r2
 8005776:	e7bd      	b.n	80056f4 <_printf_i+0x128>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	6961      	ldr	r1, [r4, #20]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6030      	str	r0, [r6, #0]
 8005782:	062e      	lsls	r6, r5, #24
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	d501      	bpl.n	800578c <_printf_i+0x1c0>
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0x1c6>
 800578c:	0668      	lsls	r0, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0x1bc>
 8005790:	8019      	strh	r1, [r3, #0]
 8005792:	2300      	movs	r3, #0
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	4616      	mov	r6, r2
 8005798:	e7bc      	b.n	8005714 <_printf_i+0x148>
 800579a:	6833      	ldr	r3, [r6, #0]
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	6032      	str	r2, [r6, #0]
 80057a0:	681e      	ldr	r6, [r3, #0]
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	2100      	movs	r1, #0
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7fa fd42 	bl	8000230 <memchr>
 80057ac:	b108      	cbz	r0, 80057b2 <_printf_i+0x1e6>
 80057ae:	1b80      	subs	r0, r0, r6
 80057b0:	6060      	str	r0, [r4, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	2300      	movs	r3, #0
 80057b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057bc:	e7aa      	b.n	8005714 <_printf_i+0x148>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d0ad      	beq.n	8005728 <_printf_i+0x15c>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	079b      	lsls	r3, r3, #30
 80057d0:	d413      	bmi.n	80057fa <_printf_i+0x22e>
 80057d2:	68e0      	ldr	r0, [r4, #12]
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	4298      	cmp	r0, r3
 80057d8:	bfb8      	it	lt
 80057da:	4618      	movlt	r0, r3
 80057dc:	e7a6      	b.n	800572c <_printf_i+0x160>
 80057de:	2301      	movs	r3, #1
 80057e0:	4632      	mov	r2, r6
 80057e2:	4649      	mov	r1, r9
 80057e4:	4640      	mov	r0, r8
 80057e6:	47d0      	blx	sl
 80057e8:	3001      	adds	r0, #1
 80057ea:	d09d      	beq.n	8005728 <_printf_i+0x15c>
 80057ec:	3501      	adds	r5, #1
 80057ee:	68e3      	ldr	r3, [r4, #12]
 80057f0:	9903      	ldr	r1, [sp, #12]
 80057f2:	1a5b      	subs	r3, r3, r1
 80057f4:	42ab      	cmp	r3, r5
 80057f6:	dcf2      	bgt.n	80057de <_printf_i+0x212>
 80057f8:	e7eb      	b.n	80057d2 <_printf_i+0x206>
 80057fa:	2500      	movs	r5, #0
 80057fc:	f104 0619 	add.w	r6, r4, #25
 8005800:	e7f5      	b.n	80057ee <_printf_i+0x222>
 8005802:	bf00      	nop
 8005804:	080060cc 	.word	0x080060cc
 8005808:	080060dd 	.word	0x080060dd

0800580c <__sflush_r>:
 800580c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005814:	0716      	lsls	r6, r2, #28
 8005816:	4605      	mov	r5, r0
 8005818:	460c      	mov	r4, r1
 800581a:	d454      	bmi.n	80058c6 <__sflush_r+0xba>
 800581c:	684b      	ldr	r3, [r1, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	dc02      	bgt.n	8005828 <__sflush_r+0x1c>
 8005822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	dd48      	ble.n	80058ba <__sflush_r+0xae>
 8005828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800582a:	2e00      	cmp	r6, #0
 800582c:	d045      	beq.n	80058ba <__sflush_r+0xae>
 800582e:	2300      	movs	r3, #0
 8005830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005834:	682f      	ldr	r7, [r5, #0]
 8005836:	6a21      	ldr	r1, [r4, #32]
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	d030      	beq.n	800589e <__sflush_r+0x92>
 800583c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	0759      	lsls	r1, r3, #29
 8005842:	d505      	bpl.n	8005850 <__sflush_r+0x44>
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800584a:	b10b      	cbz	r3, 8005850 <__sflush_r+0x44>
 800584c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	2300      	movs	r3, #0
 8005852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005854:	6a21      	ldr	r1, [r4, #32]
 8005856:	4628      	mov	r0, r5
 8005858:	47b0      	blx	r6
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	d106      	bne.n	800586e <__sflush_r+0x62>
 8005860:	6829      	ldr	r1, [r5, #0]
 8005862:	291d      	cmp	r1, #29
 8005864:	d82b      	bhi.n	80058be <__sflush_r+0xb2>
 8005866:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <__sflush_r+0x104>)
 8005868:	410a      	asrs	r2, r1
 800586a:	07d6      	lsls	r6, r2, #31
 800586c:	d427      	bmi.n	80058be <__sflush_r+0xb2>
 800586e:	2200      	movs	r2, #0
 8005870:	6062      	str	r2, [r4, #4]
 8005872:	04d9      	lsls	r1, r3, #19
 8005874:	6922      	ldr	r2, [r4, #16]
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	d504      	bpl.n	8005884 <__sflush_r+0x78>
 800587a:	1c42      	adds	r2, r0, #1
 800587c:	d101      	bne.n	8005882 <__sflush_r+0x76>
 800587e:	682b      	ldr	r3, [r5, #0]
 8005880:	b903      	cbnz	r3, 8005884 <__sflush_r+0x78>
 8005882:	6560      	str	r0, [r4, #84]	@ 0x54
 8005884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005886:	602f      	str	r7, [r5, #0]
 8005888:	b1b9      	cbz	r1, 80058ba <__sflush_r+0xae>
 800588a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800588e:	4299      	cmp	r1, r3
 8005890:	d002      	beq.n	8005898 <__sflush_r+0x8c>
 8005892:	4628      	mov	r0, r5
 8005894:	f7ff fbd4 	bl	8005040 <_free_r>
 8005898:	2300      	movs	r3, #0
 800589a:	6363      	str	r3, [r4, #52]	@ 0x34
 800589c:	e00d      	b.n	80058ba <__sflush_r+0xae>
 800589e:	2301      	movs	r3, #1
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b0      	blx	r6
 80058a4:	4602      	mov	r2, r0
 80058a6:	1c50      	adds	r0, r2, #1
 80058a8:	d1c9      	bne.n	800583e <__sflush_r+0x32>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0c6      	beq.n	800583e <__sflush_r+0x32>
 80058b0:	2b1d      	cmp	r3, #29
 80058b2:	d001      	beq.n	80058b8 <__sflush_r+0xac>
 80058b4:	2b16      	cmp	r3, #22
 80058b6:	d11e      	bne.n	80058f6 <__sflush_r+0xea>
 80058b8:	602f      	str	r7, [r5, #0]
 80058ba:	2000      	movs	r0, #0
 80058bc:	e022      	b.n	8005904 <__sflush_r+0xf8>
 80058be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	e01b      	b.n	80058fe <__sflush_r+0xf2>
 80058c6:	690f      	ldr	r7, [r1, #16]
 80058c8:	2f00      	cmp	r7, #0
 80058ca:	d0f6      	beq.n	80058ba <__sflush_r+0xae>
 80058cc:	0793      	lsls	r3, r2, #30
 80058ce:	680e      	ldr	r6, [r1, #0]
 80058d0:	bf08      	it	eq
 80058d2:	694b      	ldreq	r3, [r1, #20]
 80058d4:	600f      	str	r7, [r1, #0]
 80058d6:	bf18      	it	ne
 80058d8:	2300      	movne	r3, #0
 80058da:	eba6 0807 	sub.w	r8, r6, r7
 80058de:	608b      	str	r3, [r1, #8]
 80058e0:	f1b8 0f00 	cmp.w	r8, #0
 80058e4:	dde9      	ble.n	80058ba <__sflush_r+0xae>
 80058e6:	6a21      	ldr	r1, [r4, #32]
 80058e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058ea:	4643      	mov	r3, r8
 80058ec:	463a      	mov	r2, r7
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b0      	blx	r6
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dc08      	bgt.n	8005908 <__sflush_r+0xfc>
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	4407      	add	r7, r0
 800590a:	eba8 0800 	sub.w	r8, r8, r0
 800590e:	e7e7      	b.n	80058e0 <__sflush_r+0xd4>
 8005910:	dfbffffe 	.word	0xdfbffffe

08005914 <_fflush_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	690b      	ldr	r3, [r1, #16]
 8005918:	4605      	mov	r5, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b913      	cbnz	r3, 8005924 <_fflush_r+0x10>
 800591e:	2500      	movs	r5, #0
 8005920:	4628      	mov	r0, r5
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	b118      	cbz	r0, 800592e <_fflush_r+0x1a>
 8005926:	6a03      	ldr	r3, [r0, #32]
 8005928:	b90b      	cbnz	r3, 800592e <_fflush_r+0x1a>
 800592a:	f7ff fa55 	bl	8004dd8 <__sinit>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f3      	beq.n	800591e <_fflush_r+0xa>
 8005936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005938:	07d0      	lsls	r0, r2, #31
 800593a:	d404      	bmi.n	8005946 <_fflush_r+0x32>
 800593c:	0599      	lsls	r1, r3, #22
 800593e:	d402      	bmi.n	8005946 <_fflush_r+0x32>
 8005940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005942:	f7ff fb5c 	bl	8004ffe <__retarget_lock_acquire_recursive>
 8005946:	4628      	mov	r0, r5
 8005948:	4621      	mov	r1, r4
 800594a:	f7ff ff5f 	bl	800580c <__sflush_r>
 800594e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005950:	07da      	lsls	r2, r3, #31
 8005952:	4605      	mov	r5, r0
 8005954:	d4e4      	bmi.n	8005920 <_fflush_r+0xc>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	059b      	lsls	r3, r3, #22
 800595a:	d4e1      	bmi.n	8005920 <_fflush_r+0xc>
 800595c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800595e:	f7ff fb4f 	bl	8005000 <__retarget_lock_release_recursive>
 8005962:	e7dd      	b.n	8005920 <_fflush_r+0xc>

08005964 <fiprintf>:
 8005964:	b40e      	push	{r1, r2, r3}
 8005966:	b503      	push	{r0, r1, lr}
 8005968:	4601      	mov	r1, r0
 800596a:	ab03      	add	r3, sp, #12
 800596c:	4805      	ldr	r0, [pc, #20]	@ (8005984 <fiprintf+0x20>)
 800596e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	f000 f89d 	bl	8005ab4 <_vfiprintf_r>
 800597a:	b002      	add	sp, #8
 800597c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005980:	b003      	add	sp, #12
 8005982:	4770      	bx	lr
 8005984:	2000001c 	.word	0x2000001c

08005988 <memmove>:
 8005988:	4288      	cmp	r0, r1
 800598a:	b510      	push	{r4, lr}
 800598c:	eb01 0402 	add.w	r4, r1, r2
 8005990:	d902      	bls.n	8005998 <memmove+0x10>
 8005992:	4284      	cmp	r4, r0
 8005994:	4623      	mov	r3, r4
 8005996:	d807      	bhi.n	80059a8 <memmove+0x20>
 8005998:	1e43      	subs	r3, r0, #1
 800599a:	42a1      	cmp	r1, r4
 800599c:	d008      	beq.n	80059b0 <memmove+0x28>
 800599e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059a6:	e7f8      	b.n	800599a <memmove+0x12>
 80059a8:	4402      	add	r2, r0
 80059aa:	4601      	mov	r1, r0
 80059ac:	428a      	cmp	r2, r1
 80059ae:	d100      	bne.n	80059b2 <memmove+0x2a>
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ba:	e7f7      	b.n	80059ac <memmove+0x24>

080059bc <_sbrk_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d06      	ldr	r5, [pc, #24]	@ (80059d8 <_sbrk_r+0x1c>)
 80059c0:	2300      	movs	r3, #0
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	f7fb fb0e 	bl	8000fe8 <_sbrk>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_sbrk_r+0x1a>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_sbrk_r+0x1a>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	20000354 	.word	0x20000354

080059dc <memcpy>:
 80059dc:	440a      	add	r2, r1
 80059de:	4291      	cmp	r1, r2
 80059e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059e4:	d100      	bne.n	80059e8 <memcpy+0xc>
 80059e6:	4770      	bx	lr
 80059e8:	b510      	push	{r4, lr}
 80059ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059f2:	4291      	cmp	r1, r2
 80059f4:	d1f9      	bne.n	80059ea <memcpy+0xe>
 80059f6:	bd10      	pop	{r4, pc}

080059f8 <abort>:
 80059f8:	b508      	push	{r3, lr}
 80059fa:	2006      	movs	r0, #6
 80059fc:	f000 fa2e 	bl	8005e5c <raise>
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fb fa79 	bl	8000ef8 <_exit>

08005a06 <_realloc_r>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	4615      	mov	r5, r2
 8005a0e:	460c      	mov	r4, r1
 8005a10:	b921      	cbnz	r1, 8005a1c <_realloc_r+0x16>
 8005a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a16:	4611      	mov	r1, r2
 8005a18:	f7ff bb86 	b.w	8005128 <_malloc_r>
 8005a1c:	b92a      	cbnz	r2, 8005a2a <_realloc_r+0x24>
 8005a1e:	f7ff fb0f 	bl	8005040 <_free_r>
 8005a22:	2400      	movs	r4, #0
 8005a24:	4620      	mov	r0, r4
 8005a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2a:	f000 fa33 	bl	8005e94 <_malloc_usable_size_r>
 8005a2e:	4285      	cmp	r5, r0
 8005a30:	4606      	mov	r6, r0
 8005a32:	d802      	bhi.n	8005a3a <_realloc_r+0x34>
 8005a34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a38:	d8f4      	bhi.n	8005a24 <_realloc_r+0x1e>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	f7ff fb73 	bl	8005128 <_malloc_r>
 8005a42:	4607      	mov	r7, r0
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0ec      	beq.n	8005a22 <_realloc_r+0x1c>
 8005a48:	42b5      	cmp	r5, r6
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	bf28      	it	cs
 8005a50:	4632      	movcs	r2, r6
 8005a52:	f7ff ffc3 	bl	80059dc <memcpy>
 8005a56:	4621      	mov	r1, r4
 8005a58:	4640      	mov	r0, r8
 8005a5a:	f7ff faf1 	bl	8005040 <_free_r>
 8005a5e:	463c      	mov	r4, r7
 8005a60:	e7e0      	b.n	8005a24 <_realloc_r+0x1e>

08005a62 <__sfputc_r>:
 8005a62:	6893      	ldr	r3, [r2, #8]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	b410      	push	{r4}
 8005a6a:	6093      	str	r3, [r2, #8]
 8005a6c:	da08      	bge.n	8005a80 <__sfputc_r+0x1e>
 8005a6e:	6994      	ldr	r4, [r2, #24]
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	db01      	blt.n	8005a78 <__sfputc_r+0x16>
 8005a74:	290a      	cmp	r1, #10
 8005a76:	d103      	bne.n	8005a80 <__sfputc_r+0x1e>
 8005a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7c:	f000 b932 	b.w	8005ce4 <__swbuf_r>
 8005a80:	6813      	ldr	r3, [r2, #0]
 8005a82:	1c58      	adds	r0, r3, #1
 8005a84:	6010      	str	r0, [r2, #0]
 8005a86:	7019      	strb	r1, [r3, #0]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <__sfputs_r>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	18d5      	adds	r5, r2, r3
 8005a9a:	42ac      	cmp	r4, r5
 8005a9c:	d101      	bne.n	8005aa2 <__sfputs_r+0x12>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e007      	b.n	8005ab2 <__sfputs_r+0x22>
 8005aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa6:	463a      	mov	r2, r7
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff ffda 	bl	8005a62 <__sfputc_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d1f3      	bne.n	8005a9a <__sfputs_r+0xa>
 8005ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ab4 <_vfiprintf_r>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	460d      	mov	r5, r1
 8005aba:	b09d      	sub	sp, #116	@ 0x74
 8005abc:	4614      	mov	r4, r2
 8005abe:	4698      	mov	r8, r3
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	b118      	cbz	r0, 8005acc <_vfiprintf_r+0x18>
 8005ac4:	6a03      	ldr	r3, [r0, #32]
 8005ac6:	b90b      	cbnz	r3, 8005acc <_vfiprintf_r+0x18>
 8005ac8:	f7ff f986 	bl	8004dd8 <__sinit>
 8005acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ace:	07d9      	lsls	r1, r3, #31
 8005ad0:	d405      	bmi.n	8005ade <_vfiprintf_r+0x2a>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	059a      	lsls	r2, r3, #22
 8005ad6:	d402      	bmi.n	8005ade <_vfiprintf_r+0x2a>
 8005ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ada:	f7ff fa90 	bl	8004ffe <__retarget_lock_acquire_recursive>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	d501      	bpl.n	8005ae8 <_vfiprintf_r+0x34>
 8005ae4:	692b      	ldr	r3, [r5, #16]
 8005ae6:	b99b      	cbnz	r3, 8005b10 <_vfiprintf_r+0x5c>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f938 	bl	8005d60 <__swsetup_r>
 8005af0:	b170      	cbz	r0, 8005b10 <_vfiprintf_r+0x5c>
 8005af2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af4:	07dc      	lsls	r4, r3, #31
 8005af6:	d504      	bpl.n	8005b02 <_vfiprintf_r+0x4e>
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	b01d      	add	sp, #116	@ 0x74
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	0598      	lsls	r0, r3, #22
 8005b06:	d4f7      	bmi.n	8005af8 <_vfiprintf_r+0x44>
 8005b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b0a:	f7ff fa79 	bl	8005000 <__retarget_lock_release_recursive>
 8005b0e:	e7f3      	b.n	8005af8 <_vfiprintf_r+0x44>
 8005b10:	2300      	movs	r3, #0
 8005b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b14:	2320      	movs	r3, #32
 8005b16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b1e:	2330      	movs	r3, #48	@ 0x30
 8005b20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cd0 <_vfiprintf_r+0x21c>
 8005b24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b28:	f04f 0901 	mov.w	r9, #1
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	469a      	mov	sl, r3
 8005b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b34:	b10a      	cbz	r2, 8005b3a <_vfiprintf_r+0x86>
 8005b36:	2a25      	cmp	r2, #37	@ 0x25
 8005b38:	d1f9      	bne.n	8005b2e <_vfiprintf_r+0x7a>
 8005b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b3e:	d00b      	beq.n	8005b58 <_vfiprintf_r+0xa4>
 8005b40:	465b      	mov	r3, fp
 8005b42:	4622      	mov	r2, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	4630      	mov	r0, r6
 8005b48:	f7ff ffa2 	bl	8005a90 <__sfputs_r>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f000 80a7 	beq.w	8005ca0 <_vfiprintf_r+0x1ec>
 8005b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b54:	445a      	add	r2, fp
 8005b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b58:	f89a 3000 	ldrb.w	r3, [sl]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 809f 	beq.w	8005ca0 <_vfiprintf_r+0x1ec>
 8005b62:	2300      	movs	r3, #0
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295
 8005b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b6c:	f10a 0a01 	add.w	sl, sl, #1
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b78:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b7a:	4654      	mov	r4, sl
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b82:	4853      	ldr	r0, [pc, #332]	@ (8005cd0 <_vfiprintf_r+0x21c>)
 8005b84:	f7fa fb54 	bl	8000230 <memchr>
 8005b88:	9a04      	ldr	r2, [sp, #16]
 8005b8a:	b9d8      	cbnz	r0, 8005bc4 <_vfiprintf_r+0x110>
 8005b8c:	06d1      	lsls	r1, r2, #27
 8005b8e:	bf44      	itt	mi
 8005b90:	2320      	movmi	r3, #32
 8005b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b96:	0713      	lsls	r3, r2, #28
 8005b98:	bf44      	itt	mi
 8005b9a:	232b      	movmi	r3, #43	@ 0x2b
 8005b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba6:	d015      	beq.n	8005bd4 <_vfiprintf_r+0x120>
 8005ba8:	9a07      	ldr	r2, [sp, #28]
 8005baa:	4654      	mov	r4, sl
 8005bac:	2000      	movs	r0, #0
 8005bae:	f04f 0c0a 	mov.w	ip, #10
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb8:	3b30      	subs	r3, #48	@ 0x30
 8005bba:	2b09      	cmp	r3, #9
 8005bbc:	d94b      	bls.n	8005c56 <_vfiprintf_r+0x1a2>
 8005bbe:	b1b0      	cbz	r0, 8005bee <_vfiprintf_r+0x13a>
 8005bc0:	9207      	str	r2, [sp, #28]
 8005bc2:	e014      	b.n	8005bee <_vfiprintf_r+0x13a>
 8005bc4:	eba0 0308 	sub.w	r3, r0, r8
 8005bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	46a2      	mov	sl, r4
 8005bd2:	e7d2      	b.n	8005b7a <_vfiprintf_r+0xc6>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	9103      	str	r1, [sp, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bfbb      	ittet	lt
 8005be0:	425b      	neglt	r3, r3
 8005be2:	f042 0202 	orrlt.w	r2, r2, #2
 8005be6:	9307      	strge	r3, [sp, #28]
 8005be8:	9307      	strlt	r3, [sp, #28]
 8005bea:	bfb8      	it	lt
 8005bec:	9204      	strlt	r2, [sp, #16]
 8005bee:	7823      	ldrb	r3, [r4, #0]
 8005bf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bf2:	d10a      	bne.n	8005c0a <_vfiprintf_r+0x156>
 8005bf4:	7863      	ldrb	r3, [r4, #1]
 8005bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf8:	d132      	bne.n	8005c60 <_vfiprintf_r+0x1ac>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	1d1a      	adds	r2, r3, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	9203      	str	r2, [sp, #12]
 8005c02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c06:	3402      	adds	r4, #2
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ce0 <_vfiprintf_r+0x22c>
 8005c0e:	7821      	ldrb	r1, [r4, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7fa fb0c 	bl	8000230 <memchr>
 8005c18:	b138      	cbz	r0, 8005c2a <_vfiprintf_r+0x176>
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	eba0 000a 	sub.w	r0, r0, sl
 8005c20:	2240      	movs	r2, #64	@ 0x40
 8005c22:	4082      	lsls	r2, r0
 8005c24:	4313      	orrs	r3, r2
 8005c26:	3401      	adds	r4, #1
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2e:	4829      	ldr	r0, [pc, #164]	@ (8005cd4 <_vfiprintf_r+0x220>)
 8005c30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c34:	2206      	movs	r2, #6
 8005c36:	f7fa fafb 	bl	8000230 <memchr>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d03f      	beq.n	8005cbe <_vfiprintf_r+0x20a>
 8005c3e:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <_vfiprintf_r+0x224>)
 8005c40:	bb1b      	cbnz	r3, 8005c8a <_vfiprintf_r+0x1d6>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	3307      	adds	r3, #7
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c50:	443b      	add	r3, r7
 8005c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c54:	e76a      	b.n	8005b2c <_vfiprintf_r+0x78>
 8005c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e7a8      	b.n	8005bb2 <_vfiprintf_r+0xfe>
 8005c60:	2300      	movs	r3, #0
 8005c62:	3401      	adds	r4, #1
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0c0a 	mov.w	ip, #10
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c72:	3a30      	subs	r2, #48	@ 0x30
 8005c74:	2a09      	cmp	r2, #9
 8005c76:	d903      	bls.n	8005c80 <_vfiprintf_r+0x1cc>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0c6      	beq.n	8005c0a <_vfiprintf_r+0x156>
 8005c7c:	9105      	str	r1, [sp, #20]
 8005c7e:	e7c4      	b.n	8005c0a <_vfiprintf_r+0x156>
 8005c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c84:	4604      	mov	r4, r0
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7f0      	b.n	8005c6c <_vfiprintf_r+0x1b8>
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <_vfiprintf_r+0x228>)
 8005c92:	a904      	add	r1, sp, #16
 8005c94:	4630      	mov	r0, r6
 8005c96:	f3af 8000 	nop.w
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	1c78      	adds	r0, r7, #1
 8005c9e:	d1d6      	bne.n	8005c4e <_vfiprintf_r+0x19a>
 8005ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ca2:	07d9      	lsls	r1, r3, #31
 8005ca4:	d405      	bmi.n	8005cb2 <_vfiprintf_r+0x1fe>
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d402      	bmi.n	8005cb2 <_vfiprintf_r+0x1fe>
 8005cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cae:	f7ff f9a7 	bl	8005000 <__retarget_lock_release_recursive>
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	065b      	lsls	r3, r3, #25
 8005cb6:	f53f af1f 	bmi.w	8005af8 <_vfiprintf_r+0x44>
 8005cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cbc:	e71e      	b.n	8005afc <_vfiprintf_r+0x48>
 8005cbe:	ab03      	add	r3, sp, #12
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	462a      	mov	r2, r5
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <_vfiprintf_r+0x228>)
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff fc7f 	bl	80055cc <_printf_i>
 8005cce:	e7e4      	b.n	8005c9a <_vfiprintf_r+0x1e6>
 8005cd0:	080060bb 	.word	0x080060bb
 8005cd4:	080060c5 	.word	0x080060c5
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	08005a91 	.word	0x08005a91
 8005ce0:	080060c1 	.word	0x080060c1

08005ce4 <__swbuf_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	4605      	mov	r5, r0
 8005cec:	b118      	cbz	r0, 8005cf6 <__swbuf_r+0x12>
 8005cee:	6a03      	ldr	r3, [r0, #32]
 8005cf0:	b90b      	cbnz	r3, 8005cf6 <__swbuf_r+0x12>
 8005cf2:	f7ff f871 	bl	8004dd8 <__sinit>
 8005cf6:	69a3      	ldr	r3, [r4, #24]
 8005cf8:	60a3      	str	r3, [r4, #8]
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	071a      	lsls	r2, r3, #28
 8005cfe:	d501      	bpl.n	8005d04 <__swbuf_r+0x20>
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	b943      	cbnz	r3, 8005d16 <__swbuf_r+0x32>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f82a 	bl	8005d60 <__swsetup_r>
 8005d0c:	b118      	cbz	r0, 8005d16 <__swbuf_r+0x32>
 8005d0e:	f04f 37ff 	mov.w	r7, #4294967295
 8005d12:	4638      	mov	r0, r7
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	6922      	ldr	r2, [r4, #16]
 8005d1a:	1a98      	subs	r0, r3, r2
 8005d1c:	6963      	ldr	r3, [r4, #20]
 8005d1e:	b2f6      	uxtb	r6, r6
 8005d20:	4283      	cmp	r3, r0
 8005d22:	4637      	mov	r7, r6
 8005d24:	dc05      	bgt.n	8005d32 <__swbuf_r+0x4e>
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fdf3 	bl	8005914 <_fflush_r>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d1ed      	bne.n	8005d0e <__swbuf_r+0x2a>
 8005d32:	68a3      	ldr	r3, [r4, #8]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	60a3      	str	r3, [r4, #8]
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	701e      	strb	r6, [r3, #0]
 8005d40:	6962      	ldr	r2, [r4, #20]
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d004      	beq.n	8005d52 <__swbuf_r+0x6e>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	07db      	lsls	r3, r3, #31
 8005d4c:	d5e1      	bpl.n	8005d12 <__swbuf_r+0x2e>
 8005d4e:	2e0a      	cmp	r6, #10
 8005d50:	d1df      	bne.n	8005d12 <__swbuf_r+0x2e>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff fddd 	bl	8005914 <_fflush_r>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0d9      	beq.n	8005d12 <__swbuf_r+0x2e>
 8005d5e:	e7d6      	b.n	8005d0e <__swbuf_r+0x2a>

08005d60 <__swsetup_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4b29      	ldr	r3, [pc, #164]	@ (8005e08 <__swsetup_r+0xa8>)
 8005d64:	4605      	mov	r5, r0
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	460c      	mov	r4, r1
 8005d6a:	b118      	cbz	r0, 8005d74 <__swsetup_r+0x14>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <__swsetup_r+0x14>
 8005d70:	f7ff f832 	bl	8004dd8 <__sinit>
 8005d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d78:	0719      	lsls	r1, r3, #28
 8005d7a:	d422      	bmi.n	8005dc2 <__swsetup_r+0x62>
 8005d7c:	06da      	lsls	r2, r3, #27
 8005d7e:	d407      	bmi.n	8005d90 <__swsetup_r+0x30>
 8005d80:	2209      	movs	r2, #9
 8005d82:	602a      	str	r2, [r5, #0]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	e033      	b.n	8005df8 <__swsetup_r+0x98>
 8005d90:	0758      	lsls	r0, r3, #29
 8005d92:	d512      	bpl.n	8005dba <__swsetup_r+0x5a>
 8005d94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d96:	b141      	cbz	r1, 8005daa <__swsetup_r+0x4a>
 8005d98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	d002      	beq.n	8005da6 <__swsetup_r+0x46>
 8005da0:	4628      	mov	r0, r5
 8005da2:	f7ff f94d 	bl	8005040 <_free_r>
 8005da6:	2300      	movs	r3, #0
 8005da8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	2300      	movs	r3, #0
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f043 0308 	orr.w	r3, r3, #8
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	b94b      	cbnz	r3, 8005dda <__swsetup_r+0x7a>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dd0:	d003      	beq.n	8005dda <__swsetup_r+0x7a>
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 f88b 	bl	8005ef0 <__smakebuf_r>
 8005dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dde:	f013 0201 	ands.w	r2, r3, #1
 8005de2:	d00a      	beq.n	8005dfa <__swsetup_r+0x9a>
 8005de4:	2200      	movs	r2, #0
 8005de6:	60a2      	str	r2, [r4, #8]
 8005de8:	6962      	ldr	r2, [r4, #20]
 8005dea:	4252      	negs	r2, r2
 8005dec:	61a2      	str	r2, [r4, #24]
 8005dee:	6922      	ldr	r2, [r4, #16]
 8005df0:	b942      	cbnz	r2, 8005e04 <__swsetup_r+0xa4>
 8005df2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005df6:	d1c5      	bne.n	8005d84 <__swsetup_r+0x24>
 8005df8:	bd38      	pop	{r3, r4, r5, pc}
 8005dfa:	0799      	lsls	r1, r3, #30
 8005dfc:	bf58      	it	pl
 8005dfe:	6962      	ldrpl	r2, [r4, #20]
 8005e00:	60a2      	str	r2, [r4, #8]
 8005e02:	e7f4      	b.n	8005dee <__swsetup_r+0x8e>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7f7      	b.n	8005df8 <__swsetup_r+0x98>
 8005e08:	2000001c 	.word	0x2000001c

08005e0c <_raise_r>:
 8005e0c:	291f      	cmp	r1, #31
 8005e0e:	b538      	push	{r3, r4, r5, lr}
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	d904      	bls.n	8005e20 <_raise_r+0x14>
 8005e16:	2316      	movs	r3, #22
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e22:	b112      	cbz	r2, 8005e2a <_raise_r+0x1e>
 8005e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e28:	b94b      	cbnz	r3, 8005e3e <_raise_r+0x32>
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 f830 	bl	8005e90 <_getpid_r>
 8005e30:	4622      	mov	r2, r4
 8005e32:	4601      	mov	r1, r0
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3a:	f000 b817 	b.w	8005e6c <_kill_r>
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d00a      	beq.n	8005e58 <_raise_r+0x4c>
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	d103      	bne.n	8005e4e <_raise_r+0x42>
 8005e46:	2316      	movs	r3, #22
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	e7e7      	b.n	8005e1e <_raise_r+0x12>
 8005e4e:	2100      	movs	r1, #0
 8005e50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e54:	4620      	mov	r0, r4
 8005e56:	4798      	blx	r3
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7e0      	b.n	8005e1e <_raise_r+0x12>

08005e5c <raise>:
 8005e5c:	4b02      	ldr	r3, [pc, #8]	@ (8005e68 <raise+0xc>)
 8005e5e:	4601      	mov	r1, r0
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f7ff bfd3 	b.w	8005e0c <_raise_r>
 8005e66:	bf00      	nop
 8005e68:	2000001c 	.word	0x2000001c

08005e6c <_kill_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	@ (8005e8c <_kill_r+0x20>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f7fb f82d 	bl	8000ed8 <_kill>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_kill_r+0x1c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_kill_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000354 	.word	0x20000354

08005e90 <_getpid_r>:
 8005e90:	f7fb b81a 	b.w	8000ec8 <_getpid>

08005e94 <_malloc_usable_size_r>:
 8005e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e98:	1f18      	subs	r0, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfbc      	itt	lt
 8005e9e:	580b      	ldrlt	r3, [r1, r0]
 8005ea0:	18c0      	addlt	r0, r0, r3
 8005ea2:	4770      	bx	lr

08005ea4 <__swhatbuf_r>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eac:	2900      	cmp	r1, #0
 8005eae:	b096      	sub	sp, #88	@ 0x58
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	461e      	mov	r6, r3
 8005eb4:	da0d      	bge.n	8005ed2 <__swhatbuf_r+0x2e>
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	bf14      	ite	ne
 8005ec2:	2340      	movne	r3, #64	@ 0x40
 8005ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ec8:	2000      	movs	r0, #0
 8005eca:	6031      	str	r1, [r6, #0]
 8005ecc:	602b      	str	r3, [r5, #0]
 8005ece:	b016      	add	sp, #88	@ 0x58
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	466a      	mov	r2, sp
 8005ed4:	f000 f848 	bl	8005f68 <_fstat_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	dbec      	blt.n	8005eb6 <__swhatbuf_r+0x12>
 8005edc:	9901      	ldr	r1, [sp, #4]
 8005ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ee6:	4259      	negs	r1, r3
 8005ee8:	4159      	adcs	r1, r3
 8005eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eee:	e7eb      	b.n	8005ec8 <__swhatbuf_r+0x24>

08005ef0 <__smakebuf_r>:
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef4:	079d      	lsls	r5, r3, #30
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	d507      	bpl.n	8005f0c <__smakebuf_r+0x1c>
 8005efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	2301      	movs	r3, #1
 8005f06:	6163      	str	r3, [r4, #20]
 8005f08:	b003      	add	sp, #12
 8005f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0c:	ab01      	add	r3, sp, #4
 8005f0e:	466a      	mov	r2, sp
 8005f10:	f7ff ffc8 	bl	8005ea4 <__swhatbuf_r>
 8005f14:	9f00      	ldr	r7, [sp, #0]
 8005f16:	4605      	mov	r5, r0
 8005f18:	4639      	mov	r1, r7
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7ff f904 	bl	8005128 <_malloc_r>
 8005f20:	b948      	cbnz	r0, 8005f36 <__smakebuf_r+0x46>
 8005f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f26:	059a      	lsls	r2, r3, #22
 8005f28:	d4ee      	bmi.n	8005f08 <__smakebuf_r+0x18>
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0302 	orr.w	r3, r3, #2
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	e7e2      	b.n	8005efc <__smakebuf_r+0xc>
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	6020      	str	r0, [r4, #0]
 8005f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f46:	b15b      	cbz	r3, 8005f60 <__smakebuf_r+0x70>
 8005f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f81d 	bl	8005f8c <_isatty_r>
 8005f52:	b128      	cbz	r0, 8005f60 <__smakebuf_r+0x70>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	431d      	orrs	r5, r3
 8005f64:	81a5      	strh	r5, [r4, #12]
 8005f66:	e7cf      	b.n	8005f08 <__smakebuf_r+0x18>

08005f68 <_fstat_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d07      	ldr	r5, [pc, #28]	@ (8005f88 <_fstat_r+0x20>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	f7fb f80f 	bl	8000f98 <_fstat>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	d102      	bne.n	8005f84 <_fstat_r+0x1c>
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	b103      	cbz	r3, 8005f84 <_fstat_r+0x1c>
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	20000354 	.word	0x20000354

08005f8c <_isatty_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d06      	ldr	r5, [pc, #24]	@ (8005fa8 <_isatty_r+0x1c>)
 8005f90:	2300      	movs	r3, #0
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fb f80e 	bl	8000fb8 <_isatty>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_isatty_r+0x1a>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_isatty_r+0x1a>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20000354 	.word	0x20000354

08005fac <_init>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_fini>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr
